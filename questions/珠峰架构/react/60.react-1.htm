<!DOCTYPE html>
<!-- saved from url=(0061)http://www.zhufengpeixun.cn/architecture/html/60.react-1.html -->
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>珠峰架构师成长计划</title>
    <link rel="stylesheet" type="text/css" href="./60.react-1_files/main.css">
    <style type="text/css" abt="234"></style>
    <script>
        //console.log('a')
    </script>
    <script>
        //remove 17173 video ad
        doAdblock();

        function doAdblock() {
            (function () {
                function A() {}
                A.prototype = {
                    rules: {
                        '17173_in': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_in_20150522.swf"
                        },
                        '17173_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_out_20150522.swf"
                        },
                        '17173_live': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_stream_20150522.swf"
                        },
                        '17173_live_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                            'replace': "http://swf.adtchrome.com/17173.out.Live.swf"
                        }
                    },
                    _done: null,
                    get done() {
                        if (!this._done) {
                            this._done = new Array();
                        }
                        return this._done;
                    },
                    addAnimations: function () {
                        var style = document.createElement('style');
                        style.type = 'text/css';
                        style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                        document.getElementsByTagName('head')[0].appendChild(style);
                    },
                    animationsHandler: function (e) {
                        if (e.animationName === 'playerInserted') {
                            this.replace(e.target);
                        }
                    },
                    replace: function (elem) {
                        if (this.done.indexOf(elem) != -1) return;
                        this.done.push(elem);
                        var player = elem.data || elem.src;
                        if (!player) return;
                        var i, find, replace = false;
                        for (i in this.rules) {
                            find = this.rules[i]['find'];
                            if (find.test(player)) {
                                replace = this.rules[i]['replace'];
                                if ('function' === typeof this.rules[i]['preHandle']) {
                                    this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                                } else {
                                    this.reallyReplace.bind(this, elem, find, replace)();
                                }
                                break;
                            }
                        }
                    },
                    reallyReplace: function (elem, find, replace) {
                        elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem
                            .src = elem.src.replace(find, replace)) && (elem.style.display =
                            'block'));
                        var b = elem.querySelector("param[name='movie']");
                        this.reloadPlugin(elem);
                    },
                    reloadPlugin: function (elem) {
                        var nextSibling = elem.nextSibling;
                        var parentNode = elem.parentNode;
                        parentNode.removeChild(elem);
                        var newElem = elem.cloneNode(true);
                        this.done.push(newElem);
                        if (nextSibling) {
                            parentNode.insertBefore(newElem, nextSibling);
                        } else {
                            parentNode.appendChild(newElem);
                        }
                    },
                    init: function () {
                        var handler = this.animationsHandler.bind(this);
                        document.body.addEventListener('webkitAnimationStart', handler, false);
                        document.body.addEventListener('msAnimationStart', handler, false);
                        document.body.addEventListener('oAnimationStart', handler, false);
                        document.body.addEventListener('animationstart', handler, false);
                        this.addAnimations();
                    }
                };
                new A().init();
            })();
        }
        //remove baidu search ad
        if (document.URL.indexOf('www.baidu.com') >= 0) {
            if (document && document.getElementsByTagName && document.getElementById && document.body) {
                var aa = function () {
                    var all = document.body.querySelectorAll("#content_left div,#content_left table");
                    for (var i = 0; i < all.length; i++) {
                        if (/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                    all = document.body.querySelectorAll('.result.c-container[id="1"]');
                    //if(all.length == 1) return;
                    for (var i = 0; i < all.length; i++) {
                        if (all[i].innerHTML && all[i].innerHTML.indexOf('广告') > -1) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                }
                aa();
                document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified', aa)
            };
        }
        //remove sohu video ad
        if (document.URL.indexOf("tv.sohu.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //remove 56.com video ad
        if (document.URL.indexOf("56.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //fore iqiyi enable html5 player function
        if (document.URL.indexOf("iqiyi.com") >= 0) {
            if (document.cookie.indexOf("player_forcedType=h5_VOD") == -1) {
                document.cookie = 'player_forcedType=h5_VOD'
                if (localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime) < 60000) {
                    console.log('no reload')
                } else {
                    location.reload()
                    localStorage.reloadTime = Date.now();
                }
            }
        }
    </script>
    <style type="text/css">
        object,
        embed {
            -webkit-animation-duration: .001s;
            -webkit-animation-name: playerInserted;
            -ms-animation-duration: .001s;
            -ms-animation-name: playerInserted;
            -o-animation-duration: .001s;
            -o-animation-name: playerInserted;
            animation-duration: .001s;
            animation-name: playerInserted;
        }

        @-webkit-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-ms-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-o-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }
    </style>
</head>

<body>
    

    <div class="warpper">

        <div class="page-toc">
            <ul>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t01.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE">1.初始化项目</a>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t12.%20%E6%B8%B2%E6%9F%93%E6%96%87%E6%9C%AC">2.
                        渲染文本</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t22.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">2.1
                                渲染效果</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t32.2%20%E7%B1%BB%E5%9B%BE">2.2
                                类图</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t42.3%20%E5%AE%9E%E7%8E%B0">2.3
                                实现</a>
                            <ul>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t52.3.1%20index.js">2.3.1
                                        index.js</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t62.3.2%20react\index.js">2.3.2
                                        react\index.js</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t72.3.3%20react\unit.js">2.3.3
                                        react\unit.js</a></li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t83.%20%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%94%9FDOM%E7%BB%84%E4%BB%B6">3.
                        渲染原生DOM组件</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t93.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">3.1
                                渲染效果</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t103.2%20%E7%B1%BB%E5%9B%BE">3.2
                                类图</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t113.3%20JSX%E8%AF%AD%E6%B3%95">3.3
                                JSX语法</a>
                            <ul>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t123.3.1%20JSX">3.3.1
                                        JSX</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t133.3.2%20JavaScript">3.3.2
                                        JavaScript</a></li>
                            </ul>
                        </li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t143.4%20%E5%AE%9E%E7%8E%B0">3.4
                                实现</a>
                            <ul>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t153.4.1%20%20index.js">3.4.1
                                        index.js</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t163.4.2%20react/index.js">3.4.2
                                        react/index.js</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t173.4.3%20react/element.js">3.4.3
                                        react/element.js</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t183.4.4%20react/unit.js">3.4.4
                                        react/unit.js</a></li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t194.%20%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6">4.
                        渲染自定义组件</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t204.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">4.1
                                渲染效果</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t214.2%20%E7%B1%BB%E5%9B%BE">4.2
                                类图</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t224.3%20%E5%AE%9E%E7%8E%B0">4.3
                                实现</a>
                            <ul>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t234.3.1%20src/index.js">4.3.1
                                        src/index.js</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t244.3.2%20react/index.js">4.3.2
                                        react/index.js</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t254.3.3%20react/component.js">4.3.3
                                        react/component.js</a></li>
                                <li><a
                                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t264.3.4%20react/unit.js">4.3.4
                                        react/unit.js</a></li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t275.%20%E5%AE%9E%E7%8E%B0setState">5.
                        实现setState</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t285.1%20src/index.js">5.1
                                src/index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t295.2%20react/component.js">5.2
                                react/component.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t305.3%20react/unit.js">5.3
                                react/unit.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t315.4%20react/element.js">5.4
                                react/element.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t326.%20%E5%AF%B9%E6%AF%94%E5%B1%9E%E6%80%A7">6.
                        对比属性</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t336.1%20%20src/index.js">6.1
                                src/index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t346.2%20react/unit.js">6.2
                                react/unit.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t357.%20%E8%8E%B7%E5%BE%97%E8%A1%A5%E4%B8%81%E6%95%B0%E7%BB%84">7.
                        获得补丁数组</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t367.1%20src/index.js">7.1
                                src/index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t377.2%20src/react/unit.js">7.2
                                src/react/unit.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t388.%20%E6%89%93%E8%A1%A5%E4%B8%81">8.
                        打补丁</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t398.1%20src/index.js">8.1
                                src/index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t408.2%20react/unit.js">8.2
                                react/unit.js</a></li>
                    </ul>
                </li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t419.%20todos">9. todos</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t429.1%20src/index.js">9.1
                                src/index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t439.2%20react/unit.js">9.2
                                react/unit.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4410.%20diff%20%E7%AD%96%E7%95%A5">10.
                        diff 策略</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4510.1%20tree%20diff">10.1
                                tree diff</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4610.2%20component%20%20diff">10.2
                                component diff</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4710.3%20element%20diff">10.3
                                element diff</a></li>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4810.4%20key">10.4
                                key</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4911.delegate">11.delegate</a>
                </li>
            </ul>
        </div>

        <div class="content markdown-body">
            <h2 id="t01.初始化项目">1.初始化项目 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t01.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE">
                    # </a></h2>
            <p><a href="https://gitee.com/zhufengpeixun/zhufeng_react2/commits/master">commit</a></p>
            <pre><code class="lang-js">create-react-app zhufeng_react2
cd zhufeng_react2
cnpm i jquery -S
npm start
</code></pre>
            <h2 id="t12. 渲染文本">2. 渲染文本 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t12.%20%E6%B8%B2%E6%9F%93%E6%96%87%E6%9C%AC">
                    # </a></h2>
            <p><a
                    href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/0494c0f1d43dfecda0a0617c1b9c5c942be90d2d">commit</a>
            </p>
            <h3 id="t22.1 渲染效果">2.1 渲染效果 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t22.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">
                    # </a></h3>
            <p><img src="./60.react-1_files/1.initrenderhtml.png" alt="initrenderhtml"></p>
            <h3 id="t32.2 类图">2.2 类图 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t32.2%20%E7%B1%BB%E5%9B%BE"> #
                </a></h3>
            <p><img src="./60.react-1_files/2.rendertext.jpg" alt="2.rendertext"></p>
            <h3 id="t42.3 实现">2.3 实现 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t42.3%20%E5%AE%9E%E7%8E%B0"> #
                </a></h3>
            <h4 id="t52.3.1 index.js">2.3.1 index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t52.3.1%20index.js"> # </a></h4>
            <p>src\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
React.render(<span class="hljs-string">'hello'</span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
            <h4 id="t62.3.2 react\index.js">2.3.2 react\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t62.3.2%20react\index.js"> #
                </a></h4>
            <p>src\react\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;
<span class="hljs-keyword">import</span> {createReactUnit} <span class="hljs-keyword">from</span> <span class="hljs-string">'./unit'</span>;
<span class="hljs-keyword">let</span> React = {
    <span class="hljs-attr">nextRootIndex</span>:<span class="hljs-number">0</span>,
    render
}
<span class="hljs-comment">/**
 * React.render 作为入口接受一个React元素和浏览器中的DOM对象负责调用渲染
 * nextReactRootIndex 为每个 component 的生成唯一标识
 * @param {*} element React元素
 * @param {*} container 目标容器的DOM节点
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">element,container</span>)</span>{
    <span class="hljs-comment">//根据 element 的类型,返回一个 Component 的实例,是一个工厂函数</span>
    <span class="hljs-keyword">let</span> unitInstance = createReactUnit(element);
    <span class="hljs-comment">//用于对组件的渲染,返回组件的HTML字符串</span>
    <span class="hljs-keyword">let</span> markup = unitInstance.getMarkup(React.nextRootIndex);
    <span class="hljs-comment">//把组装好的DOM放入container容器中</span>
    $(container).html(markup);
    <span class="hljs-comment">//触发装载完成事件</span>
    $(<span class="hljs-built_in">document</span>).trigger(<span class="hljs-string">'mounted'</span>);
  }

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React;
</code></pre>
            <h4 id="t72.3.3 react\unit.js">2.3.3 react\unit.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t72.3.3%20react\unit.js"> # </a>
            </h4>
            <p>src\react\unit.js</p>
            <pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unit</span></span>{
    <span class="hljs-keyword">constructor</span>(element){
        <span class="hljs-comment">//把虚拟DOM本身保存到this._currentElement上</span>
        <span class="hljs-keyword">this</span>._currentElement = element;
    }
    getMarkup(rootId){<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'此方法不能被直接调用'</span>)}
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactTextUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;<span class="hljs-comment">//保存记录rootId</span>
        <span class="hljs-comment">//返回文本节点对应的HTML字符串</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"&gt;<span class="hljs-subst">${<span class="hljs-keyword">this</span>._currentElement}</span>&lt;/span&gt;`</span>;
    }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createReactUnit</span>(<span class="hljs-params">element</span>)</span>{
    <span class="hljs-comment">//如果元素的类型是字符串或者数字的话返回一个text元素实例</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'string'</span> || <span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'number'</span>){
        <span class="hljs-comment">//返回一个文本元素实例</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactTextUnit(element);
    }
}
<span class="hljs-keyword">export</span> {
    createReactUnit
}
</code></pre>
            <h2 id="t83. 渲染原生DOM组件">3. 渲染原生DOM组件 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t83.%20%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%94%9FDOM%E7%BB%84%E4%BB%B6">
                    # </a></h2>
            <ul>
                <li><a href="http://https//babeljs.io/repl/">babeljs</a></li>
            </ul>
            <h3 id="t93.1 渲染效果">3.1 渲染效果 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t93.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">
                    # </a></h3>
            <p><img src="./60.react-1_files/3.renderdom.png" alt="renderdom"></p>
            <h3 id="t103.2 类图">3.2 类图 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t103.2%20%E7%B1%BB%E5%9B%BE"> #
                </a></h3>
            <p><img src="./60.react-1_files/3. rendernativeunit.jpg" alt="20rendernativeunit"></p>
            <h3 id="t113.3 JSX语法">3.3 JSX语法 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t113.3%20JSX%E8%AF%AD%E6%B3%95">
                    # </a></h3>
            <p><img src="./60.react-1_files/2.compile.png" alt="compile"></p>
            <h4 id="t123.3.1 JSX">3.3.1 JSX <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t123.3.1%20JSX"> # </a></h4>
            <pre><code class="lang-js">&lt;button id=<span class="hljs-string">"sayHello"</span> onClick={sayHello}&gt;say&lt;b&gt;Hello&lt;<span class="hljs-regexp">/b&gt;&lt;/</span>button&gt;
</code></pre>
            <h4 id="t133.3.2 JavaScript">3.3.2 JavaScript <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t133.3.2%20JavaScript"> # </a>
            </h4>
            <pre><code class="lang-js"><span class="hljs-keyword">let</span> element = React.createElement(<span class="hljs-string">"button"</span>, {
    <span class="hljs-attr">id</span>: <span class="hljs-string">"sayHello"</span>,
    <span class="hljs-attr">onClick</span>: sayHello
  }, <span class="hljs-string">"say"</span>, React.createElement(<span class="hljs-string">"b"</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">"Hello"</span>));
</code></pre>
            <h3 id="t143.4 实现">3.4 实现 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t143.4%20%E5%AE%9E%E7%8E%B0"> #
                </a></h3>
            <p><a href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/82fa036038b63653ad7539e9715f1236c727ca66">3.
                    渲染原生DOM组件</a></p>
            <h4 id="t153.4.1  index.js">3.4.1 index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t153.4.1%20%20index.js"> # </a>
            </h4>
            <p>src/index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>{
    alert(<span class="hljs-string">'hello'</span>);
}
<span class="hljs-comment">//&lt;button id="sayHello" onClick={sayHello}&gt;say&lt;b&gt;Hello&lt;/b&gt;&lt;/button&gt;</span>
<span class="hljs-keyword">let</span> element = React.createElement(<span class="hljs-string">"button"</span>, {
    <span class="hljs-attr">id</span>: <span class="hljs-string">"sayHello"</span>,
    <span class="hljs-attr">onClick</span>: sayHello
  }, <span class="hljs-string">"say"</span>, React.createElement(<span class="hljs-string">"b"</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">"Hello"</span>));
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
            <h4 id="t163.4.2 react/index.js">3.4.2 react/index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t163.4.2%20react/index.js"> #
                </a></h4>
            <p>src/react/index.js</p>
            <pre><code class="lang-diff">import {createReactUnit} from './unit';
<span class="hljs-addition">+ import {createElement} from './element';</span>
let React = {
    nextRootIndex:0,
    render,
<span class="hljs-addition">+    createElement</span>
}
</code></pre>
            <h4 id="t173.4.3 react/element.js">3.4.3 react/element.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t173.4.3%20react/element.js"> #
                </a></h4>
            <p>src/react/element.js</p>
            <pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Element</span></span>{
    <span class="hljs-keyword">constructor</span>(type,props){
        <span class="hljs-keyword">this</span>.type = type;
        <span class="hljs-keyword">this</span>.props = props;
    }
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createElement</span>(<span class="hljs-params">type,props,...children</span>)</span>{
    props=props||{};
    props.children  = children;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Element(type,props);
}

<span class="hljs-keyword">export</span> {
    createElement
}
</code></pre>
            <h4 id="t183.4.4 react/unit.js">3.4.4 react/unit.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t183.4.4%20react/unit.js"> #
                </a></h4>
            <p>src/react/unit.js</p>
            <pre><code class="lang-diff"><span class="hljs-addition">+class ReactNativeUnit extends Unit{</span>
<span class="hljs-addition">+    getMarkup(rootId){</span>
<span class="hljs-addition">+        this._rootId = rootId;</span>
<span class="hljs-addition">+        let {type,props} = this._currentElement;</span>
<span class="hljs-addition">+        let tagOpen = `&lt;${type} data-reactid="${rootId}"`;</span>
<span class="hljs-addition">+        let tagClose = `&lt;/${type}&gt;`;</span>
<span class="hljs-addition">+        let content = '';</span>
<span class="hljs-addition">+        for(let propKey in props){</span>
<span class="hljs-addition">+            if(/^on[A-Za-z]/.test(propKey)){</span>
<span class="hljs-addition">+                let eventType = propKey.slice(2).toLowerCase();</span>
<span class="hljs-addition">+                $(document).delegate(`[data-reactid="${rootId}"]`,`${eventType}.${rootId}`,props[propKey]);</span>
<span class="hljs-addition">+            }else if(propKey === 'children'){</span>
<span class="hljs-addition">+                let children = props.children||[];</span>
<span class="hljs-addition">+                children.forEach((child,idx)=&gt;{</span>
<span class="hljs-addition">+                    let childUnitInstance = createReactUnit(child);</span>
<span class="hljs-addition">+                    let childMarkup = childUnitInstance.getMarkup(`${rootId}.${idx}`);</span>
<span class="hljs-addition">+                    content += childMarkup;</span>
<span class="hljs-addition">+                });</span>
<span class="hljs-addition">+            }else{</span>
<span class="hljs-addition">+                tagOpen += `${propKey}=${props[propKey]}`;</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+        return tagOpen + '&gt;' + content + tagClose;</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+}</span>

function createReactUnit(element){
    //如果元素的类型是字符串或者数字的话返回一个text元素实例
    if(typeof element == 'string' || typeof element == 'number'){
        //返回一个文本元素实例
        return new ReactTextUnit(element);
    }
<span class="hljs-addition">+    if(typeof element == 'object' &amp;&amp; typeof element.type == 'string'){</span>
<span class="hljs-addition">+        return new ReactNativeUnit(element);</span>
<span class="hljs-addition">+    }</span>
}
</code></pre>
            <h2 id="t194. 渲染自定义组件">4. 渲染自定义组件 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t194.%20%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6">
                    # </a></h2>
            <h3 id="t204.1 渲染效果">4.1 渲染效果 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t204.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">
                    # </a></h3>
            <p><img src="./60.react-1_files/5.customercomponent.png" alt="customercomponent"></p>
            <h3 id="t214.2 类图">4.2 类图 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t214.2%20%E7%B1%BB%E5%9B%BE"> #
                </a></h3>
            <p><img src="./60.react-1_files/4. rendercustomerunit.jpg" alt="20rendercustomerunit"></p>
            <h3 id="t224.3 实现">4.3 实现 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t224.3%20%E5%AE%9E%E7%8E%B0"> #
                </a></h3>
            <p><a
                    href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/9f7c62f2a65221605ad6de1200a793fb8c458b7c">commit</a>
            </p>
            <h4 id="t234.3.1 src/index.js">4.3.1 src/index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t234.3.1%20src/index.js"> # </a>
            </h4>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }
  componentWillMount(){
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Counter componentWillMount`</span>);
  }
  componentDidMount(){
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Counter componentDidMount`</span>);
  }
  handleClick= <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
  }
  render(){
    <span class="hljs-keyword">let</span> p = React.createElement(<span class="hljs-string">'p'</span>,{},<span class="hljs-keyword">this</span>.state.number);
    <span class="hljs-keyword">let</span> button = React.createElement(<span class="hljs-string">'button'</span>,{<span class="hljs-attr">onClick</span>:<span class="hljs-keyword">this</span>.handleClick},<span class="hljs-string">'+'</span>);
    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'div'</span>,{<span class="hljs-attr">id</span>:<span class="hljs-string">'counter'</span>},p,button);
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
            <h4 id="t244.3.2 react/index.js">4.3.2 react/index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t244.3.2%20react/index.js"> #
                </a></h4>
            <p>src/react/index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;
<span class="hljs-keyword">import</span> {createReactUnit} <span class="hljs-keyword">from</span> <span class="hljs-string">'./unit'</span>;
<span class="hljs-keyword">import</span> {createElement} <span class="hljs-keyword">from</span> <span class="hljs-string">'./element'</span>;
+ <span class="hljs-keyword">import</span> {Component} <span class="hljs-keyword">from</span> <span class="hljs-string">'./component'</span>;
<span class="hljs-keyword">let</span> React = {
    <span class="hljs-attr">nextRootIndex</span>:<span class="hljs-number">0</span>,
    render,
    createElement,
+    Component
}
</code></pre>
            <h4 id="t254.3.3 react/component.js">4.3.3 react/component.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t254.3.3%20react/component.js">
                    # </a></h4>
            <p>src/react/component.js</p>
            <pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
      <span class="hljs-keyword">this</span>.props = props;
    }
}
<span class="hljs-keyword">export</span> {Component}
</code></pre>
            <h4 id="t264.3.4 react/unit.js">4.3.4 react/unit.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t264.3.4%20react/unit.js"> #
                </a></h4>
            <p>src/react/unit.js</p>
            <pre><code class="lang-diff">//自定义组件
<span class="hljs-addition">+class ReactCompositeUnit extends Unit{</span>
<span class="hljs-addition">+    getMarkup(rootId){</span>
<span class="hljs-addition">+        this._rootId = rootId;</span>
<span class="hljs-addition">+        //type是一个自定义组件的类定义</span>
<span class="hljs-addition">+        let {type:Component} = this._currentElement;</span>
<span class="hljs-addition">+        //创建Counter组件类的实例</span>
<span class="hljs-addition">+        let componentInstance = this._componentInstance = new Component();</span>
<span class="hljs-addition">+        //如果有componentWillMount钩子函数就让它执行</span>
<span class="hljs-addition">+        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();</span>
<span class="hljs-addition">+        //调用render方法获得返回的虚拟DOM元素</span>
<span class="hljs-addition">+        let renderedElement =  componentInstance.render();</span>
<span class="hljs-addition">+        //根据虚拟DOM元素实例化,可能是ReactCompositeComponent、ReactNativeComponent或ReactTextComponent</span>
<span class="hljs-addition">+        let renderedUnitInstance = this._renderedUnitInstance = createReactUnit(renderedElement);</span>
<span class="hljs-addition">+        //获得renderedComponentInstance的HTML字符中</span>
<span class="hljs-addition">+        let renderedMarkup = renderedUnitInstance.getMarkup(rootId);</span>
<span class="hljs-addition">+        //注册挂载完成的监听，越底层的组件越先监听，越先执行</span>
<span class="hljs-addition">+        $(document).on('mounted',()=&gt;{</span>
<span class="hljs-addition">+            componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount();</span>
<span class="hljs-addition">+        });</span>
<span class="hljs-addition">+        return renderedMarkup;</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+}</span>

function createReactUnit(element){
    //如果元素的类型是字符串或者数字的话返回一个text元素实例
    if(typeof element == 'string' || typeof element == 'number'){
        //返回一个文本元素实例
        return new ReactTextUnit(element);
    }
    if(typeof element == 'object' &amp;&amp; typeof element.type == 'string'){
        return new ReactNativeUnit(element);
    }
<span class="hljs-addition">+    if(typeof element == 'object' &amp;&amp; typeof element.type == 'function'){</span>
<span class="hljs-addition">+        return new ReactCompositeUnit(element);</span>
<span class="hljs-addition">+    }</span>
}
</code></pre>
            <h2 id="t275. 实现setState">5. 实现setState <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t275.%20%E5%AE%9E%E7%8E%B0setState">
                    # </a></h2>
            <p><a
                    href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/ee4676555677b097a784614193f61f4084c879fd">commit</a>
            </p>
            <h3 id="t285.1 src/index.js">5.1 src/index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t285.1%20src/index.js"> # </a>
            </h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }
  componentDidMount(){
    setInterval(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
      <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
    },<span class="hljs-number">1000</span>);
  }
  render(){
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.state.number;
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
            <h3 id="t295.2 react/component.js">5.2 react/component.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t295.2%20react/component.js"> #
                </a></h3>
            <p>src/react/component.js</p>
            <pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
      <span class="hljs-keyword">this</span>.props = props;
    }
    setState(newState){
      <span class="hljs-comment">//主要调用了对应的recieveUpdate来实现更新,所有的挂载，更新都应该交给对应的Component来管理</span>
      <span class="hljs-keyword">this</span>.unit.update(<span class="hljs-literal">null</span>,newState);
    }
}
<span class="hljs-keyword">export</span> {Component}
</code></pre>
            <h3 id="t305.3 react/unit.js">5.3 react/unit.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t305.3%20react/unit.js"> # </a>
            </h3>
            <p>src/react/unit.js</p>
            <pre><code class="lang-js">
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactTextUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;<span class="hljs-comment">//保存记录rootId</span>
        <span class="hljs-comment">//返回文本节点对应的HTML字符串</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"&gt;<span class="hljs-subst">${<span class="hljs-keyword">this</span>._currentElement}</span>&lt;/span&gt;`</span>;
    }
    update(nextElement){
        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>._currentElement != nextElement){
            <span class="hljs-keyword">this</span>._currentElement = nextElement;
            $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).html(<span class="hljs-keyword">this</span>._currentElement);
        }
    }
}

<span class="hljs-comment">//自定义组件</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactCompositeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    <span class="hljs-comment">//接收到新的更新,自定义组件传第二个参数，原生和text传第一个参数，因为他们没有状态</span>
    update(nextElement,newState){
      <span class="hljs-comment">//如果接收了新的元素，就使用最新的nextElement</span>
      <span class="hljs-keyword">this</span>._currentElement = nextElement || <span class="hljs-keyword">this</span>._currentElement;
      <span class="hljs-comment">//把新的状态合并到老的实例的状态上,并且给组件重新赋新的状态</span>
      <span class="hljs-keyword">let</span> nextState = <span class="hljs-keyword">this</span>._componentInstance.state = <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>._componentInstance.state, newState);
      <span class="hljs-comment">//新的属性对象</span>
      <span class="hljs-keyword">var</span> nextProps = <span class="hljs-keyword">this</span>._currentElement.props;
      <span class="hljs-keyword">if</span> (
            <span class="hljs-keyword">this</span>._componentInstance.shouldComponentUpdate &amp;&amp;
            <span class="hljs-keyword">this</span>._componentInstance.shouldComponentUpdate(nextProps, nextState) === <span class="hljs-literal">false</span>
        ) {
            <span class="hljs-comment">// 如果实例的 shouldComponentUpdate 返回 false，则不需要继续往下执行更新</span>
            <span class="hljs-keyword">return</span>;
        }
      <span class="hljs-keyword">this</span>._componentInstance.componentWillUpdate&amp;&amp;<span class="hljs-keyword">this</span>._componentInstance.componentWillUpdate(nextProps, nextState);
      <span class="hljs-comment">//获取老的组件实例</span>
      <span class="hljs-keyword">let</span> prevRenderedUnitInstance = <span class="hljs-keyword">this</span>._renderedUnitInstance;
      <span class="hljs-comment">//获取老的虚拟DOM</span>
      <span class="hljs-keyword">let</span> prevRenderedElement = prevRenderedUnitInstance._currentElement;
      <span class="hljs-comment">// 通过新的状态对象重新执行render拿到对应的新element</span>
      <span class="hljs-keyword">var</span> nextRenderedElement = <span class="hljs-keyword">this</span>._componentInstance.render();
      <span class="hljs-comment">//判断是需要更新还是直接就重新渲染</span>
      <span class="hljs-keyword">if</span>(shouldDeepCompare(prevRenderedElement, nextRenderedElement)){
        <span class="hljs-comment">//如果需要更新，就继续调用子节点的update的方法，传入新的element更新子节点。</span>
         prevRenderedUnitInstance.update(nextRenderedElement);
         <span class="hljs-keyword">this</span>._componentInstance.componentDidUpdate &amp;&amp; <span class="hljs-keyword">this</span>._componentInstance.componentDidUpdate();
      }<span class="hljs-keyword">else</span>{
        <span class="hljs-comment">//如果发现完全是不同的两种element，那就干脆重新渲染了</span>
        <span class="hljs-keyword">this</span>._renderedUnitInstance = createReactUnit(nextRenderedElement);
        <span class="hljs-keyword">let</span> nextMarkup = <span class="hljs-keyword">this</span>._renderedUnitInstance.getMarkup(<span class="hljs-keyword">this</span>.rootId);
        <span class="hljs-comment">//替换整个节点</span>
        $(<span class="hljs-string">'[data-reactid="'</span> + <span class="hljs-keyword">this</span>.rootId + <span class="hljs-string">'"]'</span>).replaceWith(nextMarkup);
      }
    }
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;
        <span class="hljs-comment">//type是一个自定义组件的类定义</span>
        <span class="hljs-keyword">let</span> {<span class="hljs-attr">type</span>:Component} = <span class="hljs-keyword">this</span>._currentElement;
        <span class="hljs-comment">//创建Counter组件类的实例</span>
        <span class="hljs-keyword">let</span> componentInstance = <span class="hljs-keyword">this</span>._componentInstance = <span class="hljs-keyword">new</span> Component();
        <span class="hljs-comment">//记录它这个组件实例所在的单位unit</span>
        componentInstance.unit = <span class="hljs-keyword">this</span>;
        <span class="hljs-comment">//如果有componentWillMount钩子函数就让它执行</span>
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        <span class="hljs-comment">//调用render方法获得返回的虚拟DOM元素</span>
        <span class="hljs-keyword">let</span> renderedElement =  componentInstance.render();
        <span class="hljs-comment">//根据虚拟DOM元素实例化,可能是ReactCompositeComponent、ReactNativeComponent或ReactTextComponent</span>
        <span class="hljs-keyword">let</span> renderedUnitInstance = <span class="hljs-keyword">this</span>._renderedUnitInstance = createReactUnit(renderedElement);
        <span class="hljs-comment">//获得renderedComponentInstance的HTML字符中</span>
        <span class="hljs-keyword">let</span> renderedMarkup = renderedUnitInstance.getMarkup(rootId);
        <span class="hljs-comment">//注册挂载完成的监听，越底层的组件越先监听，越先执行</span>
        $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">'mounted'</span>,()=&gt;{
            componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount();
        });
        <span class="hljs-keyword">return</span> renderedMarkup;
    }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shouldDeepCompare</span>(<span class="hljs-params">prevElement, nextElement</span>) </span>{
    <span class="hljs-comment">//不管新元素还是老元素是NULL,都完全重建</span>
    <span class="hljs-keyword">if</span> (prevElement != <span class="hljs-literal">null</span> &amp;&amp; nextElement != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">let</span> prevType = <span class="hljs-keyword">typeof</span> prevElement;
        <span class="hljs-keyword">let</span> nextType = <span class="hljs-keyword">typeof</span> nextElement;
        <span class="hljs-comment">//如果老节点是文本，新节点也是文本则可以进行比较</span>
        <span class="hljs-keyword">if</span> (prevType === <span class="hljs-string">'string'</span> || prevType === <span class="hljs-string">'number'</span>) {
            <span class="hljs-keyword">return</span> nextType === <span class="hljs-string">'string'</span> || nextType === <span class="hljs-string">'number'</span>;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">//如果是原生元素或者自定义元素，则看类型是否相同，相同则进行深度比较</span>
            <span class="hljs-keyword">return</span> nextType === <span class="hljs-string">'object'</span> &amp;&amp; prevElement.type === nextElement.type;
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createReactUnit</span>(<span class="hljs-params">element</span>)</span>{
    <span class="hljs-comment">//如果元素的类型是字符串或者数字的话返回一个text元素实例</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'string'</span> || <span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'number'</span>){
        <span class="hljs-comment">//返回一个文本元素实例</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactTextUnit(element);
    }
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> element.type == <span class="hljs-string">'string'</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactNativeUnit(element);
    }
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> element.type == <span class="hljs-string">'function'</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactCompositeUnit(element);
    }
}
<span class="hljs-keyword">export</span> {
    createReactUnit
}
</code></pre>
            <h3 id="t315.4 react/element.js">5.4 react/element.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t315.4%20react/element.js"> #
                </a></h3>
            <p>src/react/element.js</p>
            <pre><code class="lang-diff">class Element{
    constructor(type,props){
        this.type = type;
<span class="hljs-addition">+        this.key = props.key;</span>
        this.props = props;
    }
}
</code></pre>
            <h2 id="t326. 对比属性">6. 对比属性 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t326.%20%E5%AF%B9%E6%AF%94%E5%B1%9E%E6%80%A7">
                    # </a></h2>
            <p><a
                    href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/e01903bcdd33b5d08398aaa6463c01cb4d3d2780">commit</a>
            </p>
            <h3 id="t336.1  src/index.js">6.1 src/index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t336.1%20%20src/index.js"> #
                </a></h3>
            <p>src/index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">1</span>};
  }
  componentWillMount(){
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Counter componentWillMount`</span>);
  }
  componentDidMount(){
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Counter componentDidMount`</span>);
  }
  handleClick= <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
  }
  render(){
    <span class="hljs-keyword">let</span> p = React.createElement(<span class="hljs-string">'p'</span>,{},<span class="hljs-keyword">this</span>.state.number);
    <span class="hljs-keyword">let</span> button = React.createElement(<span class="hljs-string">'button'</span>,{<span class="hljs-attr">onClick</span>:<span class="hljs-keyword">this</span>.handleClick},<span class="hljs-string">'+'</span>);
    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'div'</span>,{<span class="hljs-attr">id</span>:<span class="hljs-string">'counter'</span>},p,button);
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
            <h3 id="t346.2 react/unit.js">6.2 react/unit.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t346.2%20react/unit.js"> # </a>
            </h3>
            <p>src/react/unit.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;
<span class="hljs-keyword">import</span> types <span class="hljs-keyword">from</span> <span class="hljs-string">'./types'</span>;
<span class="hljs-keyword">let</span> updateDepth=<span class="hljs-number">0</span>;
<span class="hljs-keyword">let</span> diffQueue=[];
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unit</span></span>{
    <span class="hljs-keyword">constructor</span>(element){
        <span class="hljs-comment">//把虚拟DOM本身保存到this._currentElement上</span>
        <span class="hljs-keyword">this</span>._currentElement = element;
    }
    getMarkup(rootId){<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'此方法不能被直接调用'</span>)}
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactTextUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;<span class="hljs-comment">//保存记录rootId</span>
        <span class="hljs-comment">//返回文本节点对应的HTML字符串</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"&gt;<span class="hljs-subst">${<span class="hljs-keyword">this</span>._currentElement}</span>&lt;/span&gt;`</span>;
    }
    update(nextElement){
        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>._currentElement !== nextElement){
            <span class="hljs-keyword">this</span>._currentElement = nextElement;
            $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).html(<span class="hljs-keyword">this</span>._currentElement);
        }
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactNativeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;
        <span class="hljs-keyword">let</span> {type,props} = <span class="hljs-keyword">this</span>._currentElement;
        <span class="hljs-keyword">let</span> tagOpen = <span class="hljs-string">`&lt;<span class="hljs-subst">${type}</span> data-reactid="<span class="hljs-subst">${rootId}</span>"`</span>;
        <span class="hljs-keyword">let</span> tagClose = <span class="hljs-string">`&lt;/<span class="hljs-subst">${type}</span>&gt;`</span>;
        <span class="hljs-keyword">let</span> content = <span class="hljs-string">''</span>;
        <span class="hljs-keyword">let</span> renderedChildren =[];
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> propKey <span class="hljs-keyword">in</span> props){
            <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propKey)){
                <span class="hljs-keyword">let</span> eventType = propKey.slice(<span class="hljs-number">2</span>).toLowerCase();
                $(<span class="hljs-built_in">document</span>).delegate(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>,<span class="hljs-string">`<span class="hljs-subst">${eventType}</span>.<span class="hljs-subst">${rootId}</span>`</span>,props[propKey]);
            }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(propKey === <span class="hljs-string">'children'</span>){
                <span class="hljs-keyword">let</span> children = props.children||[];
                children.forEach(<span class="hljs-function">(<span class="hljs-params">child,idx</span>)=&gt;</span>{
                    <span class="hljs-keyword">let</span> childUnitInstance = createReactUnit(child);
                    renderedChildren.push(childUnitInstance);
                    <span class="hljs-keyword">let</span> childMarkup = childUnitInstance.getMarkup(<span class="hljs-string">`<span class="hljs-subst">${rootId}</span>.<span class="hljs-subst">${idx}</span>`</span>);
                    content += childMarkup;
                });
            }<span class="hljs-keyword">else</span>{
                tagOpen += <span class="hljs-string">`<span class="hljs-subst">${propKey}</span>=<span class="hljs-subst">${props[propKey]}</span>`</span>;
            }
        }
        <span class="hljs-keyword">this</span>.renderedChildren = renderedChildren;
        <span class="hljs-keyword">return</span> tagOpen + <span class="hljs-string">'&gt;'</span> + content + tagClose;
    }
    update(newElement){
        <span class="hljs-keyword">let</span> oldProps = <span class="hljs-keyword">this</span>._currentElement.props;
        <span class="hljs-keyword">let</span> newProps = newElement.props;
        <span class="hljs-keyword">this</span>.updateDOMProperties(oldProps,newProps);
        <span class="hljs-comment">//比较和更新子节点</span>
        <span class="hljs-keyword">this</span>.updateDOMChildren(newElement.props.children);
    }
    <span class="hljs-comment">//更新子项</span>
    updateDOMChildren(newChildrenElements){
        <span class="hljs-keyword">this</span>.diff(diffQueue,newChildrenElements);
    }
    diff(diffQueue,newChildrenElements){
        <span class="hljs-keyword">let</span> oldChildrenMap = <span class="hljs-keyword">this</span>.getChildrenMap(<span class="hljs-keyword">this</span>.renderedChildren);
        <span class="hljs-keyword">let</span> newChildren = <span class="hljs-keyword">this</span>.getNewChildren(oldChildrenMap,newChildrenElements);
    }
    getNewChildren(oldChildrenMap,newChildrenElements){
       <span class="hljs-keyword">let</span> newChildren = [];
       newChildrenElements.forEach(<span class="hljs-function">(<span class="hljs-params">newElement,idx</span>)=&gt;</span>{
         <span class="hljs-keyword">let</span> newKey = newElement.key || idx.toString();
         <span class="hljs-comment">//获取老的Unit</span>
         <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[newKey];
         <span class="hljs-comment">//获取老的Unit对应的Element元素</span>
         <span class="hljs-keyword">let</span> oldElement = oldChild&amp;&amp;oldChild._currentElement;
         <span class="hljs-keyword">if</span>(shouldDeepCompare(oldElement,newElement)){
            oldChild.update(newElement);
            newChildren.push(oldChild);
         }<span class="hljs-keyword">else</span>{
             <span class="hljs-keyword">let</span> newChildInstance = createReactUnit(newElement);
             newChildren.push(newChildInstance);
         }
       });
       <span class="hljs-keyword">return</span> newChildren;
    }
    getChildrenMap(children=[]){
        <span class="hljs-keyword">let</span> childrenMap = {};
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;children.length;i++){
            <span class="hljs-keyword">let</span> key = children[i].key||i.toString();
            childrenMap[key] = children[i];
        }
        <span class="hljs-keyword">return</span> childrenMap;
    }
    updateDOMProperties(oldProps,newProps){
        <span class="hljs-keyword">let</span> propName;
        <span class="hljs-comment">//把新的属性对象上没有的属性给删除掉</span>
        <span class="hljs-keyword">for</span>(propName <span class="hljs-keyword">in</span> oldProps){
            <span class="hljs-keyword">if</span>(!newProps.hasOwnProperty(propName)){
                $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).removeAttr(propName);
            }
            <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propName)) {
                <span class="hljs-comment">//针对当前的节点取消事件代理</span>
                $(<span class="hljs-built_in">document</span>).undelegate(<span class="hljs-string">'.'</span>+<span class="hljs-keyword">this</span>._rootId);
            }
        }
        <span class="hljs-keyword">for</span>(propName <span class="hljs-keyword">in</span> newProps){
            <span class="hljs-keyword">if</span>(propName === <span class="hljs-string">'children'</span>)
                <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propName)){
                <span class="hljs-keyword">let</span> eventType = propName.slice(<span class="hljs-number">2</span>).toLowerCase();
                $(<span class="hljs-built_in">document</span>).delegate(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>,<span class="hljs-string">`<span class="hljs-subst">${eventType}</span>.<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>`</span>,newProps[propName]);
                <span class="hljs-keyword">continue</span>;
            }
            $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).prop(propName, newProps[propName])    
        }
    }
}

<span class="hljs-comment">//自定义组件</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactCompositeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    <span class="hljs-comment">//接收到新的更新,自定义组件传第二个参数，原生和text传第一个参数，因为他们没有状态</span>
    update(nextElement,newState){
      <span class="hljs-comment">//如果接收了新的元素，就使用最新的nextElement</span>
      <span class="hljs-keyword">this</span>._currentElement = nextElement || <span class="hljs-keyword">this</span>._currentElement;
      <span class="hljs-comment">//把新的状态合并到老的实例的状态上,并且给组件重新赋新的状态</span>
      <span class="hljs-keyword">let</span> nextState = <span class="hljs-keyword">this</span>._componentInstance.state = <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>._componentInstance.state, newState);
      <span class="hljs-comment">//新的属性对象</span>
      <span class="hljs-keyword">var</span> nextProps = <span class="hljs-keyword">this</span>._currentElement.props;
      <span class="hljs-keyword">if</span> (
            <span class="hljs-keyword">this</span>._componentInstance.shouldComponentUpdate &amp;&amp;
            <span class="hljs-keyword">this</span>._componentInstance.shouldComponentUpdate(nextProps, nextState) === <span class="hljs-literal">false</span>
        ) {
            <span class="hljs-comment">// 如果实例的 shouldComponentUpdate 返回 false，则不需要继续往下执行更新</span>
            <span class="hljs-keyword">return</span>;
        }
      <span class="hljs-keyword">this</span>._componentInstance.componentWillUpdate&amp;&amp;<span class="hljs-keyword">this</span>._componentInstance.componentWillUpdate(nextProps, nextState);
      <span class="hljs-comment">//获取老的组件实例</span>
      <span class="hljs-keyword">let</span> prevRenderedUnitInstance = <span class="hljs-keyword">this</span>._renderedUnitInstance;
      <span class="hljs-comment">//获取老的虚拟DOM</span>
      <span class="hljs-keyword">let</span> prevRenderedElement = prevRenderedUnitInstance._currentElement;
      <span class="hljs-comment">// 通过新的状态对象重新执行render拿到对应的新element</span>
      <span class="hljs-keyword">var</span> nextRenderedElement = <span class="hljs-keyword">this</span>._componentInstance.render();
      <span class="hljs-comment">//判断是需要更新还是直接就重新渲染</span>
      <span class="hljs-keyword">if</span>(shouldDeepCompare(prevRenderedElement, nextRenderedElement)){
        <span class="hljs-comment">//如果需要更新，就继续调用子节点的update的方法，传入新的element更新子节点。</span>
         prevRenderedUnitInstance.update(nextRenderedElement);
         <span class="hljs-keyword">this</span>._componentInstance.componentDidUpdate &amp;&amp; <span class="hljs-keyword">this</span>._componentInstance.componentDidUpdate();
      }<span class="hljs-keyword">else</span>{
        <span class="hljs-comment">//如果发现完全是不同的两种element，那就干脆重新渲染了</span>
        <span class="hljs-keyword">this</span>._renderedUnitInstance = createReactUnit(nextRenderedElement);
        <span class="hljs-keyword">let</span> nextMarkup = <span class="hljs-keyword">this</span>._renderedUnitInstance.getMarkup(<span class="hljs-keyword">this</span>.rootId);
        <span class="hljs-comment">//替换整个节点</span>
        $(<span class="hljs-string">'[data-reactid="'</span> + <span class="hljs-keyword">this</span>._rootId + <span class="hljs-string">'"]'</span>).replaceWith(nextMarkup);
      }
    }
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;
        <span class="hljs-comment">//type是一个自定义组件的类定义</span>
        <span class="hljs-keyword">let</span> {<span class="hljs-attr">type</span>:Component} = <span class="hljs-keyword">this</span>._currentElement;
        <span class="hljs-comment">//创建Counter组件类的实例</span>
        <span class="hljs-keyword">let</span> componentInstance = <span class="hljs-keyword">this</span>._componentInstance = <span class="hljs-keyword">new</span> Component();
        <span class="hljs-comment">//记录它这个组件实例所在的单位unit</span>
        componentInstance.unit = <span class="hljs-keyword">this</span>;
        <span class="hljs-comment">//如果有componentWillMount钩子函数就让它执行</span>
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        <span class="hljs-comment">//调用render方法获得返回的虚拟DOM元素</span>
        <span class="hljs-keyword">let</span> renderedElement =  componentInstance.render();
        <span class="hljs-comment">//根据虚拟DOM元素实例化,可能是ReactCompositeComponent、ReactNativeComponent或ReactTextComponent</span>
        <span class="hljs-keyword">let</span> renderedUnitInstance = <span class="hljs-keyword">this</span>._renderedUnitInstance = createReactUnit(renderedElement);
        <span class="hljs-comment">//获得renderedComponentInstance的HTML字符中</span>
        <span class="hljs-keyword">let</span> renderedMarkup = renderedUnitInstance.getMarkup(rootId);
        <span class="hljs-comment">//注册挂载完成的监听，越底层的组件越先监听，越先执行</span>
        $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">'mounted'</span>,()=&gt;{
            componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount();
        });
        <span class="hljs-keyword">return</span> renderedMarkup;
    }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shouldDeepCompare</span>(<span class="hljs-params">prevElement, nextElement</span>) </span>{
    <span class="hljs-comment">//不管新元素还是老元素是NULL,都完全重建</span>
    <span class="hljs-keyword">if</span> (prevElement != <span class="hljs-literal">null</span> &amp;&amp; nextElement != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">let</span> prevType = <span class="hljs-keyword">typeof</span> prevElement;
        <span class="hljs-keyword">let</span> nextType = <span class="hljs-keyword">typeof</span> nextElement;
        <span class="hljs-comment">//如果老节点是文本，新节点也是文本则可以进行比较</span>
        <span class="hljs-keyword">if</span> (prevType === <span class="hljs-string">'string'</span> || prevType === <span class="hljs-string">'number'</span>) {
            <span class="hljs-keyword">return</span> nextType === <span class="hljs-string">'string'</span> || nextType === <span class="hljs-string">'number'</span>;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">//如果是原生元素或者自定义元素，则看类型是否相同，相同则进行深度比较</span>
            <span class="hljs-keyword">return</span> nextType === <span class="hljs-string">'object'</span> &amp;&amp; prevElement.type === nextElement.type;
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createReactUnit</span>(<span class="hljs-params">element</span>)</span>{
    <span class="hljs-comment">//如果元素的类型是字符串或者数字的话返回一个text元素实例</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'string'</span> || <span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'number'</span>){
        <span class="hljs-comment">//返回一个文本元素实例</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactTextUnit(element);
    }
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> element.type == <span class="hljs-string">'string'</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactNativeUnit(element);
    }
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> element.type == <span class="hljs-string">'function'</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactCompositeUnit(element);
    }
}
<span class="hljs-keyword">export</span> {
    createReactUnit
}
</code></pre>
            <h2 id="t357. 获得补丁数组">7. 获得补丁数组 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t357.%20%E8%8E%B7%E5%BE%97%E8%A1%A5%E4%B8%81%E6%95%B0%E7%BB%84">
                    # </a></h2>
            <p><a
                    href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/5246c661ccc8c5f34496462683ab0b015c7469d5">commit</a>
            </p>
            <p><img src="./60.react-1_files/diffold.png" alt="diffold"></p>
            <p><img src="./60.react-1_files/diffnew.png" alt="diffnew"></p>
            <p><img src="./60.react-1_files/domdiff2.gif" alt="domdiff2"></p>
            <h3 id="t367.1 src/index.js">7.1 src/index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t367.1%20src/index.js"> # </a>
            </h3>
            <p>src/index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">odd</span>:<span class="hljs-literal">true</span>};
  }
  componentDidMount(){
   setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">odd</span>:!<span class="hljs-keyword">this</span>.state.odd});
   },<span class="hljs-number">1000</span>);
  }
  render(){
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.state.odd){
      <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'ul'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'wrapper'</span>},
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'A'</span>},<span class="hljs-string">'A'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'B'</span>},<span class="hljs-string">'B'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'C'</span>},<span class="hljs-string">'C'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'D'</span>},<span class="hljs-string">'D'</span>),
      );
    }
    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'ul'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'wrapper'</span>},
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'A'</span>},<span class="hljs-string">'A1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'C'</span>},<span class="hljs-string">'C1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'B'</span>},<span class="hljs-string">'B1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'E'</span>},<span class="hljs-string">'E1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'F'</span>},<span class="hljs-string">'F1'</span>)
      );
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
            <h3 id="t377.2 src/react/unit.js">7.2 src/react/unit.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t377.2%20src/react/unit.js"> #
                </a></h3>
            <p>src/react/unit.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;
<span class="hljs-keyword">import</span> types <span class="hljs-keyword">from</span> <span class="hljs-string">'./types'</span>;
<span class="hljs-keyword">let</span> updateDepth=<span class="hljs-number">0</span>;
<span class="hljs-keyword">let</span> diffQueue=[];
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unit</span></span>{
    <span class="hljs-keyword">constructor</span>(element){
        <span class="hljs-comment">//把虚拟DOM本身保存到this._currentElement上</span>
        <span class="hljs-keyword">this</span>._currentElement = element;
    }
    getMarkup(rootId){<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'此方法不能被直接调用'</span>)}
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactTextUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;<span class="hljs-comment">//保存记录rootId</span>
        <span class="hljs-comment">//返回文本节点对应的HTML字符串</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"&gt;<span class="hljs-subst">${<span class="hljs-keyword">this</span>._currentElement}</span>&lt;/span&gt;`</span>;
    }
    update(nextElement){
        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>._currentElement !== nextElement){
            <span class="hljs-keyword">this</span>._currentElement = nextElement;
            $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).html(<span class="hljs-keyword">this</span>._currentElement);
        }
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactNativeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;
        <span class="hljs-keyword">let</span> {type,props} = <span class="hljs-keyword">this</span>._currentElement;
        <span class="hljs-keyword">let</span> tagOpen = <span class="hljs-string">`&lt;<span class="hljs-subst">${type}</span> data-reactid="<span class="hljs-subst">${rootId}</span>"`</span>;
        <span class="hljs-keyword">let</span> tagClose = <span class="hljs-string">`&lt;/<span class="hljs-subst">${type}</span>&gt;`</span>;
        <span class="hljs-keyword">let</span> content = <span class="hljs-string">''</span>;
        <span class="hljs-keyword">let</span> renderedChildren =[];
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> propKey <span class="hljs-keyword">in</span> props){
            <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propKey)){
                <span class="hljs-keyword">let</span> eventType = propKey.slice(<span class="hljs-number">2</span>).toLowerCase();
                $(<span class="hljs-built_in">document</span>).delegate(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>,<span class="hljs-string">`<span class="hljs-subst">${eventType}</span>.<span class="hljs-subst">${rootId}</span>`</span>,props[propKey]);
            }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(propKey === <span class="hljs-string">'children'</span>){
                <span class="hljs-keyword">let</span> children = props.children||[];
                children.forEach(<span class="hljs-function">(<span class="hljs-params">child,idx</span>)=&gt;</span>{
                    <span class="hljs-keyword">let</span> childUnitInstance = createReactUnit(child);
                    childUnitInstance._mountIndex = idx;
                    renderedChildren.push(childUnitInstance);
                    <span class="hljs-keyword">let</span> childMarkup = childUnitInstance.getMarkup(<span class="hljs-string">`<span class="hljs-subst">${rootId}</span>.<span class="hljs-subst">${idx}</span>`</span>);
                    content += childMarkup;
                });
            }<span class="hljs-keyword">else</span>{
                tagOpen += <span class="hljs-string">`<span class="hljs-subst">${propKey}</span>=<span class="hljs-subst">${props[propKey]}</span>`</span>;
            }
        }
        <span class="hljs-keyword">this</span>.renderedChildren = renderedChildren;
        <span class="hljs-keyword">return</span> tagOpen + <span class="hljs-string">'&gt;'</span> + content + tagClose;
    }
    update(newElement){
        <span class="hljs-keyword">let</span> oldProps = <span class="hljs-keyword">this</span>._currentElement.props;
        <span class="hljs-keyword">let</span> newProps = newElement.props;
        <span class="hljs-keyword">this</span>.updateDOMProperties(oldProps,newProps);
        <span class="hljs-comment">//比较和更新子节点</span>
        <span class="hljs-keyword">this</span>.updateDOMChildren(newElement.props.children);
    }
    <span class="hljs-comment">//更新子项</span>
    updateDOMChildren(newChildrenElements){
        updateDepth++;
        <span class="hljs-keyword">this</span>.diff(diffQueue,newChildrenElements);
        updateDepth--;
        <span class="hljs-keyword">if</span>(updateDepth === <span class="hljs-number">0</span>){
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'diffQueue'</span>,diffQueue);
            diffQueue = [];
        }
    }
    diff(diffQueue,newChildrenElements){
        <span class="hljs-keyword">let</span> oldChildrenMap = <span class="hljs-keyword">this</span>.getChildrenMap(<span class="hljs-keyword">this</span>.renderedChildren);
        <span class="hljs-keyword">let</span> {newMap,newChildren} = <span class="hljs-keyword">this</span>.getNewChildren(oldChildrenMap,newChildrenElements);
        <span class="hljs-keyword">let</span> lastIndex=<span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;newChildren.length;i++){
            <span class="hljs-keyword">let</span> newKey = (newChildren[i]._currentElement.props&amp;&amp;newChildren[i]._currentElement.props.key)||i.toString();
            <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[newKey];
            <span class="hljs-keyword">if</span>(oldChild === newChildren[i]){
                <span class="hljs-keyword">if</span>(oldChild._mountIndex &lt; lastIndex){
                    diffQueue.push({
                        <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                        <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                        <span class="hljs-attr">type</span>:types.MOVE,
                        <span class="hljs-attr">fromIndex</span>:oldChild._mountIndex,
                        <span class="hljs-attr">toIndex</span>:i
                    });
                }
                lastIndex = <span class="hljs-built_in">Math</span>.max(oldChild._mountIndex,lastIndex);
            }<span class="hljs-keyword">else</span>{
                <span class="hljs-keyword">if</span>(oldChild){
                    diffQueue.push({
                        <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                        <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                        <span class="hljs-attr">type</span>:types.REMOVE,
                        <span class="hljs-attr">fromIndex</span>:oldChild._mountIndex
                    });
                    <span class="hljs-keyword">if</span> (oldChild._rootId) {
                        $(<span class="hljs-built_in">document</span>).undelegate(<span class="hljs-string">'.'</span>+oldChild._rootId);
                    }
                }
                diffQueue.push({
                    <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                    <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                    <span class="hljs-attr">type</span>:types.INSERT,
                    <span class="hljs-attr">toIndex</span>:i,
                    <span class="hljs-attr">markup</span>:newChildren[i].getMarkup(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>.<span class="hljs-subst">${i}</span>`</span>)
                });
            }
            newChildren[i]._mountIndex = i;
        }
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> oldKey <span class="hljs-keyword">in</span> oldChildrenMap){
            <span class="hljs-keyword">if</span>(!newMap.hasOwnProperty(oldKey)){
                <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[oldKey];
                diffQueue.push({
                    <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                    <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                    <span class="hljs-attr">type</span>:types.REMOVE,
                    <span class="hljs-attr">fromINdex</span>:oldChild._mountIndex
                });
                $(<span class="hljs-built_in">document</span>).undelegate(<span class="hljs-string">'.'</span>+oldChild._rootId);
            }
        }
    }
    getNewChildren(oldChildrenMap,newChildrenElements){
       <span class="hljs-keyword">let</span> newChildren = [];
       <span class="hljs-keyword">let</span> newMap = {};
       newChildrenElements.forEach(<span class="hljs-function">(<span class="hljs-params">newElement,idx</span>)=&gt;</span>{
         <span class="hljs-keyword">let</span> newKey = (newElement.props&amp;&amp;newElement.props.key) || idx.toString();
         <span class="hljs-comment">//获取老的Unit</span>
         <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[newKey];
         <span class="hljs-comment">//获取老的Unit对应的Element元素</span>
         <span class="hljs-keyword">let</span> oldElement = oldChild&amp;&amp;oldChild._currentElement;
         <span class="hljs-keyword">if</span>(shouldDeepCompare(oldElement,newElement)){
            oldChild.update(newElement);
            newChildren.push(oldChild);
            newMap[newKey] = oldChild;
         }<span class="hljs-keyword">else</span>{
             <span class="hljs-keyword">let</span> newChildInstance = createReactUnit(newElement);
             newMap[newKey] = newChildInstance;
             newChildren.push(newChildInstance);
         }
       });
       <span class="hljs-keyword">return</span> {newMap,newChildren};
    }
    getChildrenMap(children=[]){
        <span class="hljs-keyword">let</span> childrenMap = {};
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;children.length;i++){
            <span class="hljs-keyword">let</span> key = (children[i]._currentElement.props&amp;&amp;children[i]._currentElement.props.key)||i.toString();
            childrenMap[key] = children[i];
        }
        <span class="hljs-keyword">return</span> childrenMap;
    }
    updateDOMProperties(oldProps,newProps){
        <span class="hljs-keyword">let</span> propName;
        <span class="hljs-comment">//把新的属性对象上没有的属性给删除掉</span>
        <span class="hljs-keyword">for</span>(propName <span class="hljs-keyword">in</span> oldProps){
            <span class="hljs-keyword">if</span>(!newProps.hasOwnProperty(propName)){
                $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).removeAttr(propName);
            }
            <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propName)) {
                <span class="hljs-comment">//针对当前的节点取消事件代理</span>
                $(<span class="hljs-built_in">document</span>).undelegate(<span class="hljs-string">'.'</span>+<span class="hljs-keyword">this</span>._rootId);
            }
        }
        <span class="hljs-keyword">for</span>(propName <span class="hljs-keyword">in</span> newProps){
            <span class="hljs-keyword">if</span>(propName === <span class="hljs-string">'children'</span>)
                <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propName)){
                <span class="hljs-keyword">let</span> eventType = propName.slice(<span class="hljs-number">2</span>).toLowerCase();
                $(<span class="hljs-built_in">document</span>).delegate(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>,<span class="hljs-string">`<span class="hljs-subst">${eventType}</span>.<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>`</span>,newProps[propName]);
                <span class="hljs-keyword">continue</span>;
            }
            $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).prop(propName, newProps[propName])    
        }
    }
}

<span class="hljs-comment">//自定义组件</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactCompositeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    <span class="hljs-comment">//接收到新的更新,自定义组件传第二个参数，原生和text传第一个参数，因为他们没有状态</span>
    update(nextElement,newState){
      <span class="hljs-comment">//如果接收了新的元素，就使用最新的nextElement</span>
      <span class="hljs-keyword">this</span>._currentElement = nextElement || <span class="hljs-keyword">this</span>._currentElement;
      <span class="hljs-comment">//把新的状态合并到老的实例的状态上,并且给组件重新赋新的状态</span>
      <span class="hljs-keyword">let</span> nextState = <span class="hljs-keyword">this</span>._componentInstance.state = <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>._componentInstance.state, newState);
      <span class="hljs-comment">//新的属性对象</span>
      <span class="hljs-keyword">var</span> nextProps = <span class="hljs-keyword">this</span>._currentElement.props;
      <span class="hljs-keyword">if</span> (
            <span class="hljs-keyword">this</span>._componentInstance.shouldComponentUpdate &amp;&amp;
            <span class="hljs-keyword">this</span>._componentInstance.shouldComponentUpdate(nextProps, nextState) === <span class="hljs-literal">false</span>
        ) {
            <span class="hljs-comment">// 如果实例的 shouldComponentUpdate 返回 false，则不需要继续往下执行更新</span>
            <span class="hljs-keyword">return</span>;
        }
      <span class="hljs-keyword">this</span>._componentInstance.componentWillUpdate&amp;&amp;<span class="hljs-keyword">this</span>._componentInstance.componentWillUpdate(nextProps, nextState);
      <span class="hljs-comment">//获取老的组件实例</span>
      <span class="hljs-keyword">let</span> prevRenderedUnitInstance = <span class="hljs-keyword">this</span>._renderedUnitInstance;
      <span class="hljs-comment">//获取老的虚拟DOM</span>
      <span class="hljs-keyword">let</span> prevRenderedElement = prevRenderedUnitInstance._currentElement;
      <span class="hljs-comment">// 通过新的状态对象重新执行render拿到对应的新element</span>
      <span class="hljs-keyword">var</span> nextRenderedElement = <span class="hljs-keyword">this</span>._componentInstance.render();
      <span class="hljs-comment">//判断是需要更新还是直接就重新渲染</span>
      <span class="hljs-keyword">if</span>(shouldDeepCompare(prevRenderedElement, nextRenderedElement)){
        <span class="hljs-comment">//如果需要更新，就继续调用子节点的update的方法，传入新的element更新子节点。</span>
         prevRenderedUnitInstance.update(nextRenderedElement);
         <span class="hljs-keyword">this</span>._componentInstance.componentDidUpdate &amp;&amp; <span class="hljs-keyword">this</span>._componentInstance.componentDidUpdate();
      }<span class="hljs-keyword">else</span>{
        <span class="hljs-comment">//如果发现完全是不同的两种element，那就干脆重新渲染了</span>
        <span class="hljs-keyword">this</span>._renderedUnitInstance = createReactUnit(nextRenderedElement);
        <span class="hljs-keyword">let</span> nextMarkup = <span class="hljs-keyword">this</span>._renderedUnitInstance.getMarkup(<span class="hljs-keyword">this</span>.rootId);
        <span class="hljs-comment">//替换整个节点</span>
        $(<span class="hljs-string">'[data-reactid="'</span> + <span class="hljs-keyword">this</span>._rootId + <span class="hljs-string">'"]'</span>).replaceWith(nextMarkup);
      }
    }
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;
        <span class="hljs-comment">//type是一个自定义组件的类定义</span>
        <span class="hljs-keyword">let</span> {<span class="hljs-attr">type</span>:Component} = <span class="hljs-keyword">this</span>._currentElement;
        <span class="hljs-comment">//创建Counter组件类的实例</span>
        <span class="hljs-keyword">let</span> componentInstance = <span class="hljs-keyword">this</span>._componentInstance = <span class="hljs-keyword">new</span> Component();
        <span class="hljs-comment">//记录它这个组件实例所在的单位unit</span>
        componentInstance.unit = <span class="hljs-keyword">this</span>;
        <span class="hljs-comment">//如果有componentWillMount钩子函数就让它执行</span>
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        <span class="hljs-comment">//调用render方法获得返回的虚拟DOM元素</span>
        <span class="hljs-keyword">let</span> renderedElement =  componentInstance.render();
        <span class="hljs-comment">//根据虚拟DOM元素实例化,可能是ReactCompositeComponent、ReactNativeComponent或ReactTextComponent</span>
        <span class="hljs-keyword">let</span> renderedUnitInstance = <span class="hljs-keyword">this</span>._renderedUnitInstance = createReactUnit(renderedElement);
        <span class="hljs-comment">//获得renderedComponentInstance的HTML字符中</span>
        <span class="hljs-keyword">let</span> renderedMarkup = renderedUnitInstance.getMarkup(rootId);
        <span class="hljs-comment">//注册挂载完成的监听，越底层的组件越先监听，越先执行</span>
        $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">'mounted'</span>,()=&gt;{
            componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount();
        });
        <span class="hljs-keyword">return</span> renderedMarkup;
    }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shouldDeepCompare</span>(<span class="hljs-params">prevElement, nextElement</span>) </span>{
    <span class="hljs-comment">//不管新元素还是老元素是NULL,都完全重建</span>
    <span class="hljs-keyword">if</span> (prevElement != <span class="hljs-literal">null</span> &amp;&amp; nextElement != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">let</span> prevType = <span class="hljs-keyword">typeof</span> prevElement;
        <span class="hljs-keyword">let</span> nextType = <span class="hljs-keyword">typeof</span> nextElement;
        <span class="hljs-comment">//如果老节点是文本，新节点也是文本则可以进行比较</span>
        <span class="hljs-keyword">if</span> (prevType === <span class="hljs-string">'string'</span> || prevType === <span class="hljs-string">'number'</span>) {
            <span class="hljs-keyword">return</span> nextType === <span class="hljs-string">'string'</span> || nextType === <span class="hljs-string">'number'</span>;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">//如果是原生元素或者自定义元素，则看类型是否相同，相同则进行深度比较</span>
            <span class="hljs-keyword">return</span> nextType === <span class="hljs-string">'object'</span> &amp;&amp; prevElement.type === nextElement.type;
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createReactUnit</span>(<span class="hljs-params">element</span>)</span>{
    <span class="hljs-comment">//如果元素的类型是字符串或者数字的话返回一个text元素实例</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'string'</span> || <span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'number'</span>){
        <span class="hljs-comment">//返回一个文本元素实例</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactTextUnit(element);
    }
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> element.type == <span class="hljs-string">'string'</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactNativeUnit(element);
    }
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> element.type == <span class="hljs-string">'function'</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactCompositeUnit(element);
    }
}
<span class="hljs-keyword">export</span> {
    createReactUnit
}
</code></pre>
            <h2 id="t388. 打补丁">8. 打补丁 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t388.%20%E6%89%93%E8%A1%A5%E4%B8%81">
                    # </a></h2>
            <p><a
                    href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/9972e6729f656aa71b27d235610a59a20287518c">commit</a>
            </p>
            <h3 id="t398.1 src/index.js">8.1 src/index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t398.1%20src/index.js"> # </a>
            </h3>
            <p>src/index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">odd</span>:<span class="hljs-literal">true</span>};
  }
  componentDidMount(){
   setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">odd</span>:!<span class="hljs-keyword">this</span>.state.odd});
   },<span class="hljs-number">5000</span>);
  }
  render(){
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.state.odd){
      <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'ul'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'wrapper'</span>},
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'A'</span>},<span class="hljs-string">'A'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'B'</span>},<span class="hljs-string">'B'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'C'</span>},<span class="hljs-string">'C'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'D'</span>},<span class="hljs-string">'D'</span>),
      );
    }
    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'ul'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'wrapper'</span>},
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'A'</span>},<span class="hljs-string">'A'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'C'</span>},<span class="hljs-string">'C1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'B'</span>},<span class="hljs-string">'B1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'E'</span>},<span class="hljs-string">'E1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'F'</span>},<span class="hljs-string">'F1'</span>)
      );
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
            <h3 id="t408.2 react/unit.js">8.2 react/unit.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t408.2%20react/unit.js"> # </a>
            </h3>
            <p>src/react/unit.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;
<span class="hljs-keyword">import</span> types <span class="hljs-keyword">from</span> <span class="hljs-string">'./types'</span>;
<span class="hljs-keyword">let</span> updateDepth=<span class="hljs-number">0</span>;
<span class="hljs-keyword">let</span> diffQueue=[];
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unit</span></span>{
    <span class="hljs-keyword">constructor</span>(element){
        <span class="hljs-comment">//把虚拟DOM本身保存到this._currentElement上</span>
        <span class="hljs-keyword">this</span>._currentElement = element;
    }
    getMarkup(rootId){<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'此方法不能被直接调用'</span>)}
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactTextUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;<span class="hljs-comment">//保存记录rootId</span>
        <span class="hljs-comment">//返回文本节点对应的HTML字符串</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"&gt;<span class="hljs-subst">${<span class="hljs-keyword">this</span>._currentElement}</span>&lt;/span&gt;`</span>;
    }
    update(nextElement){
        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>._currentElement !== nextElement){
            <span class="hljs-keyword">this</span>._currentElement = nextElement;
            $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).html(<span class="hljs-keyword">this</span>._currentElement);
        }
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactNativeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;
        <span class="hljs-keyword">let</span> {type,props} = <span class="hljs-keyword">this</span>._currentElement;
        <span class="hljs-keyword">let</span> tagOpen = <span class="hljs-string">`&lt;<span class="hljs-subst">${type}</span> data-reactid="<span class="hljs-subst">${rootId}</span>"`</span>;
        <span class="hljs-keyword">let</span> tagClose = <span class="hljs-string">`&lt;/<span class="hljs-subst">${type}</span>&gt;`</span>;
        <span class="hljs-keyword">let</span> content = <span class="hljs-string">''</span>;
        <span class="hljs-keyword">let</span> renderedChildren =[];
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> propKey <span class="hljs-keyword">in</span> props){
            <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propKey)){
                <span class="hljs-keyword">let</span> eventType = propKey.slice(<span class="hljs-number">2</span>).toLowerCase();
                $(<span class="hljs-built_in">document</span>).delegate(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>,<span class="hljs-string">`<span class="hljs-subst">${eventType}</span>.<span class="hljs-subst">${rootId}</span>`</span>,props[propKey]);
            }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(propKey === <span class="hljs-string">'children'</span>){
                <span class="hljs-keyword">let</span> children = props.children||[];
                children.forEach(<span class="hljs-function">(<span class="hljs-params">child,idx</span>)=&gt;</span>{
                    <span class="hljs-keyword">let</span> childUnitInstance = createReactUnit(child);
                    childUnitInstance._mountIndex = idx;
                    renderedChildren.push(childUnitInstance);
                    <span class="hljs-keyword">let</span> childMarkup = childUnitInstance.getMarkup(<span class="hljs-string">`<span class="hljs-subst">${rootId}</span>.<span class="hljs-subst">${idx}</span>`</span>);
                    content += childMarkup;
                });
            }<span class="hljs-keyword">else</span>{
                tagOpen += <span class="hljs-string">`<span class="hljs-subst">${propKey}</span>=<span class="hljs-subst">${props[propKey]}</span>`</span>;
            }
        }
        <span class="hljs-keyword">this</span>.renderedChildren = renderedChildren;
        <span class="hljs-keyword">return</span> tagOpen + <span class="hljs-string">'&gt;'</span> + content + tagClose;
    }
    update(newElement){
        <span class="hljs-keyword">let</span> oldProps = <span class="hljs-keyword">this</span>._currentElement.props;
        <span class="hljs-keyword">let</span> newProps = newElement.props;
        <span class="hljs-keyword">this</span>.updateDOMProperties(oldProps,newProps);
        <span class="hljs-comment">//比较和更新子节点</span>
        <span class="hljs-keyword">this</span>.updateDOMChildren(newElement.props.children);
    }
    <span class="hljs-comment">//更新子项</span>
    updateDOMChildren(newChildrenElements){
        updateDepth++;
        <span class="hljs-keyword">this</span>.diff(diffQueue,newChildrenElements);
        updateDepth--;
        <span class="hljs-keyword">if</span>(updateDepth === <span class="hljs-number">0</span>){
            <span class="hljs-keyword">this</span>.patch(diffQueue);
            diffQueue = [];
        }
    }
    patch(diffQueue){
        <span class="hljs-keyword">let</span> deleteChildren = [];
        <span class="hljs-keyword">let</span> deleteMap={};
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;diffQueue.length;i++){
            <span class="hljs-keyword">let</span> difference = diffQueue[i];
            <span class="hljs-keyword">if</span>(difference.type===types.MOVE || difference.type===types.REMOVE){
                <span class="hljs-keyword">let</span> fromIndex = difference.fromIndex;
                <span class="hljs-keyword">let</span> oldChild = $(difference.parentNode.children().get(fromIndex));
                deleteMap[fromIndex]=oldChild;
                deleteChildren.push(oldChild);
            }
        }
        $.each(deleteChildren,(idx,child)=&gt;{
            $(child).remove();
        });
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k=<span class="hljs-number">0</span>;k&lt;diffQueue.length;k++){
            <span class="hljs-keyword">let</span> difference = diffQueue[k];

            <span class="hljs-keyword">switch</span>(difference.type){
              <span class="hljs-keyword">case</span> types.INSERT:
                <span class="hljs-keyword">this</span>.insertChildAt(difference.parentNode,$(difference.markup),difference.toIndex);
                <span class="hljs-keyword">break</span>;
              <span class="hljs-keyword">case</span> types.MOVE:
                <span class="hljs-keyword">this</span>.insertChildAt(difference.parentNode,deleteMap[difference.fromIndex],difference.toIndex);
                <span class="hljs-keyword">break</span>;
              <span class="hljs-keyword">default</span>:
               <span class="hljs-keyword">break</span>;   
            }
        }
    }
    insertChildAt(parentNode,childNode,index){
        <span class="hljs-keyword">let</span> oldChild = parentNode.children().get(index);
        oldChild?childNode.insertBefore(oldChild):childNode.appendTo(parentNode);
    }
    diff(diffQueue,newChildrenElements){
        <span class="hljs-keyword">let</span> oldChildrenMap = <span class="hljs-keyword">this</span>.getChildrenMap(<span class="hljs-keyword">this</span>.renderedChildren);
        <span class="hljs-keyword">let</span> {newMap,newChildren} = <span class="hljs-keyword">this</span>.getNewChildren(oldChildrenMap,newChildrenElements);
        <span class="hljs-keyword">let</span> lastIndex=<span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;newChildren.length;i++){
            <span class="hljs-keyword">let</span> newKey = (newChildren[i]._currentElement.props&amp;&amp;newChildren[i]._currentElement.props.key)||i.toString();
            <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[newKey];
            <span class="hljs-keyword">if</span>(oldChild === newChildren[i]){
                <span class="hljs-keyword">if</span>(oldChild._mountIndex &lt; lastIndex){
                    diffQueue.push({
                        <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                        <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                        <span class="hljs-attr">type</span>:types.MOVE,
                        <span class="hljs-attr">fromIndex</span>:oldChild._mountIndex,
                        <span class="hljs-attr">toIndex</span>:i
                    });
                }
                lastIndex = <span class="hljs-built_in">Math</span>.max(oldChild._mountIndex,lastIndex);
            }<span class="hljs-keyword">else</span>{
                <span class="hljs-keyword">if</span>(oldChild){
                    diffQueue.push({
                        <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                        <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                        <span class="hljs-attr">type</span>:types.REMOVE,
                        <span class="hljs-attr">fromIndex</span>:oldChild._mountIndex
                    });
                    <span class="hljs-keyword">if</span> (oldChild._rootId) {
                        $(<span class="hljs-built_in">document</span>).undelegate(<span class="hljs-string">'.'</span>+oldChild._rootId);
                    }
                }
                diffQueue.push({
                    <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                    <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                    <span class="hljs-attr">type</span>:types.INSERT,
                    <span class="hljs-attr">toIndex</span>:i,
                    <span class="hljs-attr">markup</span>:newChildren[i].getMarkup(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>.<span class="hljs-subst">${i}</span>`</span>)
                });
            }
            newChildren[i]._mountIndex = i;
        }
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> oldKey <span class="hljs-keyword">in</span> oldChildrenMap){
            <span class="hljs-keyword">if</span>(!newMap.hasOwnProperty(oldKey)){
                <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[oldKey];
                diffQueue.push({
                    <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                    <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                    <span class="hljs-attr">type</span>:types.REMOVE,
                    <span class="hljs-attr">fromIndex</span>:oldChild._mountIndex
                });
                $(<span class="hljs-built_in">document</span>).undelegate(<span class="hljs-string">'.'</span>+oldChild._rootId);
            }
        }
    }
    getNewChildren(oldChildrenMap,newChildrenElements){
       <span class="hljs-keyword">let</span> newChildren = [];
       <span class="hljs-keyword">let</span> newMap = {};
       newChildrenElements.forEach(<span class="hljs-function">(<span class="hljs-params">newElement,idx</span>)=&gt;</span>{
         <span class="hljs-keyword">let</span> newKey = (newElement.props&amp;&amp;newElement.props.key) || idx.toString();
         <span class="hljs-comment">//获取老的Unit</span>
         <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[newKey];
         <span class="hljs-comment">//获取老的Unit对应的Element元素</span>
         <span class="hljs-keyword">let</span> oldElement = oldChild&amp;&amp;oldChild._currentElement;
         <span class="hljs-keyword">if</span>(shouldDeepCompare(oldElement,newElement)){
            oldChild.update(newElement);
            newChildren.push(oldChild);
            newMap[newKey] = oldChild;
         }<span class="hljs-keyword">else</span>{
             <span class="hljs-keyword">let</span> newChildInstance = createReactUnit(newElement);
             newMap[newKey] = newChildInstance;
             newChildren.push(newChildInstance);
         }
       });
       <span class="hljs-keyword">return</span> {newMap,newChildren};
    }
    getChildrenMap(children=[]){
        <span class="hljs-keyword">let</span> childrenMap = {};
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;children.length;i++){
            <span class="hljs-keyword">let</span> key = (children[i]._currentElement.props&amp;&amp;children[i]._currentElement.props.key)||i.toString();
            childrenMap[key] = children[i];
        }
        <span class="hljs-keyword">return</span> childrenMap;
    }
    updateDOMProperties(oldProps,newProps){
        <span class="hljs-keyword">let</span> propName;
        <span class="hljs-comment">//把新的属性对象上没有的属性给删除掉</span>
        <span class="hljs-keyword">for</span>(propName <span class="hljs-keyword">in</span> oldProps){
            <span class="hljs-keyword">if</span>(!newProps.hasOwnProperty(propName)){
                $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).removeAttr(propName);
            }
            <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propName)) {
                <span class="hljs-comment">//针对当前的节点取消事件代理</span>
                $(<span class="hljs-built_in">document</span>).undelegate(<span class="hljs-string">'.'</span>+<span class="hljs-keyword">this</span>._rootId);
            }
        }
        <span class="hljs-keyword">for</span>(propName <span class="hljs-keyword">in</span> newProps){
            <span class="hljs-keyword">if</span>(propName === <span class="hljs-string">'children'</span>)
                <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^on[A-Za-z]/</span>.test(propName)){
                <span class="hljs-keyword">let</span> eventType = propName.slice(<span class="hljs-number">2</span>).toLowerCase();
                $(<span class="hljs-built_in">document</span>).delegate(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>,<span class="hljs-string">`<span class="hljs-subst">${eventType}</span>.<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>`</span>,newProps[propName]);
                <span class="hljs-keyword">continue</span>;
            }
            $(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>).prop(propName, newProps[propName])    
        }
    }
}

<span class="hljs-comment">//自定义组件</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactCompositeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    <span class="hljs-comment">//接收到新的更新,自定义组件传第二个参数，原生和text传第一个参数，因为他们没有状态</span>
    update(nextElement,newState){
      <span class="hljs-comment">//如果接收了新的元素，就使用最新的nextElement</span>
      <span class="hljs-keyword">this</span>._currentElement = nextElement || <span class="hljs-keyword">this</span>._currentElement;
      <span class="hljs-comment">//把新的状态合并到老的实例的状态上,并且给组件重新赋新的状态</span>
      <span class="hljs-keyword">let</span> nextState = <span class="hljs-keyword">this</span>._componentInstance.state = <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>._componentInstance.state, newState);
      <span class="hljs-comment">//新的属性对象</span>
      <span class="hljs-keyword">var</span> nextProps = <span class="hljs-keyword">this</span>._currentElement.props;
      <span class="hljs-keyword">if</span> (
            <span class="hljs-keyword">this</span>._componentInstance.shouldComponentUpdate &amp;&amp;
            <span class="hljs-keyword">this</span>._componentInstance.shouldComponentUpdate(nextProps, nextState) === <span class="hljs-literal">false</span>
        ) {
            <span class="hljs-comment">// 如果实例的 shouldComponentUpdate 返回 false，则不需要继续往下执行更新</span>
            <span class="hljs-keyword">return</span>;
        }
      <span class="hljs-keyword">this</span>._componentInstance.componentWillUpdate&amp;&amp;<span class="hljs-keyword">this</span>._componentInstance.componentWillUpdate(nextProps, nextState);
      <span class="hljs-comment">//获取老的组件实例</span>
      <span class="hljs-keyword">let</span> prevRenderedUnitInstance = <span class="hljs-keyword">this</span>._renderedUnitInstance;
      <span class="hljs-comment">//获取老的虚拟DOM</span>
      <span class="hljs-keyword">let</span> prevRenderedElement = prevRenderedUnitInstance._currentElement;
      <span class="hljs-comment">// 通过新的状态对象重新执行render拿到对应的新element</span>
      <span class="hljs-keyword">var</span> nextRenderedElement = <span class="hljs-keyword">this</span>._componentInstance.render();
      <span class="hljs-comment">//判断是需要更新还是直接就重新渲染</span>
      <span class="hljs-keyword">if</span>(shouldDeepCompare(prevRenderedElement, nextRenderedElement)){
        <span class="hljs-comment">//如果需要更新，就继续调用子节点的update的方法，传入新的element更新子节点。</span>
         prevRenderedUnitInstance.update(nextRenderedElement);
         <span class="hljs-keyword">this</span>._componentInstance.componentDidUpdate &amp;&amp; <span class="hljs-keyword">this</span>._componentInstance.componentDidUpdate();
      }<span class="hljs-keyword">else</span>{
        <span class="hljs-comment">//如果发现完全是不同的两种element，那就干脆重新渲染了</span>
        <span class="hljs-keyword">this</span>._renderedUnitInstance = createReactUnit(nextRenderedElement);
        <span class="hljs-keyword">let</span> nextMarkup = <span class="hljs-keyword">this</span>._renderedUnitInstance.getMarkup(<span class="hljs-keyword">this</span>.rootId);
        <span class="hljs-comment">//替换整个节点</span>
        $(<span class="hljs-string">'[data-reactid="'</span> + <span class="hljs-keyword">this</span>._rootId + <span class="hljs-string">'"]'</span>).replaceWith(nextMarkup);
      }
    }
    getMarkup(rootId){
        <span class="hljs-keyword">this</span>._rootId = rootId;
        <span class="hljs-comment">//type是一个自定义组件的类定义</span>
        <span class="hljs-keyword">let</span> {<span class="hljs-attr">type</span>:Component} = <span class="hljs-keyword">this</span>._currentElement;
        <span class="hljs-comment">//创建Counter组件类的实例</span>
        <span class="hljs-keyword">let</span> componentInstance = <span class="hljs-keyword">this</span>._componentInstance = <span class="hljs-keyword">new</span> Component();
        <span class="hljs-comment">//记录它这个组件实例所在的单位unit</span>
        componentInstance.unit = <span class="hljs-keyword">this</span>;
        <span class="hljs-comment">//如果有componentWillMount钩子函数就让它执行</span>
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        <span class="hljs-comment">//调用render方法获得返回的虚拟DOM元素</span>
        <span class="hljs-keyword">let</span> renderedElement =  componentInstance.render();
        <span class="hljs-comment">//根据虚拟DOM元素实例化,可能是ReactCompositeComponent、ReactNativeComponent或ReactTextComponent</span>
        <span class="hljs-keyword">let</span> renderedUnitInstance = <span class="hljs-keyword">this</span>._renderedUnitInstance = createReactUnit(renderedElement);
        <span class="hljs-comment">//获得renderedComponentInstance的HTML字符中</span>
        <span class="hljs-keyword">let</span> renderedMarkup = renderedUnitInstance.getMarkup(rootId);
        <span class="hljs-comment">//注册挂载完成的监听，越底层的组件越先监听，越先执行</span>
        $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">'mounted'</span>,()=&gt;{
            componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount();
        });
        <span class="hljs-keyword">return</span> renderedMarkup;
    }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shouldDeepCompare</span>(<span class="hljs-params">prevElement, nextElement</span>) </span>{
    <span class="hljs-comment">//不管新元素还是老元素是NULL,都完全重建</span>
    <span class="hljs-keyword">if</span> (prevElement != <span class="hljs-literal">null</span> &amp;&amp; nextElement != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">let</span> prevType = <span class="hljs-keyword">typeof</span> prevElement;
        <span class="hljs-keyword">let</span> nextType = <span class="hljs-keyword">typeof</span> nextElement;
        <span class="hljs-comment">//如果老节点是文本，新节点也是文本则可以进行比较</span>
        <span class="hljs-keyword">if</span> (prevType === <span class="hljs-string">'string'</span> || prevType === <span class="hljs-string">'number'</span>) {
            <span class="hljs-keyword">return</span> nextType === <span class="hljs-string">'string'</span> || nextType === <span class="hljs-string">'number'</span>;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">//如果是原生元素或者自定义元素，则看类型是否相同，相同则进行深度比较</span>
            <span class="hljs-keyword">return</span> nextType === <span class="hljs-string">'object'</span> &amp;&amp; prevElement.type === nextElement.type;
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createReactUnit</span>(<span class="hljs-params">element</span>)</span>{
    <span class="hljs-comment">//如果元素的类型是字符串或者数字的话返回一个text元素实例</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'string'</span> || <span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'number'</span>){
        <span class="hljs-comment">//返回一个文本元素实例</span>
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactTextUnit(element);
    }
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> element.type == <span class="hljs-string">'string'</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactNativeUnit(element);
    }
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element == <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> element.type == <span class="hljs-string">'function'</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReactCompositeUnit(element);
    }
}
<span class="hljs-keyword">export</span> {
    createReactUnit
}
</code></pre>
            <h2 id="t419. todos">9. todos <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t419.%20todos"> # </a></h2>
            <p><a
                    href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/466915a20e4bb8d0d019b3325ad47867a3891fae">commit</a>
            </p>
            <h3 id="t429.1 src/index.js">9.1 src/index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t429.1%20src/index.js"> # </a>
            </h3>
            <p>src/index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todos</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
        <span class="hljs-keyword">super</span>(props);
        <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">list</span>:[],<span class="hljs-attr">text</span>:<span class="hljs-string">''</span>};
    }
    add(){
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.state.text &amp;&amp; <span class="hljs-keyword">this</span>.state.text.length&gt;<span class="hljs-number">0</span>){
        <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">list</span>:[...this.state.list,<span class="hljs-keyword">this</span>.state.text],<span class="hljs-attr">text</span>:<span class="hljs-string">''</span>});
      }
    }
    onChange(event) {
        <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">text</span>: event.target.value});
        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state)
    }
    onDel(index) {
        <span class="hljs-keyword">this</span>.state.list.splice(index,<span class="hljs-number">1</span>);
        <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">list</span>: <span class="hljs-keyword">this</span>.state.list});
    }
    render(){
        <span class="hljs-keyword">var</span> createItem = <span class="hljs-function">(<span class="hljs-params">itemText,index</span>)=&gt;</span> {
            <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">"div"</span>, {}, itemText,React.createElement(<span class="hljs-string">'button'</span>,{<span class="hljs-attr">onClick</span>: <span class="hljs-keyword">this</span>.onDel.bind(<span class="hljs-keyword">this</span>,index)},<span class="hljs-string">'X'</span>));
        };

        <span class="hljs-keyword">var</span> lists = <span class="hljs-keyword">this</span>.state.list.map(createItem);
        <span class="hljs-keyword">var</span> input = React.createElement(<span class="hljs-string">"input"</span>, {<span class="hljs-attr">onKeyup</span>: <span class="hljs-keyword">this</span>.onChange.bind(<span class="hljs-keyword">this</span>),<span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.state.text});
        <span class="hljs-keyword">var</span> button = React.createElement(<span class="hljs-string">"button"</span>, {<span class="hljs-attr">onClick</span>: <span class="hljs-keyword">this</span>.add.bind(<span class="hljs-keyword">this</span>)}, <span class="hljs-string">'Add'</span>)
        <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'div'</span>,{},input,button,...lists);
    }
}
<span class="hljs-keyword">let</span> todos = React.createElement(Todos);
React.render(todos,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
            <h3 id="t439.2 react/unit.js">9.2 react/unit.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t439.2%20react/unit.js"> # </a>
            </h3>
            <p>src/react/unit.js</p>
            <pre><code class="lang-js">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> oldKey <span class="hljs-keyword">in</span> oldChildrenMap){
            <span class="hljs-keyword">if</span>(!newMap.hasOwnProperty(oldKey)){
                <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[oldKey];
                diffQueue.push({
                    <span class="hljs-attr">parentId</span>:<span class="hljs-keyword">this</span>._rootId,
                    <span class="hljs-attr">parentNode</span>:$(<span class="hljs-string">`[data-reactid="<span class="hljs-subst">${<span class="hljs-keyword">this</span>._rootId}</span>"]`</span>),
                    <span class="hljs-attr">type</span>:types.REMOVE,
                    <span class="hljs-attr">fromIndex</span>:oldChild._mountIndex
                });
+                <span class="hljs-keyword">this</span>.renderedChildren = <span class="hljs-keyword">this</span>.renderedChildren.filter(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item != oldChild);
                $(<span class="hljs-built_in">document</span>).undelegate(<span class="hljs-string">'.'</span>+oldChild._rootId);
            }
        }


getNewChildren(oldChildrenMap,newChildrenElements){
       <span class="hljs-keyword">let</span> newChildren = [];
       <span class="hljs-keyword">let</span> newMap = {};
       newChildrenElements.forEach(<span class="hljs-function">(<span class="hljs-params">newElement,idx</span>)=&gt;</span>{
         <span class="hljs-keyword">let</span> newKey = (newElement.props&amp;&amp;newElement.props.key) || idx.toString();
         <span class="hljs-comment">//获取老的Unit</span>
         <span class="hljs-keyword">let</span> oldChild = oldChildrenMap[newKey];
         <span class="hljs-comment">//获取老的Unit对应的Element元素</span>
         <span class="hljs-keyword">let</span> oldElement = oldChild &amp;&amp; oldChild._currentElement;
         <span class="hljs-keyword">if</span>(shouldDeepCompare(oldElement,newElement)){
            oldChild.update(newElement);
            newChildren.push(oldChild);
            newMap[newKey] = oldChild;
         }<span class="hljs-keyword">else</span>{
             <span class="hljs-keyword">let</span> newChildInstance = createReactUnit(newElement);
             newMap[newKey] = newChildInstance;
             newChildren.push(newChildInstance);
+            <span class="hljs-keyword">this</span>.renderedChildren[idx]=newChildInstance
         }
       });
       <span class="hljs-keyword">return</span> {newMap,newChildren};
    }        
</code></pre>
            <h2 id="t4410. diff 策略">10. diff 策略 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4410.%20diff%20%E7%AD%96%E7%95%A5">
                    # </a></h2>
            <ul>
                <li>Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li>
                <li>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li>
                <li>对于同一层级的一组子节点，它们可以通过唯一<code>key</code>进行区分。</li>
            </ul>
            <h3 id="t4510.1 tree diff">10.1 tree diff <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4510.1%20tree%20diff"> # </a>
            </h3>
            <ul>
                <li>React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较</li>
            </ul>
            <p><img src="./60.react-1_files/sametree.png" alt="sametree"></p>
            <ul>
                <li>当出现节点跨层级移动时，并不会出现想象中的移动操作，而是以 A 为根节点的树被整个重新创建</li>
            </ul>
            <p><img src="./60.react-1_files/movemytree.png" alt="movemytree"></p>
            <h3 id="t4610.2 component  diff">10.2 component diff <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4610.2%20component%20%20diff">
                    # </a></h3>
            <ul>
                <li>如果是同一类型的组件，按照原策略继续比较 <code>virtual DOM tree</code></li>
                <li>如果不是，则将该组件判断为<code>dirty component</code>,从而替换整个组件下的所有子节点</li>
            </ul>
            <p><img src="./60.react-1_files/deleteall.png" alt="deleteall"></p>
            <h3 id="t4710.3 element diff">10.3 element diff <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4710.3%20element%20diff"> #
                </a></h3>
            <ul>
                <li>当节点处于同一层级时，React diff 提供了三种节点操作,分别为：INSERT(插入)、MOVE(移动)和 REMOVE(删除)</li>
                <li>INSERT 新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作</li>
                <li>MOVE 在老集合有新 component 类型，就需要做移动操作，可以复用以前的 DOM 节点</li>
                <li>REMOVE 老 component 不在新集合里的，也需要执行删除操作</li>
            </ul>
            <h3 id="t4810.4 key">10.4 key <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4810.4%20key"> # </a></h3>
            <p><img src="./60.react-1_files/oldnewmove.png" alt="oldnewmove"></p>
            <p><img src="./60.react-1_files/oldnewmove2.png" alt="oldnewmove2"></p>
            <p><img src="./60.react-1_files/oldnewmove3.png" alt="oldnewmove3"></p>
            <h2 id="t4911.delegate">11.delegate <a
                    href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html#t4911.delegate"> # </a></h2>
            <ul>
                <li><a href="http://api.jquery.com/undelegate/">delegate</a></li>
            </ul>
            <pre><code class="lang-js"><span class="hljs-keyword">var</span> $<span class="hljs-built_in">document</span> = $(<span class="hljs-built_in">document</span>);

$<span class="hljs-built_in">document</span>.delegate(<span class="hljs-string">"#btn1"</span>, <span class="hljs-string">"click.foo.bar"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
    alert(<span class="hljs-string">"click-1"</span>);
});

$<span class="hljs-built_in">document</span>.delegate(<span class="hljs-string">"#btn1"</span>, <span class="hljs-string">"click.test"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
    alert(<span class="hljs-string">"click-2"</span>);
});

$<span class="hljs-built_in">document</span>.delegate(<span class="hljs-string">"#btn1"</span>, <span class="hljs-string">"click.test.foo"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
    alert(<span class="hljs-string">"click-3"</span>);
});

<span class="hljs-comment">// $document.undelegate(".test"); // 移除click-2、click-3</span>

<span class="hljs-comment">// $document.undelegate(".foo");  // 移除click-1、click-3</span>

<span class="hljs-comment">// $document.undelegate(".foo.bar");  // 移除click-1</span>
</code></pre>

            <div class="copyright">Powered by <a href="https://github.com/jaywcjlove/idoc" target="_blank">idoc</a>.
                Dependence <a href="https://nodejs.org/">Node.js</a> run.</div>
        </div>

    </div>

    <script src="./60.react-1_files/jquery.js"></script>
    <script>
        $('.warpper .page-toc ul ul li a').on('click', function () {
            $('.warpper .page-toc ul ul li a').removeClass('my-active')
            $(this).addClass('my-active')
        })

        $('.logo').on('mouseenter', function () {
            $('.nav').height('400px');
        })
        $('.nav').on('mouseleave', function () {
            $('.nav').height('80px');
        })
        $('.logo').on('click', function () {
            $('.nav').css('display', 'none');
            $('.warpper').css('padding', '0px');
        })
        // if (!$('.understand-me').length) {
        //   var bar = $(window).height() - $('.navbar ').height() - $('.page-toc').position().top;
        //   var count = bar / 26 / 2;
        //   var barHeight = $('.page-toc').outerHeight();
        //   $('.page-toc li').eq(0).children('a').addClass('red');
        //   var arr = [];
        //   $("h1,h2,h3,h4,h5,h6").each(function () {
        //     arr.push($(this).position().top);
        //   });
        //   var timer
        //   function dark() {
        //     clearTimeout(timer)
        //      timer = setTimeout(function () {
        //      var top = Math.abs($('.page-toc > ul').position().top);
        //      var cur = $('.content').scrollTop();
        //      for (var i = arr.length; i >= 0; i--) {
        //        if (arr[i] <= cur) {
        //          break;
        //        }
        //      }
        //      if (i === -1) {
        //        i = 0;
        //      }
        //      $('.page-toc li a').removeClass('red');
        //      $('.page-toc li').eq(i).children('a').addClass('red');
        //      let height = $('.page-toc li').eq(i).position().top-$('.page-toc').height(); // 如果当前的offset出去了 回到中间可好？
        //      $('.page-toc').scrollTop(height+$('.page-toc').height()/2);
        //    },200)
        //   }

        //   $('.content').on('scroll', dark);
        // }
    </script>
    <style>
        /* ::-webkit-scrollbar{width:14px;}
    ::-webkit-scrollbar-track{background-color:transparent;}
    ::-webkit-scrollbar-thumb{background-color:transparent;}
    ::-webkit-scrollbar-thumb:hover {background-color:transparent}
    ::-webkit-scrollbar-thumb:active {background-color:transparent} */

        .page-toc>ul .red {
            background: #f3f3f3;
            z-index: 1;
            border-left: 3px solid #009a61;
            -webkit-transition: all .2s ease;
            transition: all .2s ease;
            color: #000
        }
    </style>


</body>

</html>