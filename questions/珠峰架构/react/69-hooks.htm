<!DOCTYPE html>
<!-- saved from url=(0059)http://www.zhufengpeixun.cn/architecture/html/69-hooks.html -->
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>珠峰架构师成长计划</title>
    <link rel="stylesheet" type="text/css" href="./69-hooks_files/main.css">
    <style type="text/css" abt="234"></style>
    <script>
        //console.log('a')
    </script>
    <script>
        //remove 17173 video ad
        doAdblock();

        function doAdblock() {
            (function () {
                function A() {}
                A.prototype = {
                    rules: {
                        '17173_in': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_in_20150522.swf"
                        },
                        '17173_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_out_20150522.swf"
                        },
                        '17173_live': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_stream_20150522.swf"
                        },
                        '17173_live_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                            'replace': "http://swf.adtchrome.com/17173.out.Live.swf"
                        }
                    },
                    _done: null,
                    get done() {
                        if (!this._done) {
                            this._done = new Array();
                        }
                        return this._done;
                    },
                    addAnimations: function () {
                        var style = document.createElement('style');
                        style.type = 'text/css';
                        style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                        document.getElementsByTagName('head')[0].appendChild(style);
                    },
                    animationsHandler: function (e) {
                        if (e.animationName === 'playerInserted') {
                            this.replace(e.target);
                        }
                    },
                    replace: function (elem) {
                        if (this.done.indexOf(elem) != -1) return;
                        this.done.push(elem);
                        var player = elem.data || elem.src;
                        if (!player) return;
                        var i, find, replace = false;
                        for (i in this.rules) {
                            find = this.rules[i]['find'];
                            if (find.test(player)) {
                                replace = this.rules[i]['replace'];
                                if ('function' === typeof this.rules[i]['preHandle']) {
                                    this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                                } else {
                                    this.reallyReplace.bind(this, elem, find, replace)();
                                }
                                break;
                            }
                        }
                    },
                    reallyReplace: function (elem, find, replace) {
                        elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem
                            .src = elem.src.replace(find, replace)) && (elem.style.display =
                            'block'));
                        var b = elem.querySelector("param[name='movie']");
                        this.reloadPlugin(elem);
                    },
                    reloadPlugin: function (elem) {
                        var nextSibling = elem.nextSibling;
                        var parentNode = elem.parentNode;
                        parentNode.removeChild(elem);
                        var newElem = elem.cloneNode(true);
                        this.done.push(newElem);
                        if (nextSibling) {
                            parentNode.insertBefore(newElem, nextSibling);
                        } else {
                            parentNode.appendChild(newElem);
                        }
                    },
                    init: function () {
                        var handler = this.animationsHandler.bind(this);
                        document.body.addEventListener('webkitAnimationStart', handler, false);
                        document.body.addEventListener('msAnimationStart', handler, false);
                        document.body.addEventListener('oAnimationStart', handler, false);
                        document.body.addEventListener('animationstart', handler, false);
                        this.addAnimations();
                    }
                };
                new A().init();
            })();
        }
        //remove baidu search ad
        if (document.URL.indexOf('www.baidu.com') >= 0) {
            if (document && document.getElementsByTagName && document.getElementById && document.body) {
                var aa = function () {
                    var all = document.body.querySelectorAll("#content_left div,#content_left table");
                    for (var i = 0; i < all.length; i++) {
                        if (/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                    all = document.body.querySelectorAll('.result.c-container[id="1"]');
                    //if(all.length == 1) return;
                    for (var i = 0; i < all.length; i++) {
                        if (all[i].innerHTML && all[i].innerHTML.indexOf('广告') > -1) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                }
                aa();
                document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified', aa)
            };
        }
        //remove sohu video ad
        if (document.URL.indexOf("tv.sohu.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //remove 56.com video ad
        if (document.URL.indexOf("56.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //fore iqiyi enable html5 player function
        if (document.URL.indexOf("iqiyi.com") >= 0) {
            if (document.cookie.indexOf("player_forcedType=h5_VOD") == -1) {
                document.cookie = 'player_forcedType=h5_VOD'
                if (localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime) < 60000) {
                    console.log('no reload')
                } else {
                    location.reload()
                    localStorage.reloadTime = Date.now();
                }
            }
        }
    </script>
    <style type="text/css">
        object,
        embed {
            -webkit-animation-duration: .001s;
            -webkit-animation-name: playerInserted;
            -ms-animation-duration: .001s;
            -ms-animation-name: playerInserted;
            -o-animation-duration: .001s;
            -o-animation-name: playerInserted;
            animation-duration: .001s;
            animation-name: playerInserted;
        }

        @-webkit-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-ms-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-o-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }
    </style>
</head>

<body>
    


    <div class="warpper">

        <div class="page-toc">
            <ul>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t01.%20React%20Hooks">1. React
                        Hooks</a></li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t12.%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">2.
                        注意事项</a></li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t23.%20%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE">3.
                        搭建项目</a></li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t34.%20useState">4.
                        useState</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t44.1%20%E4%BD%BF%E7%94%A8useState">4.1
                                使用useState</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t54.2%20%E5%AE%9E%E7%8E%B0useState">4.2
                                实现useState</a></li>
                    </ul>
                </li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t65.%20useReducer">5.
                        useReducer</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t75.1%20%E4%BD%BF%E7%94%A8useReducer">5.1
                                使用useReducer</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t85.2%20%E5%AE%9E%E7%8E%B0useReducer">5.2
                                实现useReducer</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t95.3%20useReducer%E5%AE%9E%E7%8E%B0useState">5.3
                                useReducer实现useState</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t106.%20%E5%A4%9A%E4%B8%AAuseState">6.
                        多个useState</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t116.1%20%E4%BD%BF%E7%94%A8">6.1
                                使用</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t126.2%20%E5%AE%9E%E7%8E%B0">6.2
                                实现</a></li>
                    </ul>
                </li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t137.%20useEffect">7.
                        useEffect</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t147.1%20%E4%BD%BF%E7%94%A8useEffect">7.1
                                使用useEffect</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t157.2%20%E5%AE%9E%E7%8E%B0useEffect">7.2
                                实现useEffect</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t167.3%20useState+useEffect">7.3
                                useState+useEffect</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t178.%20useState%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0">8.
                        useState源码中的链表实现</a></li>
            </ul>
        </div>

        <div class="content markdown-body">
            <h2 id="t01. React Hooks">1. React Hooks <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t01.%20React%20Hooks"> # </a></h2>
            <ul>
                <li>Hook 是 React 16.8 的新增特性,它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</li>
                <li>如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使用 Hook</li>
            </ul>
            <h2 id="t12. 注意事项">2. 注意事项 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t12.%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">
                    # </a></h2>
            <ul>
                <li>只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。</li>
                <li>只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用</li>
            </ul>
            <h2 id="t23. 搭建项目">3. 搭建项目 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t23.%20%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE">
                    # </a></h2>
            <pre><code class="lang-js">npx create-react-app zhufeng_hooks
cd zhufeng_hooks
yarn start
</code></pre>
            <h2 id="t34. useState">4. useState <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t34.%20useState"> # </a></h2>
            <ul>
                <li>useState 就是一个 Hook</li>
                <li>通过在函数组件里调用它来给组件添加一些内部 state,React 会在重复渲染时保留这个 state</li>
                <li>useState 会返回一对值：当前状态和一个让你更新它的函数，你可以在事件处理函数中或其他一些地方调用这个函数。它类似 class 组件的 this.setState，但是它不会把新的 state
                    和旧的 state 进行合并</li>
                <li>useState 唯一的参数就是初始 state</li>
                <li>返回一个 state，以及更新 state 的函数<ul>
                        <li>在初始渲染期间，返回的状态 (state) 与传入的第一个参数 (initialState) 值相同</li>
                        <li>setState 函数用于更新 state。它接收一个新的 state 值并将组件的一次重新渲染加入队列</li>
                    </ul>
                </li>
            </ul>
            <p><code>const [state, setState] = useState(initialState);</code> </p>
            <h3 id="t44.1 使用useState">4.1 使用useState <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t44.1%20%E4%BD%BF%E7%94%A8useState">
                    # </a></h3>
            <p>src\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{useState} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h3 id="t54.2 实现useState">4.2 实现useState <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t54.2%20%E5%AE%9E%E7%8E%B0useState">
                    # </a></h3>
            <p>src\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">let</span> memoizedState;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useState</span>(<span class="hljs-params">initialState</span>)</span>{
    memoizedState = memoizedState||initialState;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">newState</span>)</span>{
       memoizedState = newState;
       render();
    }
    <span class="hljs-keyword">return</span> [memoizedState,setState];
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h2 id="t65. useReducer">5. useReducer <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t65.%20useReducer"> # </a></h2>
            <ul>
                <li>useState 的内部实现</li>
                <li>它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法</li>
                <li>在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等</li>
            </ul>
            <h3 id="t75.1 使用useReducer">5.1 使用useReducer <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t75.1%20%E4%BD%BF%E7%94%A8useReducer">
                    # </a></h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{useReducer} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">const</span> initialArg = <span class="hljs-number">0</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>{
  <span class="hljs-keyword">switch</span> (action.type) {
    <span class="hljs-keyword">case</span> <span class="hljs-string">'increment'</span>:
      <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>: state.number + <span class="hljs-number">1</span>};
    <span class="hljs-keyword">case</span> <span class="hljs-string">'decrement'</span>:
      <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>: state.number - <span class="hljs-number">1</span>};
    <span class="hljs-keyword">default</span>:
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>();
  }
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params">initialArg</span>)</span>{
    <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>:initialArg};
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">debugger</span>;
    <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg,init);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
          Count: {state.number}
          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> dispatch({type: 'increment'})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> dispatch({type: 'decrement'})}&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h3 id="t85.2 实现useReducer">5.2 实现useReducer <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t85.2%20%E5%AE%9E%E7%8E%B0useReducer">
                    # </a></h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">let</span> memoizedState ;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useReducer</span>(<span class="hljs-params">reducer, initialArg,init</span>)</span>{
     <span class="hljs-keyword">var</span> initialState = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;
      <span class="hljs-keyword">if</span> (init !== <span class="hljs-literal">undefined</span>) {
        initialState = init(initialArg);
      } <span class="hljs-keyword">else</span> {
        initialState = initialArg;
      }
      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatch</span>(<span class="hljs-params">action</span>)</span>{
          memoizedState = reducer(memoizedState,action);
          render();
      }
      memoizedState =  memoizedState||initialState;
      <span class="hljs-keyword">return</span>  [memoizedState, dispatch];
}
<span class="hljs-keyword">const</span> initialArg = <span class="hljs-number">0</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>{
  <span class="hljs-keyword">switch</span> (action.type) {
    <span class="hljs-keyword">case</span> <span class="hljs-string">'increment'</span>:
      <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>: state.number + <span class="hljs-number">1</span>};
    <span class="hljs-keyword">case</span> <span class="hljs-string">'decrement'</span>:
      <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>: state.number - <span class="hljs-number">1</span>};
    <span class="hljs-keyword">default</span>:
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>();
  }
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params">initialArg</span>)</span>{
    <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>:initialArg};
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">debugger</span>;
    <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg,init);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
          Count: {state.number}
          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> dispatch({type: 'increment'})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> dispatch({type: 'decrement'})}&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h3 id="t95.3 useReducer实现useState">5.3 useReducer实现useState <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t95.3%20useReducer%E5%AE%9E%E7%8E%B0useState">
                    # </a></h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">let</span> memoizedState;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useReducer</span>(<span class="hljs-params">reducer, initialArg,init</span>)</span>{
     <span class="hljs-keyword">var</span> initialState = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>;
      <span class="hljs-keyword">if</span> (init !== <span class="hljs-literal">undefined</span>) {
        initialState = init(initialArg);
      } <span class="hljs-keyword">else</span> {
        initialState = initialArg;
      }
      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatch</span>(<span class="hljs-params">action</span>)</span>{
          memoizedState = reducer(memoizedState,action);
          render();
      }
      memoizedState =  memoizedState||initialState;
      <span class="hljs-keyword">return</span>  [memoizedState, dispatch];
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useState</span>(<span class="hljs-params">initialState</span>)</span>{
    <span class="hljs-keyword">return</span>  useReducer(<span class="hljs-function">(<span class="hljs-params">oldState, newState</span>)=&gt;</span>newState, initialState);
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h2 id="t106. 多个useState">6. 多个useState <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t106.%20%E5%A4%9A%E4%B8%AAuseState">
                    # </a></h2>
            <h3 id="t116.1 使用">6.1 使用 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t116.1%20%E4%BD%BF%E7%94%A8"> #
                </a></h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{useState} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;


<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [name,setName] = useState(<span class="hljs-string">'计数器'</span>);
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{name}:{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setName('计数器'+Date.now())}&gt;修改名称<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h3 id="t126.2 实现">6.2 实现 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t126.2%20%E5%AE%9E%E7%8E%B0"> #
                </a></h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;

<span class="hljs-keyword">let</span> memoizedStates = [];
<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useState</span>(<span class="hljs-params">initState</span>)</span>{
    memoizedStates[index]=memoizedStates[index]||initState;
    <span class="hljs-keyword">const</span> currentIndex = index;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">newState</span>)</span>{
        memoizedStates[currentIndex] = newState;
        render();
    }
    <span class="hljs-keyword">return</span> [memoizedStates[index++],setState];
}


<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [name,setName] = useState(<span class="hljs-string">'计数器'</span>);
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{name}:{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setName('计数器'+Date.now())}&gt;修改名称<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    index = 0;
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h2 id="t137. useEffect">7. useEffect <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t137.%20useEffect"> # </a></h2>
            <ul>
                <li>在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性
                </li>
                <li>useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 componentDidMount、componentDidUpdate 和
                    componentWillUnmount 具有相同的用途，只不过被合并成了一个 API</li>
            </ul>
            <p><code>useEffect(didUpdate);</code></p>
            <h3 id="t147.1 使用useEffect">7.1 使用useEffect <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t147.1%20%E4%BD%BF%E7%94%A8useEffect">
                    # </a></h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{useState,useEffect} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [name,setName] = useState(<span class="hljs-string">'计数器'</span>);
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
        <span class="hljs-built_in">console</span>.log(number);
     }, [number]);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{name}:{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
             <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setName('计数器'+Date.now())}&gt;修改名称<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h3 id="t157.2 实现useEffect">7.2 实现useEffect <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t157.2%20%E5%AE%9E%E7%8E%B0useEffect">
                    # </a></h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{useState} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">let</span> lastDependencies;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useEffect</span>(<span class="hljs-params">callback,dependencies</span>)</span>{
  <span class="hljs-keyword">if</span>(!dependencies) <span class="hljs-keyword">return</span> callback();  
  <span class="hljs-keyword">let</span> changed = lastDependencies?!dependencies.every(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>item===lastDependencies[index]):<span class="hljs-literal">true</span>;
  <span class="hljs-keyword">if</span>(changed){
    callback();
    lastDependencies=dependencies;
  }
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [name,setName] = useState(<span class="hljs-string">'计数器'</span>);
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
        <span class="hljs-built_in">console</span>.log(number);
     }, [number]);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{name}:{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
             <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setName('计数器'+Date.now())}&gt;修改名称<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{useState} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">let</span> lastDependencies;
<span class="hljs-keyword">let</span> unEffect;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useEffect</span>(<span class="hljs-params">callback,dependencies</span>)</span>{
   unEffect&amp;&amp;unEffect();
   <span class="hljs-keyword">if</span>(!dependencies){
       unEffect = callback();
       <span class="hljs-keyword">return</span>;
   }
   <span class="hljs-keyword">let</span> changed = lastDependencies? !dependencies.every(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>item===lastDependencies[index]):<span class="hljs-literal">true</span>;
   <span class="hljs-keyword">if</span>(changed){
    unEffect = callback();
    lastDependencies = dependencies;
   } 
} 
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
     <span class="hljs-keyword">let</span> [name,setName] = useState(<span class="hljs-string">'计数器'</span>);
    <span class="hljs-keyword">let</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    useEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
        <span class="hljs-keyword">let</span> $timer = setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
            setNumber(number+<span class="hljs-number">1</span>);
        }, (<span class="hljs-number">1000</span>));
        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
            clearInterval($timer);
        }
    },[number]);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{name}:{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setName('计数器'+Date.now())}&gt;改名称<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> /&gt;</span>, document.getElementById('root'));
}
render();
</span></code></pre>
            <h3 id="t167.3 useState+useEffect">7.3 useState+useEffect <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t167.3%20useState+useEffect"> #
                </a></h3>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">let</span> memoizedStates = [];
<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useState</span>(<span class="hljs-params">initState</span>)</span>{
    memoizedStates[index]=memoizedStates[index]||initState;
    <span class="hljs-keyword">const</span> currentIndex = index;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">newState</span>)</span>{
        <span class="hljs-keyword">debugger</span>;
        memoizedStates[currentIndex] = newState;
        render();
    }
    <span class="hljs-keyword">return</span> [memoizedStates[index++],setState];
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useEffect</span>(<span class="hljs-params">callback,dependencies</span>)</span>{
  <span class="hljs-keyword">if</span>(!dependencies) {
      index++;
      <span class="hljs-keyword">return</span> callback();  
  }
  <span class="hljs-keyword">const</span> lastDependencies = memoizedStates[index];
  <span class="hljs-keyword">let</span> changed = lastDependencies?!dependencies.every(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>item===lastDependencies[index]):<span class="hljs-literal">true</span>;
  <span class="hljs-keyword">if</span>(changed){
    callback();
    memoizedStates[index]=dependencies;
  }
  index++;
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [name,setName] = useState(<span class="hljs-string">'计数器'</span>);
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
        <span class="hljs-built_in">console</span>.log(number);
     }, [number]);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{name}:{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
             <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setName('计数器'+Date.now())}&gt;修改名称<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    index = 0;
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>
            <h2 id="t178. useState源码中的链表实现">8. useState源码中的链表实现 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html#t178.%20useState%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0">
                    # </a></h2>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;

<span class="hljs-keyword">let</span> firstWorkInProgressHook={<span class="hljs-attr">memoizedState</span>: <span class="hljs-literal">null</span>,<span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>};
<span class="hljs-keyword">let</span> workInProgressHook=firstWorkInProgressHook;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useState</span>(<span class="hljs-params">initState</span>)</span>{
    <span class="hljs-keyword">let</span> currentHook = workInProgressHook.next?workInProgressHook.next:{<span class="hljs-attr">memoizedState</span>: initState,<span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>};
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">newState</span>)</span>{
        currentHook.memoizedState = newState;
        render();
    }
    <span class="hljs-keyword">if</span>(workInProgressHook.next){
        workInProgressHook = workInProgressHook.next;
    }<span class="hljs-keyword">else</span>{
        workInProgressHook.next = currentHook;
        workInProgressHook = currentHook;
    }
    <span class="hljs-keyword">return</span> [currentHook.memoizedState,setState];
} 

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> [name,setName] = useState(<span class="hljs-string">'计数器'</span>);
    <span class="hljs-keyword">const</span> [number,setNumber] = useState(<span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{name}:{number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setName('新计数器'+Date.now())}&gt;新计数器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>setNumber(number+1)}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;/&gt;</span>
    )
}
function render(){
    workInProgressHook = firstWorkInProgressHook;
    ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span>,document.getElementById('root'));
}
render();
</span></code></pre>

            <div class="copyright">Powered by <a href="https://github.com/jaywcjlove/idoc" target="_blank">idoc</a>.
                Dependence <a href="https://nodejs.org/">Node.js</a> run.</div>
        </div>

    </div>

    <script src="./69-hooks_files/jquery.js"></script>
    <script>
        $('.warpper .page-toc ul ul li a').on('click', function () {
            $('.warpper .page-toc ul ul li a').removeClass('my-active')
            $(this).addClass('my-active')
        })

        $('.logo').on('mouseenter', function () {
            $('.nav').height('400px');
        })
        $('.nav').on('mouseleave', function () {
            $('.nav').height('80px');
        })
        $('.logo').on('click', function () {
            $('.nav').css('display', 'none');
            $('.warpper').css('padding', '0px');
        })
        // if (!$('.understand-me').length) {
        //   var bar = $(window).height() - $('.navbar ').height() - $('.page-toc').position().top;
        //   var count = bar / 26 / 2;
        //   var barHeight = $('.page-toc').outerHeight();
        //   $('.page-toc li').eq(0).children('a').addClass('red');
        //   var arr = [];
        //   $("h1,h2,h3,h4,h5,h6").each(function () {
        //     arr.push($(this).position().top);
        //   });
        //   var timer
        //   function dark() {
        //     clearTimeout(timer)
        //      timer = setTimeout(function () {
        //      var top = Math.abs($('.page-toc > ul').position().top);
        //      var cur = $('.content').scrollTop();
        //      for (var i = arr.length; i >= 0; i--) {
        //        if (arr[i] <= cur) {
        //          break;
        //        }
        //      }
        //      if (i === -1) {
        //        i = 0;
        //      }
        //      $('.page-toc li a').removeClass('red');
        //      $('.page-toc li').eq(i).children('a').addClass('red');
        //      let height = $('.page-toc li').eq(i).position().top-$('.page-toc').height(); // 如果当前的offset出去了 回到中间可好？
        //      $('.page-toc').scrollTop(height+$('.page-toc').height()/2);
        //    },200)
        //   }

        //   $('.content').on('scroll', dark);
        // }
    </script>
    <style>
        /* ::-webkit-scrollbar{width:14px;}
    ::-webkit-scrollbar-track{background-color:transparent;}
    ::-webkit-scrollbar-thumb{background-color:transparent;}
    ::-webkit-scrollbar-thumb:hover {background-color:transparent}
    ::-webkit-scrollbar-thumb:active {background-color:transparent} */

        .page-toc>ul .red {
            background: #f3f3f3;
            z-index: 1;
            border-left: 3px solid #009a61;
            -webkit-transition: all .2s ease;
            transition: all .2s ease;
            color: #000
        }
    </style>


</body>

</html>