<!DOCTYPE html>
<!-- saved from url=(0057)http://www.zhufengpeixun.cn/architecture/html/31.dva.html -->
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>珠峰架构师成长计划</title>
    <link rel="stylesheet" type="text/css" href="./31.dva_files/main.css">
    <style type="text/css" abt="234"></style>
    <script>
        //console.log('a')
    </script>
    <script>
        //remove 17173 video ad
        doAdblock();

        function doAdblock() {
            (function () {
                function A() {}
                A.prototype = {
                    rules: {
                        '17173_in': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_in_20150522.swf"
                        },
                        '17173_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_out_20150522.swf"
                        },
                        '17173_live': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_stream_20150522.swf"
                        },
                        '17173_live_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                            'replace': "http://swf.adtchrome.com/17173.out.Live.swf"
                        }
                    },
                    _done: null,
                    get done() {
                        if (!this._done) {
                            this._done = new Array();
                        }
                        return this._done;
                    },
                    addAnimations: function () {
                        var style = document.createElement('style');
                        style.type = 'text/css';
                        style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                        document.getElementsByTagName('head')[0].appendChild(style);
                    },
                    animationsHandler: function (e) {
                        if (e.animationName === 'playerInserted') {
                            this.replace(e.target);
                        }
                    },
                    replace: function (elem) {
                        if (this.done.indexOf(elem) != -1) return;
                        this.done.push(elem);
                        var player = elem.data || elem.src;
                        if (!player) return;
                        var i, find, replace = false;
                        for (i in this.rules) {
                            find = this.rules[i]['find'];
                            if (find.test(player)) {
                                replace = this.rules[i]['replace'];
                                if ('function' === typeof this.rules[i]['preHandle']) {
                                    this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                                } else {
                                    this.reallyReplace.bind(this, elem, find, replace)();
                                }
                                break;
                            }
                        }
                    },
                    reallyReplace: function (elem, find, replace) {
                        elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem
                            .src = elem.src.replace(find, replace)) && (elem.style.display =
                            'block'));
                        var b = elem.querySelector("param[name='movie']");
                        this.reloadPlugin(elem);
                    },
                    reloadPlugin: function (elem) {
                        var nextSibling = elem.nextSibling;
                        var parentNode = elem.parentNode;
                        parentNode.removeChild(elem);
                        var newElem = elem.cloneNode(true);
                        this.done.push(newElem);
                        if (nextSibling) {
                            parentNode.insertBefore(newElem, nextSibling);
                        } else {
                            parentNode.appendChild(newElem);
                        }
                    },
                    init: function () {
                        var handler = this.animationsHandler.bind(this);
                        document.body.addEventListener('webkitAnimationStart', handler, false);
                        document.body.addEventListener('msAnimationStart', handler, false);
                        document.body.addEventListener('oAnimationStart', handler, false);
                        document.body.addEventListener('animationstart', handler, false);
                        this.addAnimations();
                    }
                };
                new A().init();
            })();
        }
        //remove baidu search ad
        if (document.URL.indexOf('www.baidu.com') >= 0) {
            if (document && document.getElementsByTagName && document.getElementById && document.body) {
                var aa = function () {
                    var all = document.body.querySelectorAll("#content_left div,#content_left table");
                    for (var i = 0; i < all.length; i++) {
                        if (/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                    all = document.body.querySelectorAll('.result.c-container[id="1"]');
                    //if(all.length == 1) return;
                    for (var i = 0; i < all.length; i++) {
                        if (all[i].innerHTML && all[i].innerHTML.indexOf('广告') > -1) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                }
                aa();
                document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified', aa)
            };
        }
        //remove sohu video ad
        if (document.URL.indexOf("tv.sohu.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //remove 56.com video ad
        if (document.URL.indexOf("56.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //fore iqiyi enable html5 player function
        if (document.URL.indexOf("iqiyi.com") >= 0) {
            if (document.cookie.indexOf("player_forcedType=h5_VOD") == -1) {
                document.cookie = 'player_forcedType=h5_VOD'
                if (localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime) < 60000) {
                    console.log('no reload')
                } else {
                    location.reload()
                    localStorage.reloadTime = Date.now();
                }
            }
        }
    </script>
    <style type="text/css">
        object,
        embed {
            -webkit-animation-duration: .001s;
            -webkit-animation-name: playerInserted;
            -ms-animation-duration: .001s;
            -ms-animation-name: playerInserted;
            -o-animation-duration: .001s;
            -o-animation-name: playerInserted;
            animation-duration: .001s;
            animation-name: playerInserted;
        }

        @-webkit-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-ms-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-o-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }
    </style>
</head>

<body>
   


    <div class="warpper">

        <div class="page-toc">
            <ul>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t01.dva%E4%BB%8B%E7%BB%8D">1.dva介绍</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t11.1%20%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">1.1
                                前置知识</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t22.%20%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE">2.
                        初始化项目</a></li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t33.%20%E5%9F%BA%E6%9C%AC%E8%AE%A1%E6%95%B0%E5%99%A8">3.
                        基本计数器</a>
                    <ul>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t43.1%20src\index.js">3.1
                                src\index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t53.2%20src\dva\index.js">3.2
                                src\dva\index.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t64.%20%E6%94%AF%E6%8C%81effects">4.
                        支持effects</a>
                    <ul>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t74.1%20src\index.js">4.1
                                src\index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t84.2%20src\dva\index.js">4.2
                                src\dva\index.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t95.%E6%94%AF%E6%8C%81%E8%B7%AF%E7%94%B1">5.支持路由</a>
                    <ul>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t105.1%20src\index.js">5.1
                                src\index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t115.2%20src\dva\index.js">5.2
                                src\dva\index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t125.3%20src\dva\router.js">5.3
                                src\dva\router.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t136.%E6%94%AF%E6%8C%81%E8%B7%B3%E8%BD%AC">6.支持跳转</a>
                    <ul>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t146.1%20src\index.js">6.1
                                src\index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t156.2%20src\dva\index.js">6.2
                                src\dva\index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t166.3%20src\dva\router.js">6.3
                                src\dva\router.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t177.%E6%94%AF%E6%8C%81%E9%92%A9%E5%AD%90">7.支持钩子</a>
                    <ul>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t187.1%20src\index.js">7.1
                                src\index.js</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t197.2%20src\dva\index.js">7.2
                                src\dva\index.js</a></li>
                    </ul>
                </li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t208.%E5%8F%82%E8%80%83">8.参考</a>
                </li>
            </ul>
        </div>

        <div class="content markdown-body">
            <h2 id="t01.dva介绍">1.dva介绍 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t01.dva%E4%BB%8B%E7%BB%8D"> # </a>
            </h2>
            <p><img src="./31.dva_files/PPrerEAKbIoDZYr.png" alt="dva"></p>
            <h3 id="t11.1 前置知识">1.1 前置知识 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t11.1%20%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">
                    # </a></h3>
            <ul>
                <li>react</li>
                <li>react-router-dom</li>
                <li>redux</li>
                <li>react-redux</li>
                <li>connected-react-router</li>
                <li>history</li>
                <li>dva</li>
            </ul>
            <h2 id="t22. 初始化项目">2. 初始化项目 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t22.%20%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE">
                    # </a></h2>
            <pre><code class="lang-js">create-react-app zhufeng-dva-source
cd  zhufeng-dva-source
cnpm install dva redux react-redux react-router-dom connected-react-router history
npm start
</code></pre>
            <h2 id="t33. 基本计数器">3. 基本计数器 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t33.%20%E5%9F%BA%E6%9C%AC%E8%AE%A1%E6%95%B0%E5%99%A8">
                    # </a></h2>
            <h3 id="t43.1 src\index.js">3.1 src\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t43.1%20src\index.js"> # </a></h3>
            <p>src\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> dva,{connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'dva'</span>;
<span class="hljs-keyword">const</span> app = dva();
app.model({
    <span class="hljs-attr">namespace</span>:<span class="hljs-string">'counter'</span>,
    <span class="hljs-attr">state</span>:{<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>},
    <span class="hljs-attr">reducers</span>:{
        add(state){
            <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>:state.number+<span class="hljs-number">1</span>};
        }
    }
});
<span class="hljs-keyword">const</span> Counter = connect(
    <span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.counter
)(<span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>(
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{props.number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/add"})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
));
app.router(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span></span>);
app.start(<span class="hljs-string">'#root'</span>);
</code></pre>
            <h3 id="t53.2 src\dva\index.js">3.2 src\dva\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t53.2%20src\dva\index.js"> # </a>
            </h3>
            <p>src\dva\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> dva,{connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'./dva'</span>;
<span class="hljs-keyword">const</span> app = dva();
app.model({
    <span class="hljs-attr">namespace</span>:<span class="hljs-string">'counter'</span>,
    <span class="hljs-attr">state</span>:{<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>},
    <span class="hljs-attr">reducers</span>:{
        add(state){
            <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>:state.number+<span class="hljs-number">1</span>};
        }
    }
});
<span class="hljs-keyword">const</span> Counter = connect(
    <span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.counter
)(<span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>(
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{props.number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/add"})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
));
app.router(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span></span>);
app.start(<span class="hljs-string">'#root'</span>);
</code></pre>
            <h2 id="t64. 支持effects">4. 支持effects <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t64.%20%E6%94%AF%E6%8C%81effects"> #
                </a></h2>
            <h3 id="t74.1 src\index.js">4.1 src\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t74.1%20src\index.js"> # </a></h3>
            <p>src\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> dva,{connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'dva'</span>;
<span class="hljs-keyword">const</span> app = dva();
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params">ms</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> {
        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
            resolve();
        },ms);
    });
}
app.model({
    <span class="hljs-attr">namespace</span>:<span class="hljs-string">'counter'</span>,
    <span class="hljs-attr">state</span>:{<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>},
    <span class="hljs-attr">reducers</span>:{
        add(state){
            <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>:state.number+<span class="hljs-number">1</span>};
        }
    },
    <span class="hljs-attr">effects</span>:{
        *asyncAdd(action,{call,put}){
          <span class="hljs-keyword">yield</span> call(delay,<span class="hljs-number">1000</span>);
          <span class="hljs-keyword">yield</span> put({<span class="hljs-attr">type</span>:<span class="hljs-string">'counter/add'</span>});
        }
    }
});
<span class="hljs-keyword">const</span> Counter = connect(
    <span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.counter
)(<span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>(
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{props.number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/add"})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/asyncAdd"})}&gt;异步+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
));
app.router(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Counter</span>/&gt;</span></span>);
app.start(<span class="hljs-string">'#root'</span>);
</code></pre>
            <h3 id="t84.2 src\dva\index.js">4.2 src\dva\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t84.2%20src\dva\index.js"> # </a>
            </h3>
            <p>src\dva\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">import</span> {createStore,combineReducers,applyMiddleware} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;
<span class="hljs-keyword">import</span> {connect,Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;
<span class="hljs-keyword">import</span> createSagaMiddleware <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-saga'</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> sagaEffects <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-saga/effects'</span>;
<span class="hljs-keyword">export</span> {connect};
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> app = {
        <span class="hljs-attr">_models</span>:[],
        model,
        <span class="hljs-attr">_router</span>:<span class="hljs-literal">null</span>,
        router,
        start
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">model</span>(<span class="hljs-params">model</span>)</span>{
        app._models.push(model);
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">router</span>(<span class="hljs-params">routerConfig</span>)</span>{
        app._router = routerConfig;
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params">root</span>)</span>{
        <span class="hljs-keyword">let</span> reducers = {};
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;app._models.length;i++){
            <span class="hljs-keyword">let</span> model = app._models[i];
            reducers[model.namespace] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state=model.state,action</span>)</span>{
                 <span class="hljs-keyword">let</span> actionType = action.type;
                 <span class="hljs-keyword">let</span> values = actionType.split(<span class="hljs-string">'/'</span>);
                 <span class="hljs-keyword">if</span>(values[<span class="hljs-number">0</span>] === model.namespace){
                    <span class="hljs-keyword">let</span> reducer = model.reducers[values[<span class="hljs-number">1</span>]];
                    <span class="hljs-keyword">if</span>(reducer){
                        <span class="hljs-keyword">return</span> reducer(state,action);
                    }
                 }
                 <span class="hljs-keyword">return</span> state;
            }
        }
        <span class="hljs-keyword">let</span> rootReducer = combineReducers(reducers);
        <span class="hljs-keyword">let</span> sagaMiddleware = createSagaMiddleware();
        <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">rootSaga</span>(<span class="hljs-params"></span>)</span>{
            <span class="hljs-keyword">let</span> {takeEvery} =  sagaEffects;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> model <span class="hljs-keyword">of</span> app._models){
                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> model.effects){
                    <span class="hljs-keyword">yield</span> takeEvery(model.namespace+<span class="hljs-string">'/'</span>+key,<span class="hljs-function"><span class="hljs-keyword">function</span>*(<span class="hljs-params">action</span>)</span>{
                        <span class="hljs-keyword">yield</span> model.effects[key](action,sagaEffects);
                    });
                }
            }
        }
        <span class="hljs-keyword">let</span> store = createStore(rootReducer,applyMiddleware(sagaMiddleware));
        sagaMiddleware.run(rootSaga);
        <span class="hljs-keyword">let</span> App = app._router;
        ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">{store}</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,<span class="hljs-built_in">document</span>.querySelector(root));
    }
    <span class="hljs-keyword">return</span> app;
}
</code></pre>
            <h2 id="t95.支持路由">5.支持路由 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t95.%E6%94%AF%E6%8C%81%E8%B7%AF%E7%94%B1">
                    # </a></h2>
            <h3 id="t105.1 src\index.js">5.1 src\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t105.1%20src\index.js"> # </a></h3>
            <p>src\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> dva,{connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'dva'</span>;
<span class="hljs-keyword">import</span> {Router,Route} <span class="hljs-keyword">from</span> <span class="hljs-string">'dva/router'</span>;
<span class="hljs-keyword">const</span> app = dva();
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params">ms</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> {
        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
            resolve();
        },ms);
    });
}
app.model({
    <span class="hljs-attr">namespace</span>:<span class="hljs-string">'counter'</span>,
    <span class="hljs-attr">state</span>:{<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>},
    <span class="hljs-attr">reducers</span>:{
        add(state){
            <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>:state.number+<span class="hljs-number">1</span>};
        }
    },
    <span class="hljs-attr">effects</span>:{
        *asyncAdd(action,{call,put}){
          <span class="hljs-keyword">yield</span> call(delay,<span class="hljs-number">1000</span>);
          <span class="hljs-keyword">yield</span> put({<span class="hljs-attr">type</span>:<span class="hljs-string">'counter/add'</span>});
        }
    }
});
<span class="hljs-keyword">const</span> Counter = connect(
    <span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.counter
)(<span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>(
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{props.number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/add"})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/asyncAdd"})}&gt;异步+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
));
<span class="hljs-comment">//index.js:1375 Warning: Please use `require("history").createHashHistory` instead of `require("history/createHashHistory")`. Support for the latter will be removed in the next major release.</span>
<span class="hljs-comment">//index.js:1375 Warning: [sagaEffects.put] counter/add should not be prefixed with namespace counter</span>
<span class="hljs-keyword">const</span> Home = <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
app.router(<span class="hljs-function">(<span class="hljs-params">{history}</span>)=&gt;</span>(
    &lt;Router history={history}&gt;
        &lt;&gt;
            &lt;Route path="/" exact={true} component={Home}/&gt;
            &lt;Route path="/counter" component={Counter}/&gt;
        &lt;/&gt;
    &lt;/Router&gt;
));
app.start('#root');
</code></pre>
            <h3 id="t115.2 src\dva\index.js">5.2 src\dva\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t115.2%20src\dva\index.js"> # </a>
            </h3>
            <p>src\dva\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">import</span> {createStore,combineReducers,applyMiddleware} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;
<span class="hljs-keyword">import</span> {connect,Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;
<span class="hljs-keyword">import</span> createSagaMiddleware <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-saga'</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> sagaEffects <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-saga/effects'</span>;
<span class="hljs-keyword">import</span> {createHashHistory} <span class="hljs-keyword">from</span> <span class="hljs-string">'history'</span>;
<span class="hljs-keyword">export</span> {connect};
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> app = {
        <span class="hljs-attr">_models</span>:[],
        model,
        <span class="hljs-attr">_router</span>:<span class="hljs-literal">null</span>,
        router,
        start
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">model</span>(<span class="hljs-params">model</span>)</span>{
        app._models.push(model);
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">router</span>(<span class="hljs-params">routerConfig</span>)</span>{
        app._router = routerConfig;
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params">root</span>)</span>{
        <span class="hljs-keyword">let</span> reducers = {};
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;app._models.length;i++){
            <span class="hljs-keyword">let</span> model = app._models[i];
            reducers[model.namespace] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state=model.state,action</span>)</span>{
                 <span class="hljs-keyword">let</span> actionType = action.type;
                 <span class="hljs-keyword">let</span> values = actionType.split(<span class="hljs-string">'/'</span>);
                 <span class="hljs-keyword">if</span>(values[<span class="hljs-number">0</span>] === model.namespace){
                    <span class="hljs-keyword">let</span> reducer = model.reducers[values[<span class="hljs-number">1</span>]];
                    <span class="hljs-keyword">if</span>(reducer){
                        <span class="hljs-keyword">return</span> reducer(state,action);
                    }
                 }
                 <span class="hljs-keyword">return</span> state;
            }
        }
        <span class="hljs-keyword">let</span> rootReducer = combineReducers(reducers);
        <span class="hljs-keyword">let</span> sagaMiddleware = createSagaMiddleware();
        <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">rootSaga</span>(<span class="hljs-params"></span>)</span>{
            <span class="hljs-keyword">let</span> {takeEvery} =  sagaEffects;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> model <span class="hljs-keyword">of</span> app._models){
                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> model.effects){
                    <span class="hljs-keyword">yield</span> takeEvery(model.namespace+<span class="hljs-string">'/'</span>+key,<span class="hljs-function"><span class="hljs-keyword">function</span>*(<span class="hljs-params">action</span>)</span>{
                        <span class="hljs-keyword">yield</span> model.effects[key](action,sagaEffects);
                    });
                }
            }
        }
        <span class="hljs-keyword">let</span> store = createStore(rootReducer,applyMiddleware(sagaMiddleware));
        sagaMiddleware.run(rootSaga);
        <span class="hljs-keyword">let</span> history = createHashHistory();
        <span class="hljs-keyword">let</span> App = app._router({history});
        ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">{store}</span>&gt;</span>{App}<span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,<span class="hljs-built_in">document</span>.querySelector(root));
    }
    <span class="hljs-keyword">return</span> app;
}
</code></pre>
            <h3 id="t125.3 src\dva\router.js">5.3 src\dva\router.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t125.3%20src\dva\router.js"> # </a>
            </h3>
            <p>src\dva\router.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>;
</code></pre>
            <h2 id="t136.支持跳转">6.支持跳转 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t136.%E6%94%AF%E6%8C%81%E8%B7%B3%E8%BD%AC">
                    # </a></h2>
            <h3 id="t146.1 src\index.js">6.1 src\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t146.1%20src\index.js"> # </a></h3>
            <p>src\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> dva,{connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'./dva'</span>;
<span class="hljs-keyword">import</span> {Router,Route,routerRedux} <span class="hljs-keyword">from</span> <span class="hljs-string">'./dva/router'</span>;
<span class="hljs-keyword">const</span> app = dva();
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params">ms</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> {
        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
            resolve();
        },ms);
    });
}
app.model({
    <span class="hljs-attr">namespace</span>:<span class="hljs-string">'counter'</span>,
    <span class="hljs-attr">state</span>:{<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>},
    <span class="hljs-attr">reducers</span>:{
        add(state){
            <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>:state.number+<span class="hljs-number">1</span>};
        }
    },
    <span class="hljs-attr">effects</span>:{
        *asyncAdd(action,{call,put}){
          <span class="hljs-keyword">yield</span> call(delay,<span class="hljs-number">1000</span>);
          <span class="hljs-keyword">yield</span> put({<span class="hljs-attr">type</span>:<span class="hljs-string">'counter/add'</span>});
        },
        *goto({to}, { put }) {
         <span class="hljs-keyword">yield</span> put(routerRedux.push(to));
       }
    }
});
<span class="hljs-keyword">const</span> Counter = connect(
    <span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.counter
)(<span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>(
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{props.number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/add"})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/asyncAdd"})}&gt;异步+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/goto",to:'/'})}&gt;跳转到/<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
));
<span class="hljs-comment">//index.js:1375 Warning: Please use `require("history").createHashHistory` instead of `require("history/createHashHistory")`. Support for the latter will be removed in the next major release.</span>
<span class="hljs-comment">//index.js:1375 Warning: [sagaEffects.put] counter/add should not be prefixed with namespace counter</span>
<span class="hljs-keyword">const</span> Home = <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
app.router(<span class="hljs-function">(<span class="hljs-params">{history}</span>)=&gt;</span>(
        &lt;&gt;
            &lt;Route path="/" exact={true} component={Home}/&gt;
            &lt;Route path="/counter" component={Counter}/&gt;
        &lt;/&gt;
));
app.start('#root');
</code></pre>
            <h3 id="t156.2 src\dva\index.js">6.2 src\dva\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t156.2%20src\dva\index.js"> # </a>
            </h3>
            <p>src\dva\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">import</span> {createStore,combineReducers,applyMiddleware} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;
<span class="hljs-keyword">import</span> {connect,Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;
<span class="hljs-keyword">import</span> createSagaMiddleware <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-saga'</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> sagaEffects <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-saga/effects'</span>;
<span class="hljs-keyword">import</span> {createHashHistory} <span class="hljs-keyword">from</span> <span class="hljs-string">'history'</span>;
<span class="hljs-keyword">import</span> {
  routerMiddleware,
  connectRouter,
  ConnectedRouter
} <span class="hljs-keyword">from</span> <span class="hljs-string">"connected-react-router"</span>;
<span class="hljs-keyword">const</span> NAMESPACE_SEPERATOR = <span class="hljs-string">"/"</span>;
<span class="hljs-keyword">export</span> {connect};
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">const</span> app = {
        <span class="hljs-attr">_models</span>:[],
        model,
        <span class="hljs-attr">_router</span>:<span class="hljs-literal">null</span>,
        router,
        start
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">model</span>(<span class="hljs-params">model</span>)</span>{
        app._models.push(model);
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">router</span>(<span class="hljs-params">routerConfig</span>)</span>{
        app._router = routerConfig;
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params">root</span>)</span>{
        <span class="hljs-keyword">let</span> history = createHashHistory();
        <span class="hljs-keyword">const</span> reducers = {
            <span class="hljs-attr">router</span>: connectRouter(history)
        };
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;app._models.length;i++){
            <span class="hljs-keyword">let</span> model = app._models[i];
            reducers[model.namespace] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state=model.state,action</span>)</span>{
                 <span class="hljs-keyword">let</span> actionType = action.type;
                 <span class="hljs-keyword">let</span> [namespace,type] = actionType.split(NAMESPACE_SEPERATOR);
                 <span class="hljs-keyword">if</span>(!type){
                   type = namespace;
                   namespace = model.namespace;
                 }
                 <span class="hljs-keyword">if</span>(namespace === model.namespace){
                    <span class="hljs-keyword">let</span> reducer = model.reducers[type];
                    <span class="hljs-keyword">if</span>(reducer){
                        <span class="hljs-keyword">return</span> reducer(state,action);
                    }
                 }
                 <span class="hljs-keyword">return</span> state;
            }
        }
        <span class="hljs-keyword">let</span> rootReducer = combineReducers(reducers);
        <span class="hljs-keyword">let</span> sagaMiddleware = createSagaMiddleware();
        <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">rootSaga</span>(<span class="hljs-params"></span>)</span>{
            <span class="hljs-keyword">let</span> {takeEvery} =  sagaEffects;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> model <span class="hljs-keyword">of</span> app._models){
                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> model.effects){
                    <span class="hljs-keyword">yield</span> takeEvery(model.namespace+NAMESPACE_SEPERATOR+key,<span class="hljs-function"><span class="hljs-keyword">function</span>*(<span class="hljs-params">action</span>)</span>{
                        <span class="hljs-keyword">yield</span> model.effects[key](action,sagaEffects);
                    });
                }
            }
        }
        <span class="hljs-keyword">let</span> store = createStore(rootReducer,applyMiddleware(routerMiddleware(history),sagaMiddleware));
        sagaMiddleware.run(rootSaga);
        <span class="hljs-keyword">let</span> App = app._router({history,app});
        ReactDOM.render(
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">{store}</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">ConnectedRouter</span> <span class="hljs-attr">history</span>=<span class="hljs-string">{history}</span>&gt;</span>
              {App}
            <span class="hljs-tag">&lt;/<span class="hljs-name">ConnectedRouter</span> &gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span>,document.querySelector(root));
    }
    return app;
}
</span></code></pre>
            <h3 id="t166.3 src\dva\router.js">6.3 src\dva\router.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t166.3%20src\dva\router.js"> # </a>
            </h3>
            <p>src\dva\router.js</p>
            <pre><code class="lang-js"><span class="hljs-built_in">module</span>.exports = <span class="hljs-built_in">require</span>(<span class="hljs-string">'react-router-dom'</span>);
<span class="hljs-built_in">module</span>.exports.routerRedux = <span class="hljs-built_in">require</span>(<span class="hljs-string">'connected-react-router'</span>);
</code></pre>
            <h2 id="t177.支持钩子">7.支持钩子 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t177.%E6%94%AF%E6%8C%81%E9%92%A9%E5%AD%90">
                    # </a></h2>
            <h3 id="t187.1 src\index.js">7.1 src\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t187.1%20src\index.js"> # </a></h3>
            <p>src\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> dva,{connect} <span class="hljs-keyword">from</span> <span class="hljs-string">'dva'</span>;
<span class="hljs-keyword">import</span> {Router,Route,Link,routerRedux} <span class="hljs-keyword">from</span> <span class="hljs-string">'dva/router'</span>;
<span class="hljs-keyword">import</span> {createBrowserHistory} <span class="hljs-keyword">from</span> <span class="hljs-string">'history'</span>;
<span class="hljs-keyword">import</span> { message } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span>;
<span class="hljs-keyword">import</span> logger <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-logger'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">'antd/dist/antd.css'</span>
<span class="hljs-keyword">const</span> SHOW = <span class="hljs-string">'SHOW'</span>;
<span class="hljs-keyword">const</span> HIDE = <span class="hljs-string">'HIDE'</span>;
<span class="hljs-keyword">const</span> initialState = {
    <span class="hljs-attr">global</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">models</span>: {},
    <span class="hljs-attr">effects</span>: {}
};
<span class="hljs-keyword">const</span> app = dva({
    <span class="hljs-attr">history</span>:createBrowserHistory(),
    <span class="hljs-attr">initialState</span>:{<span class="hljs-attr">counter</span>:{<span class="hljs-attr">number</span>:<span class="hljs-number">5</span>}},
    <span class="hljs-attr">onError</span>:<span class="hljs-function">(<span class="hljs-params">(err, dispatch</span>) =&gt;</span> {message.error(err.message)}),
    <span class="hljs-attr">onAction</span>:logger,
    <span class="hljs-attr">onStateChange</span>:<span class="hljs-function">(<span class="hljs-params">state</span>)=&gt;</span>{<span class="hljs-built_in">console</span>.log(state)},
    <span class="hljs-attr">onReducer</span>:<span class="hljs-function"><span class="hljs-params">reducer</span>=&gt;</span><span class="hljs-function">(<span class="hljs-params">state,action</span>)=&gt;</span>{
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'before reducer'</span>);
      <span class="hljs-keyword">return</span> reducer(state,action);
    },
    <span class="hljs-attr">onEffect</span>:<span class="hljs-function">(<span class="hljs-params">effect, { put }, model, actionType</span>)=&gt;</span>{
      <span class="hljs-keyword">const</span> { namespace } = model;
      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>*(<span class="hljs-params">...args</span>) </span>{
        <span class="hljs-keyword">yield</span> put({ <span class="hljs-attr">type</span>: SHOW, <span class="hljs-attr">payload</span>: { namespace, actionType } });
        <span class="hljs-keyword">yield</span> effect(...args);
        <span class="hljs-keyword">yield</span> put({ <span class="hljs-attr">type</span>: HIDE, <span class="hljs-attr">payload</span>: { namespace, actionType } });
      };
    },
    <span class="hljs-attr">extraReducers</span>:{
      loading(state = initialState, { type, payload }) {
        <span class="hljs-keyword">const</span> { namespace, actionType } = payload || {};
        <span class="hljs-keyword">switch</span>(type){
          <span class="hljs-keyword">case</span> SHOW:
            <span class="hljs-keyword">return</span> {<span class="hljs-attr">global</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">models</span>: { ...state.models, [namespace]: <span class="hljs-literal">true</span> }, <span class="hljs-attr">effects</span>: { ...state.effects, [actionType]: <span class="hljs-literal">true</span> },};
          <span class="hljs-keyword">case</span> HIDE:
            <span class="hljs-keyword">const</span> effects = { ...state.effects, [actionType]: <span class="hljs-literal">false</span> };
            <span class="hljs-keyword">const</span> models = { ...state.models, [namespace]: <span class="hljs-literal">false</span> };
            <span class="hljs-keyword">const</span> global = <span class="hljs-built_in">Object</span>.keys(models).some(<span class="hljs-function"><span class="hljs-params">namespace</span> =&gt;</span> {
                <span class="hljs-keyword">return</span> models[namespace];
            });
            <span class="hljs-keyword">return</span> {global,models,effects};
          <span class="hljs-keyword">default</span>:
            <span class="hljs-keyword">return</span> state;  
        }
      }
    },
    <span class="hljs-attr">extraEnhancers</span>:[<span class="hljs-function">(<span class="hljs-params">StoreCreator</span>)=&gt;</span>{
       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'extraEnhancers:StoreCreator'</span>)
       <span class="hljs-keyword">return</span> StoreCreator;
    }]
});
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params">ms</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> {
        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
            resolve();
        },ms);
    });
}
app.model({
    <span class="hljs-attr">namespace</span>:<span class="hljs-string">'counter'</span>,
    <span class="hljs-attr">state</span>:{<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>},
    <span class="hljs-attr">reducers</span>:{
        add(state){
            <span class="hljs-keyword">return</span> {<span class="hljs-attr">number</span>:state.number+<span class="hljs-number">1</span>};
        }
    },
    <span class="hljs-attr">effects</span>:{
        *asyncAdd(action,{call,put}){
          <span class="hljs-keyword">yield</span> call(delay,<span class="hljs-number">1000</span>);
          <span class="hljs-keyword">yield</span> put({<span class="hljs-attr">type</span>:<span class="hljs-string">'add'</span>});
         <span class="hljs-comment">// throw new Error('asyncAdd发生错误');</span>
        },
        *goto({to}, { put }) {
         <span class="hljs-keyword">yield</span> put(routerRedux.push(to));
       }
    },
    <span class="hljs-attr">subscriptions</span>: {
    setup({ dispatch }, done) {
     <span class="hljs-comment">// done('setup发生错误');</span>
    },
  }
});
<span class="hljs-keyword">const</span> Counter = connect(
    <span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.counter
)(<span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>(
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{props.number}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/add"})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/asyncAdd"})}&gt;异步+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>props.dispatch({type:"counter/goto",to:'/'})}&gt;跳转到/<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
));
<span class="hljs-comment">//index.js:1375 Warning: Please use `require("history").createHashHistory` instead of `require("history/createHashHistory")`. Support for the latter will be removed in the next major release.</span>
<span class="hljs-comment">//index.js:1375 Warning: [sagaEffects.put] counter/add should not be prefixed with namespace counter</span>
<span class="hljs-keyword">const</span> Home = <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
app.router(<span class="hljs-function">(<span class="hljs-params">{history}</span>)=&gt;</span>(
        &lt;Router history={history}&gt;
          &lt;&gt;
            &lt;Link to="/"&gt;首页&lt;/Link&gt;
            &lt;Link to="/counter"&gt;计数器&lt;/Link&gt;
            &lt;Route path="/" exact={true} component={Home}/&gt;
            &lt;Route path="/counter" component={Counter}/&gt;
          &lt;/&gt;
        &lt;/Router&gt;
));
app.start('#root');
</code></pre>
            <h3 id="t197.2 src\dva\index.js">7.2 src\dva\index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t197.2%20src\dva\index.js"> # </a>
            </h3>
            <p>src\dva\index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;
<span class="hljs-keyword">import</span> {createStore,combineReducers,applyMiddleware} <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;
<span class="hljs-keyword">import</span> {connect,Provider} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span>;
<span class="hljs-keyword">import</span> createSagaMiddleware <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-saga'</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> sagaEffects <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-saga/effects'</span>;
<span class="hljs-keyword">import</span> {createHashHistory} <span class="hljs-keyword">from</span> <span class="hljs-string">'history'</span>;
<span class="hljs-keyword">import</span> {
  routerMiddleware,
  connectRouter,
  ConnectedRouter
} <span class="hljs-keyword">from</span> <span class="hljs-string">"connected-react-router"</span>;

<span class="hljs-keyword">const</span> NAMESPACE_SEPERATOR = <span class="hljs-string">"/"</span>;
<span class="hljs-keyword">export</span> {connect};
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)</span>{
    <span class="hljs-keyword">const</span> app = {
        <span class="hljs-attr">_models</span>:[],
        model,
        <span class="hljs-attr">_router</span>:<span class="hljs-literal">null</span>,
        router,
        start
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">model</span>(<span class="hljs-params">model</span>)</span>{
        app._models.push(model);
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">router</span>(<span class="hljs-params">routerConfig</span>)</span>{
        app._router = routerConfig;
    }
    <span class="hljs-keyword">let</span> history = options.history||createHashHistory();
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params">root</span>)</span>{
        <span class="hljs-keyword">let</span> reducers = {
            <span class="hljs-attr">router</span>: connectRouter(history)
        };
        <span class="hljs-keyword">if</span>(options.extraReducers){
            reducers = {...reducers,...options.extraReducers}
        }
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;app._models.length;i++){
            <span class="hljs-keyword">let</span> model = app._models[i];
            reducers[model.namespace] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state=model.state,action</span>)</span>{
                 <span class="hljs-keyword">let</span> actionType = action.type;
                 <span class="hljs-keyword">let</span> [namespace,type] = actionType.split(NAMESPACE_SEPERATOR);
                 <span class="hljs-keyword">if</span>(!type){
                   type = namespace;
                   namespace = model.namespace;
                 }
                 <span class="hljs-keyword">if</span>(namespace === model.namespace){
                    <span class="hljs-keyword">let</span> reducer = model.reducers[type];
                    <span class="hljs-keyword">if</span>(reducer){
                        <span class="hljs-keyword">return</span> reducer(state,action);
                    }
                 }
                 <span class="hljs-keyword">return</span> state;
            }
        }
        <span class="hljs-keyword">let</span> combinedReducer = combineReducers(reducers);
        <span class="hljs-keyword">let</span> rootReducer = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state,action</span>)</span>{
            <span class="hljs-keyword">let</span> newState =  combinedReducer(state,action);
            options.onStateChange&amp;&amp;options.onStateChange(newState);
            <span class="hljs-keyword">return</span> newState;
        }
        <span class="hljs-keyword">if</span>(options.onReducer){
            rootReducer = options.onReducer(rootReducer);
        }
        <span class="hljs-keyword">let</span> sagaMiddleware = createSagaMiddleware();
        <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">rootSaga</span>(<span class="hljs-params"></span>)</span>{
            <span class="hljs-keyword">let</span> {takeEvery} =  sagaEffects;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> model <span class="hljs-keyword">of</span> app._models){
                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> model.effects){
                    <span class="hljs-keyword">let</span> effect = model.effects[key];

                    <span class="hljs-keyword">yield</span> takeEvery(model.namespace+NAMESPACE_SEPERATOR+key,<span class="hljs-function"><span class="hljs-keyword">function</span>*(<span class="hljs-params">action</span>)</span>{
                        <span class="hljs-keyword">try</span>{
                            <span class="hljs-keyword">if</span>(options.onEffect){
                                <span class="hljs-keyword">yield</span>  options.onEffect(effect,sagaEffects,model, action.type);
                            }<span class="hljs-keyword">else</span>{
                                <span class="hljs-keyword">yield</span> effect(action,sagaEffects);
                            }
                        }<span class="hljs-keyword">catch</span>(error){
                            options&amp;&amp;options.onError(error);
                        }
                    });
                }
            }
        }
        <span class="hljs-keyword">if</span>(options.onAction){
            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> options.onAction == <span class="hljs-string">'function'</span>){
                options.onAction = [options.onAction]
            }
        }<span class="hljs-keyword">else</span>{
            options.onAction=[]
        }
        <span class="hljs-keyword">if</span>(options.extraEnhancers){
             createStore = options.extraEnhancers(createStore);
        }
        <span class="hljs-keyword">let</span> store = createStore(rootReducer,options.initialState||{},applyMiddleware(routerMiddleware(history),sagaMiddleware,...options.onAction));
        sagaMiddleware.run(rootSaga);

        <span class="hljs-keyword">let</span> App = app._router({history,app});
        ReactDOM.render(
        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">{store}</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">ConnectedRouter</span> <span class="hljs-attr">history</span>=<span class="hljs-string">{history}</span>&gt;</span>
              {App}
            <span class="hljs-tag">&lt;/<span class="hljs-name">ConnectedRouter</span> &gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span>,document.querySelector(root));
    }
    return app;
}
</span></code></pre>
            <h2 id="t208.参考">8.参考 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html#t208.%E5%8F%82%E8%80%83"> # </a>
            </h2>
            <ul>
                <li><a href="https://dvajs.com/">dvajs</a></li>
                <li><a href="https://gitee.com/zhufengpeixun/zhufeng-dva-source4.git">zhufeng-dva-source4</a></li>
            </ul>

            <div class="copyright">Powered by <a href="https://github.com/jaywcjlove/idoc" target="_blank">idoc</a>.
                Dependence <a href="https://nodejs.org/">Node.js</a> run.</div>
        </div>

    </div>

    <script src="./31.dva_files/jquery.js"></script>
    <script>
        $('.warpper .page-toc ul ul li a').on('click', function () {
            $('.warpper .page-toc ul ul li a').removeClass('my-active')
            $(this).addClass('my-active')
        })

        $('.logo').on('mouseenter', function () {
            $('.nav').height('400px');
        })
        $('.nav').on('mouseleave', function () {
            $('.nav').height('80px');
        })
        $('.logo').on('click', function () {
            $('.nav').css('display', 'none');
            $('.warpper').css('padding', '0px');
        })
        // if (!$('.understand-me').length) {
        //   var bar = $(window).height() - $('.navbar ').height() - $('.page-toc').position().top;
        //   var count = bar / 26 / 2;
        //   var barHeight = $('.page-toc').outerHeight();
        //   $('.page-toc li').eq(0).children('a').addClass('red');
        //   var arr = [];
        //   $("h1,h2,h3,h4,h5,h6").each(function () {
        //     arr.push($(this).position().top);
        //   });
        //   var timer
        //   function dark() {
        //     clearTimeout(timer)
        //      timer = setTimeout(function () {
        //      var top = Math.abs($('.page-toc > ul').position().top);
        //      var cur = $('.content').scrollTop();
        //      for (var i = arr.length; i >= 0; i--) {
        //        if (arr[i] <= cur) {
        //          break;
        //        }
        //      }
        //      if (i === -1) {
        //        i = 0;
        //      }
        //      $('.page-toc li a').removeClass('red');
        //      $('.page-toc li').eq(i).children('a').addClass('red');
        //      let height = $('.page-toc li').eq(i).position().top-$('.page-toc').height(); // 如果当前的offset出去了 回到中间可好？
        //      $('.page-toc').scrollTop(height+$('.page-toc').height()/2);
        //    },200)
        //   }

        //   $('.content').on('scroll', dark);
        // }
    </script>
    <style>
        /* ::-webkit-scrollbar{width:14px;}
    ::-webkit-scrollbar-track{background-color:transparent;}
    ::-webkit-scrollbar-thumb{background-color:transparent;}
    ::-webkit-scrollbar-thumb:hover {background-color:transparent}
    ::-webkit-scrollbar-thumb:active {background-color:transparent} */

        .page-toc>ul .red {
            background: #f3f3f3;
            z-index: 1;
            border-left: 3px solid #009a61;
            -webkit-transition: all .2s ease;
            transition: all .2s ease;
            color: #000
        }
    </style>


</body>

</html>