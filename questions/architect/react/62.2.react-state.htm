<!DOCTYPE html>
<!-- saved from url=(0067)http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html -->
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>珠峰架构师成长计划</title>
    <link rel="stylesheet" type="text/css" href="./62.2.react-state_files/main.css">
    <style type="text/css" abt="234"></style>
    <script>
        //console.log('a')
    </script>
    <script>
        //remove 17173 video ad
        doAdblock();

        function doAdblock() {
            (function () {
                function A() {}
                A.prototype = {
                    rules: {
                        '17173_in': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_in_20150522.swf"
                        },
                        '17173_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_out_20150522.swf"
                        },
                        '17173_live': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_stream_20150522.swf"
                        },
                        '17173_live_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                            'replace': "http://swf.adtchrome.com/17173.out.Live.swf"
                        }
                    },
                    _done: null,
                    get done() {
                        if (!this._done) {
                            this._done = new Array();
                        }
                        return this._done;
                    },
                    addAnimations: function () {
                        var style = document.createElement('style');
                        style.type = 'text/css';
                        style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                        document.getElementsByTagName('head')[0].appendChild(style);
                    },
                    animationsHandler: function (e) {
                        if (e.animationName === 'playerInserted') {
                            this.replace(e.target);
                        }
                    },
                    replace: function (elem) {
                        if (this.done.indexOf(elem) != -1) return;
                        this.done.push(elem);
                        var player = elem.data || elem.src;
                        if (!player) return;
                        var i, find, replace = false;
                        for (i in this.rules) {
                            find = this.rules[i]['find'];
                            if (find.test(player)) {
                                replace = this.rules[i]['replace'];
                                if ('function' === typeof this.rules[i]['preHandle']) {
                                    this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                                } else {
                                    this.reallyReplace.bind(this, elem, find, replace)();
                                }
                                break;
                            }
                        }
                    },
                    reallyReplace: function (elem, find, replace) {
                        elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem
                            .src = elem.src.replace(find, replace)) && (elem.style.display =
                            'block'));
                        var b = elem.querySelector("param[name='movie']");
                        this.reloadPlugin(elem);
                    },
                    reloadPlugin: function (elem) {
                        var nextSibling = elem.nextSibling;
                        var parentNode = elem.parentNode;
                        parentNode.removeChild(elem);
                        var newElem = elem.cloneNode(true);
                        this.done.push(newElem);
                        if (nextSibling) {
                            parentNode.insertBefore(newElem, nextSibling);
                        } else {
                            parentNode.appendChild(newElem);
                        }
                    },
                    init: function () {
                        var handler = this.animationsHandler.bind(this);
                        document.body.addEventListener('webkitAnimationStart', handler, false);
                        document.body.addEventListener('msAnimationStart', handler, false);
                        document.body.addEventListener('oAnimationStart', handler, false);
                        document.body.addEventListener('animationstart', handler, false);
                        this.addAnimations();
                    }
                };
                new A().init();
            })();
        }
        //remove baidu search ad
        if (document.URL.indexOf('www.baidu.com') >= 0) {
            if (document && document.getElementsByTagName && document.getElementById && document.body) {
                var aa = function () {
                    var all = document.body.querySelectorAll("#content_left div,#content_left table");
                    for (var i = 0; i < all.length; i++) {
                        if (/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                    all = document.body.querySelectorAll('.result.c-container[id="1"]');
                    //if(all.length == 1) return;
                    for (var i = 0; i < all.length; i++) {
                        if (all[i].innerHTML && all[i].innerHTML.indexOf('广告') > -1) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                }
                aa();
                document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified', aa)
            };
        }
        //remove sohu video ad
        if (document.URL.indexOf("tv.sohu.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //remove 56.com video ad
        if (document.URL.indexOf("56.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //fore iqiyi enable html5 player function
        if (document.URL.indexOf("iqiyi.com") >= 0) {
            if (document.cookie.indexOf("player_forcedType=h5_VOD") == -1) {
                document.cookie = 'player_forcedType=h5_VOD'
                if (localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime) < 60000) {
                    console.log('no reload')
                } else {
                    location.reload()
                    localStorage.reloadTime = Date.now();
                }
            }
        }
    </script>
    <style type="text/css">
        object,
        embed {
            -webkit-animation-duration: .001s;
            -webkit-animation-name: playerInserted;
            -ms-animation-duration: .001s;
            -ms-animation-name: playerInserted;
            -o-animation-duration: .001s;
            -o-animation-name: playerInserted;
            animation-duration: .001s;
            animation-name: playerInserted;
        }

        @-webkit-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-ms-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-o-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }
    </style>
</head>

<body>
   


    <div class="warpper">

        <div class="page-toc">
            <ul>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t01.%20%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E8%AE%A1%E6%95%B0%E5%99%A8">1.
                        原生JS实现计数器</a></li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t12.%20HTML%E7%BB%93%E6%9E%84%E7%9A%84%E5%A4%8D%E7%94%A8">2.
                        HTML结构的复用</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t22.1%20index.html">2.1
                                index.html</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t32.2%20index.js">2.2
                                index.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t43.%E7%94%9F%E6%88%90DOM%E5%85%83%E7%B4%A0%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6">3.生成DOM元素并添加事件</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t53.1%20index.html">3.1
                                index.html</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t63.2%20index.js">3.2
                                index.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t74.%E6%8A%BD%E8%B1%A1Component">4.抽象Component</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t84.1%20index.html">4.1
                                index.html</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t94.2%20index.js">4.2
                                index.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t105.setState%E5%8F%AF%E8%83%BD%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84">5.setState可能是异步的</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t115.1%20index.html">5.1
                                index.html</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t125.2%20index.js">5.2
                                index.js</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t136.%E4%BA%8B%E5%8A%A1">6.事务</a>
                    <ul>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t146.1%20transaction">6.1
                                transaction</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t156.2%20index.js">6.2
                                index.js</a></li>
                    </ul>
                </li>
            </ul>
        </div>

        <div class="content markdown-body">
            <h2 id="t01. 原生JS实现计数器">1. 原生JS实现计数器 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t01.%20%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E8%AE%A1%E6%95%B0%E5%99%A8">
                    # </a></h2>
            <pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"counter-btn"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">let</span> counterBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'counter-btn'</span>);
<span class="hljs-keyword">let</span> number = <span class="hljs-number">0</span>;
counterBtn.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    counterBtn.innerHTML = ++number;
});
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
</code></pre>
            <h2 id="t12. HTML结构的复用">2. HTML结构的复用 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t12.%20HTML%E7%BB%93%E6%9E%84%E7%9A%84%E5%A4%8D%E7%94%A8">
                    # </a></h2>
            <h3 id="t22.1 index.html">2.1 index.html <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t22.1%20index.html"> #
                </a></h3>
            <pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"counter-app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"index.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">let</span> counterApp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'counter-app'</span>);
counterApp.innerHTML = <span class="hljs-keyword">new</span> Counter().render();
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
</code></pre>
            <h3 id="t32.2 index.js">2.2 index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t32.2%20index.js"> # </a>
            </h3>
            <pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span></span>{
  render(){
      <span class="hljs-keyword">return</span> (
          <span class="hljs-string">`
          &lt;button id="counter-btn"&gt;
            0
          &lt;/button&gt;
          `</span>
      )
  }
}
</code></pre>
            <h2 id="t43.生成DOM元素并添加事件">3.生成DOM元素并添加事件 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t43.%E7%94%9F%E6%88%90DOM%E5%85%83%E7%B4%A0%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6">
                    # </a></h2>
            <h3 id="t53.1 index.html">3.1 index.html <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t53.1%20index.html"> #
                </a></h3>
            <pre><code class="lang-js">&lt;body&gt;
&lt;div id="counter-app"&gt;&lt;/div&gt;

&lt;script src="index.js"&gt;&lt;/script&gt;
&lt;script&gt;
let counterApp = document.getElementById('counter-app');
counterApp.appendChild(new Counter().render());
&lt;/script&gt;
&lt;/body&gt;
</code></pre>
            <h3 id="t63.2 index.js">3.2 index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t63.2%20index.js"> # </a>
            </h3>
            <pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span></span>{
  <span class="hljs-keyword">constructor</span>(){
      <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }  
  createDOMFromString(domString){
    <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);
    div.innerHTML = domString;
    <span class="hljs-keyword">return</span> div.children[<span class="hljs-number">0</span>];
  }
  increment (){
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>};
    <span class="hljs-keyword">let</span> oldElement = <span class="hljs-keyword">this</span>.domElement;
    <span class="hljs-keyword">let</span> newElement = <span class="hljs-keyword">this</span>.render();
    oldElement.parentElement.replaceChild(newElement,oldElement);
  }
  render(){
     <span class="hljs-keyword">this</span>.domElement = <span class="hljs-keyword">this</span>.createDOMFromString(<span class="hljs-string">`
     &lt;button id="counter-btn"&gt;
        <span class="hljs-subst">${<span class="hljs-keyword">this</span>.state.number}</span>
     &lt;/button&gt;
     `</span>);
     <span class="hljs-keyword">this</span>.domElement.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-keyword">this</span>.increment.bind(<span class="hljs-keyword">this</span>));
     <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.domElement;
  }
}
</code></pre>
            <h2 id="t74.抽象Component">4.抽象Component <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t74.%E6%8A%BD%E8%B1%A1Component">
                    # </a></h2>
            <h3 id="t84.1 index.html">4.1 index.html <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t84.1%20index.html"> #
                </a></h3>
            <pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"counter-app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"index.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">let</span> counterApp = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'counter-app'</span>);
<span class="hljs-keyword">new</span> Counter({<span class="hljs-attr">name</span>:<span class="hljs-string">'珠峰架构'</span>}).mount(counterApp);
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
</code></pre>
            <h3 id="t94.2 index.js">4.2 index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t94.2%20index.js"> # </a>
            </h3>
            <pre><code class="lang-js"><span class="hljs-built_in">window</span>.trigger = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event,name</span>)</span>{
    <span class="hljs-keyword">let</span> component = event.target.component;
    component[name].call(component,event);
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
        <span class="hljs-keyword">this</span>.props = props;
    }
    createDOMFromString(domString){
        <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);
        div.innerHTML = domString;
        <span class="hljs-keyword">return</span> div.children[<span class="hljs-number">0</span>];
    }
    setState(partialState){
        <span class="hljs-keyword">this</span>.state = <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>.state,partialState);
        <span class="hljs-keyword">let</span> oldElement = <span class="hljs-keyword">this</span>.domElement;
        <span class="hljs-keyword">let</span> newElement = <span class="hljs-keyword">this</span>.renderElement();
        oldElement.parentElement.replaceChild(newElement,oldElement);
    }
    renderElement(){
        <span class="hljs-keyword">let</span> renderString = <span class="hljs-keyword">this</span>.render();
        <span class="hljs-keyword">this</span>.domElement = <span class="hljs-keyword">this</span>.createDOMFromString(renderString);
        <span class="hljs-keyword">this</span>.domElement.component = <span class="hljs-keyword">this</span>;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.domElement;
    }
    mount(container){
        container.appendChild(<span class="hljs-keyword">this</span>.renderElement());
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
      <span class="hljs-keyword">super</span>(props);
      <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }  
  increment(){
   <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   },<span class="hljs-number">1000</span>);
  }
  render(){
      <span class="hljs-keyword">return</span> (
        <span class="hljs-string">`
        &lt;button id="counter-btn" onclick="trigger(event,'increment')"&gt;
         <span class="hljs-subst">${<span class="hljs-keyword">this</span>.props.name}</span>:<span class="hljs-subst">${<span class="hljs-keyword">this</span>.state.number}</span>
        &lt;/button&gt;
        `</span>
      )
  }
}
</code></pre>
            <h2 id="t105.setState可能是异步的">5.setState可能是异步的 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t105.setState%E5%8F%AF%E8%83%BD%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84">
                    # </a></h2>
            <ul>
                <li><a
                        href="https://github.com/facebook/react/blob/35962a00084382b49d1f9e3bd36612925f360e5b/src/renderers/shared/reconciler/ReactUpdates.js#L199">源码</a>
                </li>
            </ul>
            <p><img src="./62.2.react-state_files/setState.png" alt="setState"></p>
            <h3 id="t115.1 index.html">5.1 index.html <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t115.1%20index.html"> #
                </a></h3>
            <pre><code class="lang-js">&lt;body&gt;
&lt;div id="counter-app"&gt;&lt;/div&gt;
&lt;script src="index.js"&gt;&lt;/script&gt;
&lt;script&gt;
let counterApp = document.getElementById('counter-app');
new Counter({name:'珠峰架构'}).mount(counterApp);
&lt;/script&gt;
&lt;/body&gt;
</code></pre>
            <h3 id="t125.2 index.js">5.2 index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t125.2%20index.js"> # </a>
            </h3>
            <pre><code class="lang-js">
<span class="hljs-keyword">let</span> batchingStrategy = {
    <span class="hljs-attr">isBatchingUpdates</span>:<span class="hljs-literal">false</span>,
    <span class="hljs-attr">updaters</span>:[],
    batchedUpdates(){
        <span class="hljs-keyword">this</span>.updaters.forEach(<span class="hljs-function"><span class="hljs-params">updater</span> =&gt;</span> {
            updater.component.updateComponent();
        });
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Updater</span></span>{
    <span class="hljs-keyword">constructor</span>(component){
        <span class="hljs-keyword">this</span>.component = component;
        <span class="hljs-keyword">this</span>.pendingStates = [];
    }
    addState(particalState){
        <span class="hljs-keyword">this</span>.pendingStates.push(particalState);
        batchingStrategy.isBatchingUpdates?batchingStrategy.updaters.push(<span class="hljs-keyword">this</span>):<span class="hljs-keyword">this</span>.component.updateComponent();
    }
}
<span class="hljs-keyword">let</span> transaction = <span class="hljs-keyword">new</span> Transaction({
    initialize() {
        batchingStrategy.isBatchingUpdates = <span class="hljs-literal">true</span>;
    },
    close() {
        batchingStrategy.isBatchingUpdates = <span class="hljs-literal">false</span>;
        batchingStrategy.batchedUpdates();
    }
});
<span class="hljs-built_in">window</span>.trigger = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event,name</span>)</span>{
    batchingStrategy.isBatchingUpdates = <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">let</span> component = event.target.component;
    component[name].bind(component,event);
    batchingStrategy.isBatchingUpdates = <span class="hljs-literal">false</span>;
    batchingStrategy.batchedUpdates();
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
        <span class="hljs-keyword">this</span>.props = props;
        <span class="hljs-keyword">this</span>.$updater = <span class="hljs-keyword">new</span> Updater(<span class="hljs-keyword">this</span>);
    }
    createDOMFromString(domString){
        <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);
        div.innerHTML = domString;
        <span class="hljs-keyword">return</span> div.children[<span class="hljs-number">0</span>];
    }
    setState(particalState){
        <span class="hljs-keyword">this</span>.$updater.addState(particalState);
    }
    updateComponent(){
        <span class="hljs-keyword">let</span> pendingStates = <span class="hljs-keyword">this</span>.$updater.pendingStates;
        pendingStates.forEach(<span class="hljs-function"><span class="hljs-params">particalState</span>=&gt;</span><span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>.state,particalState));
        <span class="hljs-keyword">this</span>.$updater.pendingStates.length = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">let</span> oldElement = <span class="hljs-keyword">this</span>.domElement;
        <span class="hljs-keyword">let</span> newElement = <span class="hljs-keyword">this</span>.renderElement();
        oldElement.parentElement.replaceChild(newElement,oldElement);
    }
    renderElement(){
        <span class="hljs-keyword">let</span> renderString = <span class="hljs-keyword">this</span>.render();
        <span class="hljs-keyword">this</span>.domElement = <span class="hljs-keyword">this</span>.createDOMFromString(renderString);
        <span class="hljs-keyword">this</span>.domElement.component = <span class="hljs-keyword">this</span>;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.domElement;
    }
    mount(container){
        container.appendChild(<span class="hljs-keyword">this</span>.renderElement());
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
      <span class="hljs-keyword">super</span>(props);
      <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }  
  increment(){
   <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   },<span class="hljs-number">1000</span>);
  }
  render(){
      <span class="hljs-keyword">return</span> (
        <span class="hljs-string">`
        &lt;button id="counter-btn" onclick="trigger(event,'increment')"&gt;
         <span class="hljs-subst">${<span class="hljs-keyword">this</span>.props.name}</span>:<span class="hljs-subst">${<span class="hljs-keyword">this</span>.state.number}</span>
        &lt;/button&gt;
        `</span>
      )
  }
}
</code></pre>
            <h2 id="t136.事务">6.事务 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t136.%E4%BA%8B%E5%8A%A1">
                    # </a></h2>
            <ul>
                <li>
                    <p><a
                            href="https://github.com/facebook/react/blob/6d5fe44c8602f666a043a4117ccc3bdb29b86e78/src/shared/utils/Transaction.js">源码</a>
                    </p>
                </li>
                <li>
                    <p>一个所谓的 Transaction 就是将需要执行的 method 使用 wrapper 封装起来，再通过 Transaction 提供的 perform 方法执行</p>
                </li>
                <li>而在 perform 之前，先执行所有 wrapper 中的 initialize 方法；perform 完成之后（即 method 执行后）再执行所有的 close 方法</li>
                <li>一组 initialize 及 close 方法称为一个 wrapper</li>
            </ul>
            <pre> *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +-----------------&gt;|-|---|-|---|--&gt;|anyMethod|---|---|-|---|-|--------&gt;
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * 
 </pre>

            <h3 id="t146.1 transaction">6.1 transaction <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t146.1%20transaction"> #
                </a></h3>
            <pre><code class="lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'setState'</span>)
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Transaction</span> </span>{
    <span class="hljs-keyword">constructor</span>(wrappers) {
        <span class="hljs-keyword">this</span>.wrappers = wrappers;
    }
    perform(func) {
        <span class="hljs-keyword">this</span>.wrappers.forEach(<span class="hljs-function"><span class="hljs-params">wrapper</span>=&gt;</span>wrapper.initialize())
        func.call();
        <span class="hljs-keyword">this</span>.wrappers.forEach(<span class="hljs-function"><span class="hljs-params">wrapper</span>=&gt;</span>wrapper.close())
    }

}
<span class="hljs-keyword">let</span> transaction = <span class="hljs-keyword">new</span> Transaction([
    {
        initialize() {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'before1'</span>);
        },
        close() {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'after1'</span>);
        }
    },
    {
        initialize() {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'before2'</span>);
        },
        close() {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'after2'</span>);
        }
    }
]);
transaction.perform(setState);
</code></pre>
            <h3 id="t156.2 index.js">6.2 index.js <a
                    href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html#t156.2%20index.js"> # </a>
            </h3>
            <pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Transaction</span> </span>{
    <span class="hljs-keyword">constructor</span>(wrapper){
        <span class="hljs-keyword">this</span>.wrapper = wrapper;
    }
    perform(func){
        <span class="hljs-keyword">this</span>.wrapper.initialize();
        func.call();
        <span class="hljs-keyword">this</span>.wrapper.close();
    }

}
<span class="hljs-keyword">let</span> batchingStrategy = {
    <span class="hljs-attr">isBatchingUpdates</span>:<span class="hljs-literal">false</span>,
    <span class="hljs-attr">updaters</span>:[],
    batchedUpdates(){
        <span class="hljs-keyword">this</span>.updaters.forEach(<span class="hljs-function"><span class="hljs-params">updater</span> =&gt;</span> {
            updater.component.updateComponent();
        });
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Updater</span></span>{
    <span class="hljs-keyword">constructor</span>(component){
        <span class="hljs-keyword">this</span>.component = component;
        <span class="hljs-keyword">this</span>.pendingStates = [];
    }
    addState(particalState){
        <span class="hljs-keyword">this</span>.pendingStates.push(particalState);
        batchingStrategy.isBatchingUpdates?batchingStrategy.updaters.push(<span class="hljs-keyword">this</span>):<span class="hljs-keyword">this</span>.component.updateComponent();
    }
}
<span class="hljs-keyword">let</span> transaction = <span class="hljs-keyword">new</span> Transaction({
    initialize() {
        batchingStrategy.isBatchingUpdates = <span class="hljs-literal">true</span>;
    },
    close() {
        batchingStrategy.isBatchingUpdates = <span class="hljs-literal">false</span>;
        batchingStrategy.batchedUpdates();
    }
});
<span class="hljs-built_in">window</span>.trigger = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event,name</span>)</span>{
    <span class="hljs-keyword">let</span> component = event.target.component;
    transaction.perform(component[name].bind(component,event));
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
        <span class="hljs-keyword">this</span>.props = props;
        <span class="hljs-keyword">this</span>.$updater = <span class="hljs-keyword">new</span> Updater(<span class="hljs-keyword">this</span>);
    }
    createDOMFromString(domString){
        <span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);
        div.innerHTML = domString;
        <span class="hljs-keyword">return</span> div.children[<span class="hljs-number">0</span>];
    }
    setState(particalState){
        <span class="hljs-keyword">this</span>.$updater.addState(particalState);
    }
    updateComponent(){
        <span class="hljs-keyword">let</span> pendingStates = <span class="hljs-keyword">this</span>.$updater.pendingStates;
        pendingStates.forEach(<span class="hljs-function"><span class="hljs-params">particalState</span>=&gt;</span><span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>.state,particalState));
        <span class="hljs-keyword">this</span>.$updater.pendingStates.length = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">let</span> oldElement = <span class="hljs-keyword">this</span>.domElement;
        <span class="hljs-keyword">let</span> newElement = <span class="hljs-keyword">this</span>.renderElement();
        oldElement.parentElement.replaceChild(newElement,oldElement);
    }
    renderElement(){
        <span class="hljs-keyword">let</span> renderString = <span class="hljs-keyword">this</span>.render();
        <span class="hljs-keyword">this</span>.domElement = <span class="hljs-keyword">this</span>.createDOMFromString(renderString);
        <span class="hljs-keyword">this</span>.domElement.component = <span class="hljs-keyword">this</span>;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.domElement;
    }
    mount(container){
        container.appendChild(<span class="hljs-keyword">this</span>.renderElement());
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
      <span class="hljs-keyword">super</span>(props);
      <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }  
  increment(){
   <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);
   },<span class="hljs-number">1000</span>);
  }
  render(){
      <span class="hljs-keyword">return</span> (
        <span class="hljs-string">`
        &lt;button id="counter-btn" onclick="trigger(event,'increment')"&gt;
         <span class="hljs-subst">${<span class="hljs-keyword">this</span>.props.name}</span>:<span class="hljs-subst">${<span class="hljs-keyword">this</span>.state.number}</span>
        &lt;/button&gt;
        `</span>
      )
  }
}
</code></pre>

            <div class="copyright">Powered by <a href="https://github.com/jaywcjlove/idoc" target="_blank">idoc</a>.
                Dependence <a href="https://nodejs.org/">Node.js</a> run.</div>
        </div>

    </div>

    <script src="./62.2.react-state_files/jquery.js"></script>
    <script>
        $('.warpper .page-toc ul ul li a').on('click', function () {
            $('.warpper .page-toc ul ul li a').removeClass('my-active')
            $(this).addClass('my-active')
        })

        $('.logo').on('mouseenter', function () {
            $('.nav').height('400px');
        })
        $('.nav').on('mouseleave', function () {
            $('.nav').height('80px');
        })
        $('.logo').on('click', function () {
            $('.nav').css('display', 'none');
            $('.warpper').css('padding', '0px');
        })
        // if (!$('.understand-me').length) {
        //   var bar = $(window).height() - $('.navbar ').height() - $('.page-toc').position().top;
        //   var count = bar / 26 / 2;
        //   var barHeight = $('.page-toc').outerHeight();
        //   $('.page-toc li').eq(0).children('a').addClass('red');
        //   var arr = [];
        //   $("h1,h2,h3,h4,h5,h6").each(function () {
        //     arr.push($(this).position().top);
        //   });
        //   var timer
        //   function dark() {
        //     clearTimeout(timer)
        //      timer = setTimeout(function () {
        //      var top = Math.abs($('.page-toc > ul').position().top);
        //      var cur = $('.content').scrollTop();
        //      for (var i = arr.length; i >= 0; i--) {
        //        if (arr[i] <= cur) {
        //          break;
        //        }
        //      }
        //      if (i === -1) {
        //        i = 0;
        //      }
        //      $('.page-toc li a').removeClass('red');
        //      $('.page-toc li').eq(i).children('a').addClass('red');
        //      let height = $('.page-toc li').eq(i).position().top-$('.page-toc').height(); // 如果当前的offset出去了 回到中间可好？
        //      $('.page-toc').scrollTop(height+$('.page-toc').height()/2);
        //    },200)
        //   }

        //   $('.content').on('scroll', dark);
        // }
    </script>
    <style>
        /* ::-webkit-scrollbar{width:14px;}
    ::-webkit-scrollbar-track{background-color:transparent;}
    ::-webkit-scrollbar-thumb{background-color:transparent;}
    ::-webkit-scrollbar-thumb:hover {background-color:transparent}
    ::-webkit-scrollbar-thumb:active {background-color:transparent} */

        .page-toc>ul .red {
            background: #f3f3f3;
            z-index: 1;
            border-left: 3px solid #009a61;
            -webkit-transition: all .2s ease;
            transition: all .2s ease;
            color: #000
        }
    </style>


</body>

</html>