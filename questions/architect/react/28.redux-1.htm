<!DOCTYPE html>
<!-- saved from url=(0061)http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html -->
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>珠峰架构师成长计划</title>
    <link rel="stylesheet" type="text/css" href="./28.redux-1_files/main.css">
    <style type="text/css" abt="234"></style>
    <script>
        //console.log('a')
    </script>
    <script>
        //remove 17173 video ad
        doAdblock();

        function doAdblock() {
            (function () {
                function A() {}
                A.prototype = {
                    rules: {
                        '17173_in': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_in_20150522.swf"
                        },
                        '17173_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_out_20150522.swf"
                        },
                        '17173_live': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                            'replace': "http://swf.adtchrome.com/17173_stream_20150522.swf"
                        },
                        '17173_live_out': {
                            'find': /http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                            'replace': "http://swf.adtchrome.com/17173.out.Live.swf"
                        }
                    },
                    _done: null,
                    get done() {
                        if (!this._done) {
                            this._done = new Array();
                        }
                        return this._done;
                    },
                    addAnimations: function () {
                        var style = document.createElement('style');
                        style.type = 'text/css';
                        style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                        document.getElementsByTagName('head')[0].appendChild(style);
                    },
                    animationsHandler: function (e) {
                        if (e.animationName === 'playerInserted') {
                            this.replace(e.target);
                        }
                    },
                    replace: function (elem) {
                        if (this.done.indexOf(elem) != -1) return;
                        this.done.push(elem);
                        var player = elem.data || elem.src;
                        if (!player) return;
                        var i, find, replace = false;
                        for (i in this.rules) {
                            find = this.rules[i]['find'];
                            if (find.test(player)) {
                                replace = this.rules[i]['replace'];
                                if ('function' === typeof this.rules[i]['preHandle']) {
                                    this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                                } else {
                                    this.reallyReplace.bind(this, elem, find, replace)();
                                }
                                break;
                            }
                        }
                    },
                    reallyReplace: function (elem, find, replace) {
                        elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem
                            .src = elem.src.replace(find, replace)) && (elem.style.display =
                            'block'));
                        var b = elem.querySelector("param[name='movie']");
                        this.reloadPlugin(elem);
                    },
                    reloadPlugin: function (elem) {
                        var nextSibling = elem.nextSibling;
                        var parentNode = elem.parentNode;
                        parentNode.removeChild(elem);
                        var newElem = elem.cloneNode(true);
                        this.done.push(newElem);
                        if (nextSibling) {
                            parentNode.insertBefore(newElem, nextSibling);
                        } else {
                            parentNode.appendChild(newElem);
                        }
                    },
                    init: function () {
                        var handler = this.animationsHandler.bind(this);
                        document.body.addEventListener('webkitAnimationStart', handler, false);
                        document.body.addEventListener('msAnimationStart', handler, false);
                        document.body.addEventListener('oAnimationStart', handler, false);
                        document.body.addEventListener('animationstart', handler, false);
                        this.addAnimations();
                    }
                };
                new A().init();
            })();
        }
        //remove baidu search ad
        if (document.URL.indexOf('www.baidu.com') >= 0) {
            if (document && document.getElementsByTagName && document.getElementById && document.body) {
                var aa = function () {
                    var all = document.body.querySelectorAll("#content_left div,#content_left table");
                    for (var i = 0; i < all.length; i++) {
                        if (/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                    all = document.body.querySelectorAll('.result.c-container[id="1"]');
                    //if(all.length == 1) return;
                    for (var i = 0; i < all.length; i++) {
                        if (all[i].innerHTML && all[i].innerHTML.indexOf('广告') > -1) {
                            all[i].style.display = "none";
                            all[i].style.visibility = 'hidden';
                        }
                    }
                }
                aa();
                document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified', aa)
            };
        }
        //remove sohu video ad
        if (document.URL.indexOf("tv.sohu.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //remove 56.com video ad
        if (document.URL.indexOf("56.com") >= 0) {
            if (document.cookie.indexOf("fee_status=true") == -1) {
                document.cookie = 'fee_status=true'
            };
        }
        //fore iqiyi enable html5 player function
        if (document.URL.indexOf("iqiyi.com") >= 0) {
            if (document.cookie.indexOf("player_forcedType=h5_VOD") == -1) {
                document.cookie = 'player_forcedType=h5_VOD'
                if (localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime) < 60000) {
                    console.log('no reload')
                } else {
                    location.reload()
                    localStorage.reloadTime = Date.now();
                }
            }
        }
    </script>
    <style type="text/css">
        object,
        embed {
            -webkit-animation-duration: .001s;
            -webkit-animation-name: playerInserted;
            -ms-animation-duration: .001s;
            -ms-animation-name: playerInserted;
            -o-animation-duration: .001s;
            -o-animation-name: playerInserted;
            animation-duration: .001s;
            animation-name: playerInserted;
        }

        @-webkit-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-ms-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @-o-keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes playerInserted {
            from {
                opacity: 0.99;
            }

            to {
                opacity: 1;
            }
        }
    </style>
</head>

<body>
  


    <div class="warpper">

        <div class="page-toc">
            <ul>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t01.%20Redux%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">1.
                        Redux应用场景</a></li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t12.%20Redux%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3">2.
                        Redux设计思想</a></li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t23.%20Redux%E4%B8%89%E5%A4%A7%E5%8E%9F%E5%88%99">3.
                        Redux三大原则</a></li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t34.%20Redux%E6%A6%82%E5%BF%B5%E8%A7%A3%E6%9E%90">4.
                        Redux概念解析</a>
                    <ul>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t44.1%20Store">4.1
                                Store</a></li>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t54.2%20State">4.2
                                State</a></li>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t64.3%20Action">4.3
                                Action</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t74.4%20Action%20Creator">4.4
                                Action Creator</a></li>
                        <li><a
                                href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t84.5%20store.dispatch()">4.5
                                store.dispatch()</a></li>
                        <li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t94.6%20Reducer">4.6
                                Reducer</a></li>
                    </ul>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t105.%E7%BC%96%E5%86%99Redux">5.编写Redux</a>
                </li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t116.%20Counter-Vanilla">6.
                        Counter-Vanilla</a></li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t126.%20React%20Counter">6.
                        React Counter</a></li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t137.actionCreator%E4%BC%98%E5%8C%96%E7%BB%93%E6%9E%84">7.actionCreator优化结构</a>
                </li>
                <li><a
                        href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t148.bindActionCreator">8.bindActionCreator</a>
                </li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t159.%20combineReducers">9.
                        combineReducers</a></li>
                <li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t1610.%20react-redux">10.
                        react-redux</a></li>
            </ul>
        </div>

        <div class="content markdown-body">
            <h2 id="t01. Redux应用场景">1. Redux应用场景 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t01.%20Redux%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">
                    # </a></h2>
            <ul>
                <li>随着 JavaScript 单页应用开发日趋复杂,管理不断变化的 state 非常困难</li>
                <li>Redux的出现就是为了解决state里的数据问题</li>
                <li>在React中，数据在组件中是单向流动的</li>
                <li>数据从一个方向父组件流向子组件(通过props)，由于这个特征，两个非父子关系的组件（或者称作兄弟组件）之间的通信就比较麻烦</li>
            </ul>
            <p><img src="./28.redux-1_files/redux-wrong.png" alt="redux-wrong"></p>
            <h2 id="t12. Redux设计思想">2. Redux设计思想 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t12.%20Redux%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3">
                    # </a></h2>
            <ul>
                <li>Redux是将整个应用状态存储到到一个地方，称为<code>store</code></li>
                <li>里面保存一棵状态树<code>state tree</code></li>
                <li>组件可以派发<code>dispatch</code>行为<code>action</code>给<code>store</code>,而不是直接通知其它组件</li>
                <li>其它组件可以通过订阅store中的状态(state)来刷新自己的视图. </li>
            </ul>
            <p><img src="./28.redux-1_files/redux-flow.png" alt="redux-flow"></p>
            <h2 id="t23. Redux三大原则">3. Redux三大原则 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t23.%20Redux%E4%B8%89%E5%A4%A7%E5%8E%9F%E5%88%99">
                    # </a></h2>
            <ul>
                <li>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中</li>
                <li>State 是只读的，惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象
                    使用纯函数来执行修改，为了描述action如何改变state tree ，你需要编写 reducers</li>
                <li>单一数据源的设计让React的组件之间的通信更加方便，同时也便于状态的统一管理</li>
            </ul>
            <h2 id="t34. Redux概念解析">4. Redux概念解析 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t34.%20Redux%E6%A6%82%E5%BF%B5%E8%A7%A3%E6%9E%90">
                    # </a></h2>
            <h3 id="t44.1 Store">4.1 Store <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t44.1%20Store"> # </a></h3>
            <ul>
                <li><code>Store</code>就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个<code>Store</code></li>
                <li>Redux 提供<code>createStore</code>这个函数，用来生成<code>Store</code>
                    <pre><code class="lang-js"><span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;
<span class="hljs-keyword">const</span> store = createStore(reducer);
</code></pre>
                    <blockquote>
                        <p>上面代码中，createStore函数接受另一个函数作为参数，返回新生成的Store对象。</p>
                    </blockquote>
                </li>
            </ul>
            <h3 id="t54.2 State">4.2 State <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t54.2%20State"> # </a></h3>
            <p>Store对象包含所有数据。如果想得到某个时点的数据，就要对Store生成快照。这种时间点的数据集合，就叫做State。
                当前时刻的State，可以通过<code>store.getState()</code>拿到。</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;
<span class="hljs-keyword">const</span> store = createStore(reducer);
<span class="hljs-keyword">const</span> state = store.getState();
</code></pre>
            <blockquote>
                <p>Redux 规定， 一个 State 对应一个 View。只要 State 相同，View 就相同。你知道 State，就知道 View 是什么样，反之亦然。</p>
            </blockquote>
            <h3 id="t64.3 Action">4.3 Action <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t64.3%20Action"> # </a></h3>
            <p>State的变化，会导致View的变化。但是，用户接触不到 State，只能接触到View
                所以，State的变化必须是 View导致的。Action 就是 View 发出的通知，表示State 应该要发生变化了。
                Action是一个对象。其中的type属性是必须的，表示 Action 的名称。其他属性可以自由设置，社区有一个规范可以参考。</p>
            <pre><code class="lang-js"><span class="hljs-keyword">const</span> action = {
  <span class="hljs-attr">type</span>: <span class="hljs-string">'ADD_TODO'</span>,
  <span class="hljs-attr">payload</span>: <span class="hljs-string">'学习redux'</span>
};
</code></pre>
            <p>上面代码中，Action 的名称是<code>ADD_TODO</code>，它携带的信息是字符串<code>学习redux</code>。
                可以这样理解，Action描述当前发生的事情。改变State的唯一办法，就是使用 Action。它会运送数据到 Store。</p>
            <h3 id="t74.4 Action Creator">4.4 Action Creator <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t74.4%20Action%20Creator"> #
                </a></h3>
            <p>View要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 Action Creator。</p>
            <pre><code class="lang-js"><span class="hljs-keyword">const</span> ADD_TODO = <span class="hljs-string">'添加 TODO'</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTodo</span>(<span class="hljs-params">text</span>) </span>{
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">type</span>: ADD_TODO,
    text
  }
}

<span class="hljs-keyword">const</span> action = addTodo(<span class="hljs-string">'学习Redux'</span>);
</code></pre>
            <blockquote>
                <p>上面代码中，addTodo函数就是一个 Action Creator。</p>
            </blockquote>
            <h3 id="t84.5 store.dispatch()">4.5 store.dispatch() <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t84.5%20store.dispatch()"> #
                </a></h3>
            <p><code>store.dispatch()</code>是 View 发出 Action 的唯一方法。</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span>;
<span class="hljs-keyword">const</span> store = createStore(reducer);

store.dispatch({
  <span class="hljs-attr">type</span>: <span class="hljs-string">'ADD_TODO'</span>,
  <span class="hljs-attr">payload</span>: <span class="hljs-string">'学习Redux'</span>
});
</code></pre>
            <p>上面代码中，store.dispatch接受一个 Action 对象作为参数，将它发送出去。 结合 Action Creator，这段代码可以改写如下。</p>
            <pre><code class="lang-js">store.dispatch(addTodo(<span class="hljs-string">'学习Redux'</span>))
</code></pre>
            <h3 id="t94.6 Reducer">4.6 Reducer <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t94.6%20Reducer"> # </a></h3>
            <ul>
                <li>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。</li>
                <li>这种 State 的计算过程就叫做 Reducer。 </li>
                <li>Reducer 是一个纯函数，它接受 当前 State 和Action作为参数，返回一个新的 State。
                    <pre><code class="lang-js"><span class="hljs-keyword">const</span> reducer = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">state, action</span>) </span>{
<span class="hljs-keyword">return</span> new_state;
};
</code></pre>
                </li>
            </ul>
            <h2 id="t105.编写Redux">5.编写Redux <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t105.%E7%BC%96%E5%86%99Redux"> #
                </a></h2>
            <pre><code class="lang-js">
<span class="hljs-comment">/**
 * 创建一个Redux仓库来保存整个状态树
 * 改变状态树的唯一方法是调用store.dispatch方法
 * 在整个应用中只能有一个仓库
 * 为了指定状态树的各个部分如何响应action的变化，你可能使用combineReducers方法把多个reducer合并为一个单独的reducer
 * 
 * @param {Function} reducer 一个通过当前状态对象和要处理的action返回新的状态树的函数
 * @param {any} [preloadedState] 初始状态。在同构应用中，你可能需要指定它以合并来自服务器的状态，或者从一个以前序列化的用户会话中恢复. 
 * 如果你使用了combineReducers,来从根reducer中产生状态，这必须是一个和combineReducer 的keys相同形状的对象
 * @param {Function} [enhancer] 仓库的enhancer. 你可能需要指定这个去增强仓库的能力以使用第三方的能力比如中间件
 * 时间旅行，持久化等等。redux自带的唯一中间件是applyMiddleware
 * @returns {Store} 是一个Redux仓库让你可以读取状态，派发action并订阅状态变化
 */</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createStore</span>(<span class="hljs-params">reducer,preloadedState,enhancer</span>) </span>{
    <span class="hljs-keyword">if</span> (enhancer) {
        <span class="hljs-keyword">return</span> enhancer(createStore)(reducer,preloadedState);
    }
    <span class="hljs-keyword">let</span> state=preloadedState;
    <span class="hljs-keyword">let</span> listeners=[];
    <span class="hljs-comment">/**
     * 读取仓库管理的状态树
     * @returns {any} 应用当前的状态树
     */</span>
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getState</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-keyword">return</span> state;
    }
    <span class="hljs-comment">/**
     * 增加一个变化监听函数。它将在任何派发动作的时候被调用
     * 状态树的部分数据可能会发生潜在的变化。你可能在那个时候在回调函数中调用getState方法以获取最新的状态。
     * 你可能会在监听函数里调用dispatch方法，它会具备以下注意事项
     * 1. 订阅仅仅在每一次调用每一个dispatch方法时被记录快照
     * 如果你在监听函数被触发的时候订阅或取消订阅的话，这对当前正在处理中的dispatch没有任何效果
     * 尽管如此，在下一次dispatch方法的调用中，不管是不是内嵌，都将使用一个最新的订阅列表
     * 
     * 2.监听函数不应该预期所有的状态变化，因为状态可能在dispatch中被更新多次。 尽管如此，在 dispatch之前注册的订阅者将会以最新的状态调用
     * 
     * @param {*} listener  每一次dispatch时被调用的监听函数
     * @returns {Function} 返回一个可以移除此监听函数的函数
     */</span>
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">subscribe</span>(<span class="hljs-params">listener</span>) </span>{
        listeners.push(listener);
        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
            <span class="hljs-keyword">const</span> index=listeners.indexOf(listener);
            listeners.splice(inddx,<span class="hljs-number">1</span>);
        }
    }

    <span class="hljs-comment">/**
     * 派发一个动作，这是触发状态改变的唯一方式
     * 用来创建仓库的reducer函数将会被调用，参数是当前的状态树和给定的动作。它的返回值将会被当作下一个状态树，所有的监听函数也会被通知
     * 
     * 基本实现中只支持简单动作对象。如果你想要派发一个Promise、一个Observerable、一个thunk或者其它的任何懂爱，你需要把你创建仓库的函数包裹到对应的中间件里。
     * 比如，你可以看一下redux-thunk包。甚至中间件最后通过这个方法将会派发简单对象。
     * 
     * 
     * @param {*} action 一个表示发生了什么的简单对象。保持动作序列化将会是一个好主意，以方便你进行记录和回放用户会话。或者使用时间旅行工具redux-devtools.一个动作必须有一个type属性而且不能是undefine.使用字符串常量表示动作类型将会是个好主意。
     * @returns {object} 为了方便，你派发的相同的动作对象
     * 请注意，如果你使用一个自定义中间件，你可能需要包裹 dispatch去返回别的东西(比如你等待的Promise)
     */</span>
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dispatch</span>(<span class="hljs-params">action</span>) </span>{
        state=reducer(state,action);
        listeners.forEach(<span class="hljs-function"><span class="hljs-params">listener</span>=&gt;</span>listener())
    }
    dispatch({<span class="hljs-attr">type</span>:<span class="hljs-string">'@@redux/INIT'</span>});
    <span class="hljs-keyword">return</span> {
        dispatch,
        subscribe,
        getState
    }
}

</code></pre>
            <h2 id="t116. Counter-Vanilla">6. Counter-Vanilla <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t116.%20Counter-Vanilla"> # </a>
            </h2>
            <pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"value"</span><span class="hljs-attr">0</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"increment"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"decrement"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"incrementIfOdd"</span>&gt;</span>奇数+1/button&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"incrementAsync"</span>&gt;</span>异步+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'../redux'</span>;
<span class="hljs-keyword">const</span> INCREMENT=<span class="hljs-string">'INCREMENT'</span>;
<span class="hljs-keyword">const</span> DECREMENT = <span class="hljs-string">'DECREMENT'</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state=<span class="hljs-number">0</span>,action</span>)</span>{
    <span class="hljs-keyword">switch</span>(action.type){
        <span class="hljs-keyword">case</span> INCREMENT:
            <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span>;
        <span class="hljs-keyword">case</span> DECREMENT:
            <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span>;
        <span class="hljs-keyword">default</span>:
            <span class="hljs-keyword">return</span> state;
    }
}
<span class="hljs-keyword">let</span> store=createStore(reducer);
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'value'</span>).innerHTML=store.getState();
}
store.subscribe(render);
<span class="hljs-built_in">console</span>.log(store.getState());
render();
<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'increment'</span>).addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    store.dispatch({<span class="hljs-attr">type</span>:INCREMENT});
});
<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'decrement'</span>).addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    store.dispatch({<span class="hljs-attr">type</span>:DECREMENT});
});
<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'incrementIfOdd'</span>).addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span>(store.getState()%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)
        store.dispatch({<span class="hljs-attr">type</span>:INCREMENT});
});
<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'incrementAsync'</span>).addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        store.dispatch({<span class="hljs-attr">type</span>:INCREMENT});
    },<span class="hljs-number">1000</span>);
});
</code></pre>
            <h2 id="t126. React Counter">6. React Counter <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t126.%20React%20Counter"> # </a>
            </h2>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{Component} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">'prop-types'</span>;
<span class="hljs-keyword">import</span> counter <span class="hljs-keyword">from</span> <span class="hljs-string">'../reducers'</span>;
<span class="hljs-keyword">import</span> {createStore} <span class="hljs-keyword">from</span> <span class="hljs-string">'../../redux'</span>;
<span class="hljs-keyword">const</span> store=createStore(counter);
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props) {
        <span class="hljs-keyword">super</span>(props);
        <span class="hljs-keyword">this</span>.state={<span class="hljs-attr">value</span>:<span class="hljs-number">0</span>};
    }
    componentDidMount() {
        <span class="hljs-keyword">this</span>.unsubscribe=store.subscribe(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">value</span>:store.getState()}));
    }
    componentWillUnmount() {
        <span class="hljs-keyword">this</span>.unsubscribe();
    }
    render() {
        <span class="hljs-keyword">const</span> {value,onInrement,onDecrement}=<span class="hljs-keyword">this</span>.props;
        <span class="hljs-keyword">return</span> (
            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{this.state.value}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>store.dispatch({type:'INCREMENT'})}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>store.dispatch({type:'DECREMENT'})}&gt;-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{</span>
                    () =&gt;</span> {
                        if (this.state.value%2!=0)
                            store.dispatch({type: 'INCREMENT'})
                    }
                }&gt;IncrementIfOdd<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{</span>
                    () =&gt;</span> {
                        setTimeout(() =&gt; {
                            store.dispatch({type:'INCREMENT'})
                        },1000);
                    }
                }&gt;IncrementAsync<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
        )
    }
}
</code></pre>
            <h2 id="t137.actionCreator优化结构">7.actionCreator优化结构 <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t137.actionCreator%E4%BC%98%E5%8C%96%E7%BB%93%E6%9E%84">
                    # </a></h2>
            <pre><code class="lang-js">├── components
│   └── Counter.js
├── index.js
└── store
    ├── action-types.js
    ├── actions
    │   └── counter.js
    ├── index.js
    └── reducers
        └── counter.js
</code></pre>
            <p>actions.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> types <span class="hljs-keyword">from</span> <span class="hljs-string">'../action-types'</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
    add() {
        <span class="hljs-keyword">return</span> {<span class="hljs-attr">type</span>: types.INCREMENT};
    },
    minus() {
        <span class="hljs-keyword">return</span> {<span class="hljs-attr">type</span>: types.DECREMENT};
    }
}
</code></pre>
            <h2 id="t148.bindActionCreator">8.bindActionCreator <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t148.bindActionCreator"> # </a>
            </h2>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> actions <span class="hljs-keyword">from</span> <span class="hljs-string">'../store/actions/counter'</span>;
<span class="hljs-keyword">import</span> {bindActionCreator} <span class="hljs-keyword">from</span> <span class="hljs-string">'../../redux'</span>;
<span class="hljs-keyword">let</span> newActions=bindActionCreator(actions,store.dispatch);

<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span>=&gt;</span>newActions.add()}&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>
&lt;button onClick={()=&gt;newActions.minus()}&gt;-<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>
</code></pre>
            <pre><code class="lang-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">actions,dispatch</span>) </span>{
    <span class="hljs-keyword">let</span> newActions={};
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> actions) {
        newActions[key]=<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> dispatch(actions[key].apply(<span class="hljs-literal">null</span>,<span class="hljs-built_in">arguments</span>));
    }
    <span class="hljs-keyword">return</span> newActions;
}
</code></pre>
            <h2 id="t159. combineReducers">9. combineReducers <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t159.%20combineReducers"> # </a>
            </h2>
            <pre><code class="lang-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combineReducers</span>(<span class="hljs-params">reducers</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">state={},action</span>) </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(reducers).reduce(<span class="hljs-function">(<span class="hljs-params">newState,key</span>) =&gt;</span> {
            newState[key]=reducers[key](state[key],action);
            <span class="hljs-keyword">return</span> newState;
        },{});
    }
}
</code></pre>
            <h2 id="t1610. react-redux">10. react-redux <a
                    href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html#t1610.%20react-redux"> # </a>
            </h2>
            <p>index.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> Provider <span class="hljs-keyword">from</span> <span class="hljs-string">'./Provider'</span>;
<span class="hljs-keyword">import</span> connect <span class="hljs-keyword">from</span> <span class="hljs-string">'./connect'</span>;
<span class="hljs-keyword">export</span>  {
    Provider,
    connect
}
</code></pre>
            <p>context.js</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">let</span> {Provider,Consumer}=React.createContext();
<span class="hljs-keyword">export</span> {
    Provider,
    Consumer
}
</code></pre>
            <p>Provider</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{Component} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> {Provider <span class="hljs-keyword">as</span> P} <span class="hljs-keyword">from</span> <span class="hljs-string">'./context'</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>{
    render() {
        <span class="hljs-keyword">return</span> (
            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">value</span>=<span class="hljs-string">{{store:this.props.store}}</span>&gt;</span>
                {this.props.children}
            <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span></span>
        )
    }
}
</code></pre>
            <p>connect</p>
            <pre><code class="lang-js"><span class="hljs-keyword">import</span> React,{Component} <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;
<span class="hljs-keyword">import</span> {Consumer} <span class="hljs-keyword">from</span> <span class="hljs-string">'./context'</span>;
<span class="hljs-keyword">import</span> {bindActionCreators} <span class="hljs-keyword">from</span> <span class="hljs-string">'../redux'</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">mapStateToProps,mapDispatchToProps</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Component</span>) </span>{
        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>{
            <span class="hljs-keyword">constructor</span>(props) {
                <span class="hljs-keyword">super</span>(props);
                <span class="hljs-keyword">this</span>.state=mapStateToProps(props.store.getState());
            }
            componentDidMount() {
                <span class="hljs-keyword">this</span>.unsubscribe=<span class="hljs-keyword">this</span>.props.store.subscribe(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
                    <span class="hljs-keyword">this</span>.setState(mapStateToProps(<span class="hljs-keyword">this</span>.props.store.getState()));
                });
            }
            componentWillUnmount() {
                <span class="hljs-keyword">this</span>.unsubscribe();
            }
            render() {
                <span class="hljs-keyword">let</span> actions={};
                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> mapDispatchToProps==<span class="hljs-string">'object'</span>) {
                    actions=bindActionCreators(mapDispatchToProps,<span class="hljs-keyword">this</span>.props.store.dispatch);
                } <span class="hljs-keyword">else</span> {
                    actions=mapDispatchToProps(<span class="hljs-keyword">this</span>.props.store.dispatch);
                }
                <span class="hljs-keyword">return</span> &lt;Component {...this.state} {...actions}/&gt;
            }
        }
        return () =&gt; (
            &lt;Consumer&gt;
                {
                    value =&gt; (
                        &lt;Proxy store={value.store}/&gt;
                    )
                }
            &lt;/Consumer&gt;
        )
    }
}
</code></pre>

            <div class="copyright">Powered by <a href="https://github.com/jaywcjlove/idoc" target="_blank">idoc</a>.
                Dependence <a href="https://nodejs.org/">Node.js</a> run.</div>
        </div>

    </div>

    <script src="./28.redux-1_files/jquery.js"></script>
    <script>
        $('.warpper .page-toc ul ul li a').on('click', function () {
            $('.warpper .page-toc ul ul li a').removeClass('my-active')
            $(this).addClass('my-active')
        })

        $('.logo').on('mouseenter', function () {
            $('.nav').height('400px');
        })
        $('.nav').on('mouseleave', function () {
            $('.nav').height('80px');
        })
        $('.logo').on('click', function () {
            $('.nav').css('display', 'none');
            $('.warpper').css('padding', '0px');
        })
        // if (!$('.understand-me').length) {
        //   var bar = $(window).height() - $('.navbar ').height() - $('.page-toc').position().top;
        //   var count = bar / 26 / 2;
        //   var barHeight = $('.page-toc').outerHeight();
        //   $('.page-toc li').eq(0).children('a').addClass('red');
        //   var arr = [];
        //   $("h1,h2,h3,h4,h5,h6").each(function () {
        //     arr.push($(this).position().top);
        //   });
        //   var timer
        //   function dark() {
        //     clearTimeout(timer)
        //      timer = setTimeout(function () {
        //      var top = Math.abs($('.page-toc > ul').position().top);
        //      var cur = $('.content').scrollTop();
        //      for (var i = arr.length; i >= 0; i--) {
        //        if (arr[i] <= cur) {
        //          break;
        //        }
        //      }
        //      if (i === -1) {
        //        i = 0;
        //      }
        //      $('.page-toc li a').removeClass('red');
        //      $('.page-toc li').eq(i).children('a').addClass('red');
        //      let height = $('.page-toc li').eq(i).position().top-$('.page-toc').height(); // 如果当前的offset出去了 回到中间可好？
        //      $('.page-toc').scrollTop(height+$('.page-toc').height()/2);
        //    },200)
        //   }

        //   $('.content').on('scroll', dark);
        // }
    </script>
    <style>
        /* ::-webkit-scrollbar{width:14px;}
    ::-webkit-scrollbar-track{background-color:transparent;}
    ::-webkit-scrollbar-thumb{background-color:transparent;}
    ::-webkit-scrollbar-thumb:hover {background-color:transparent}
    ::-webkit-scrollbar-thumb:active {background-color:transparent} */

        .page-toc>ul .red {
            background: #f3f3f3;
            z-index: 1;
            border-left: 3px solid #009a61;
            -webkit-transition: all .2s ease;
            transition: all .2s ease;
            color: #000
        }
    </style>


</body>

</html>