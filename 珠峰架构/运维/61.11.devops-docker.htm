<!DOCTYPE html>
<!-- saved from url=(0070)http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>珠峰架构师成长计划</title>
    <link rel="stylesheet" type="text/css" href="./61.11.devops-docker_files/main.css">
<style type="text/css" abt="234"></style><script>//console.log('a')
</script><script>//remove 17173 video ad
doAdblock();
function doAdblock(){
    (function() {
        function A() {}
        A.prototype = {
            rules: {
                '17173_in':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_in_20150522.swf"
                },
                '17173_out':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_out_20150522.swf"
                },
                '17173_live':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_stream_20150522.swf"
                },
                '17173_live_out':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                    'replace':"http://swf.adtchrome.com/17173.out.Live.swf"
                }
            },
            _done: null,
            get done() {
                if(!this._done) {
                    this._done = new Array();
                }
                return this._done;
            },
            addAnimations: function() {
                var style = document.createElement('style');
                style.type = 'text/css';
                style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                document.getElementsByTagName('head')[0].appendChild(style);
            },
            animationsHandler: function(e) {
                if(e.animationName === 'playerInserted') {
                    this.replace(e.target);
                }
            },
            replace: function(elem) {
                if(this.done.indexOf(elem) != -1) return;
                this.done.push(elem);
                var player = elem.data || elem.src;
                if(!player) return;
                var i, find, replace = false;
                for(i in this.rules) {
                    find = this.rules[i]['find'];
                    if(find.test(player)) {
                        replace = this.rules[i]['replace'];
                        if('function' === typeof this.rules[i]['preHandle']) {
                            this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                        }else{
                            this.reallyReplace.bind(this, elem, find, replace)();
                        }
                        break;
                    }
                }
            },
            reallyReplace: function(elem, find, replace) {
                elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem.src = elem.src.replace(find, replace)) && (elem.style.display = 'block'));
                var b = elem.querySelector("param[name='movie']");
                this.reloadPlugin(elem);
            },
            reloadPlugin: function(elem) {
                var nextSibling = elem.nextSibling;
                var parentNode = elem.parentNode;
                parentNode.removeChild(elem);
                var newElem = elem.cloneNode(true);
                this.done.push(newElem);
                if(nextSibling) {
                    parentNode.insertBefore(newElem, nextSibling);
                } else {
                    parentNode.appendChild(newElem);
                }
            },
            init: function() {
                var handler = this.animationsHandler.bind(this);
                document.body.addEventListener('webkitAnimationStart', handler, false);
                document.body.addEventListener('msAnimationStart', handler, false);
                document.body.addEventListener('oAnimationStart', handler, false);
                document.body.addEventListener('animationstart', handler, false);
                this.addAnimations();
            }
        };
        new A().init();
    })();
}
//remove baidu search ad
if(document.URL.indexOf('www.baidu.com') >= 0){
    if(document && document.getElementsByTagName && document.getElementById && document.body){
        var aa = function(){
            var all = document.body.querySelectorAll("#content_left div,#content_left table");
            for(var i = 0; i < all.length; i++){
                if(/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))){all[i].style.display= "none";all[i].style.visibility='hidden';}
            }
            all = document.body.querySelectorAll('.result.c-container[id="1"]');
            //if(all.length == 1) return;
            for(var i = 0; i < all.length; i++){
                if(all[i].innerHTML && all[i].innerHTML.indexOf('广告')>-1){
                    all[i].style.display= "none";all[i].style.visibility='hidden';
                }
            }
        }
        aa();
        document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified',aa)
    };
}
//remove sohu video ad
if (document.URL.indexOf("tv.sohu.com") >= 0){
    if (document.cookie.indexOf("fee_status=true")==-1){document.cookie='fee_status=true'};
}
//remove 56.com video ad
if (document.URL.indexOf("56.com") >= 0){
    if (document.cookie.indexOf("fee_status=true")==-1){document.cookie='fee_status=true'};
}
//fore iqiyi enable html5 player function
if (document.URL.indexOf("iqiyi.com") >= 0){
    if (document.cookie.indexOf("player_forcedType=h5_VOD")==-1){
        document.cookie='player_forcedType=h5_VOD'
        if(localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime)<60000){
            console.log('no reload')
        }else{
            location.reload()
            localStorage.reloadTime = Date.now();
        }
    }
}
</script><style type="text/css">object,embed{                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;                -o-animation-duration:.001s;-o-animation-name:playerInserted;                animation-duration:.001s;animation-name:playerInserted;}                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}</style></head>
<body>
<div class="nav" style="height: 81px;">
    <div class="logo">
        
            珠峰架构师成长计划
        
    </div>
<ul><li><a href="http://www.zhufengpeixun.cn/architecture/index.html">0.Async</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/0.editor.html">0.editor</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/0.module.html">0.module</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/1.ES2015.html">1.ES2015</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/2.Promise.html">2.Promise</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/3.Node.html">3.Node</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/4.NodeInstall.html">4.NodeInstall</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/5.REPL.html">5.REPL</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/6.NodeCore.html">6.NodeCore</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/7.module&amp;NPM.html">7.module&amp;NPM</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/8.Encoding.html">8.Encoding</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/9.Buffer.html">9.Buffer</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/10.fs.html">10.fs</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/11.Stream-1.html">11.Stream-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/11.Stream-2.html">11.Stream-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/11.Stream-3.html">11.Stream-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/11.Stream-4.html">11.Stream-4</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/12-Network-2.html">12-Network-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/12.NetWork-3.html">12.NetWork-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/12.Network-1.html">12.Network-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/13.tcp.html">13.tcp</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/14.http-1.html">14.http-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/14.http-2.html">14.http-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/15.compress.html">15.compress</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/16.crypto.html">16.crypto</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/17.process.html">17.process</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/18.yargs.html">18.yargs</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/19.cache.html">19.cache</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/20.action.html">20.action</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/21.https.html">21.https</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/22.cookie.html">22.cookie</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/23.session.html">23.session</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/24.express-1.html">24.express-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/24.express-2.html">24.express-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/24.express-3.html">24.express-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/24.express-4.html">24.express-4</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/25.koa-1.html">25.koa-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-1-basic.html">26.webpack-1-basic</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-2-optimize.html">26.webpack-2-optimize</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-3.tapable.html">26.webpack-3.tapable</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-4-AST.html">26.webpack-4-AST</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-5-source.html">26.webpack-5-source</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-6-loader.html">26.webpack-6-loader</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-7-plugin.html">26.webpack-7-plugin</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-8-hand.html">26.webpack-8-hand</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-1.html">27.react-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-2.html">27.react-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-3.html">27.react-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-4-immutable.html">27.react-4-immutable</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-5-react-dom-diff.html">27.react-5-react-dom-diff</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-6.html">27.react-6</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.react-mobx.html">28.react-mobx</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-0.html">28.redux-0</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html">28.redux-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-2-%E4%B8%AD%E9%97%B4%E4%BB%B6.html">28.redux-2-中间件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-jwt-back.html">28.redux-jwt-back</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-jwt-front.html">28.redux-jwt-front</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-1.html">29.mongodb-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-2.html">29.mongodb-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-3.html">29.mongodb-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-4.html">29.mongodb-4</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-5.html">29.mongodb-5</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-6.html">29.mongodb-6</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-1-mysql.html">30.cms-1-mysql</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-2-mysql.html">30.cms-2-mysql</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-3-mysql.html">30.cms-3-mysql</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-4-nunjucks.html">30.cms-4-nunjucks</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-5-mock.html">30.cms-5-mock</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-6-egg.html">30.cms-6-egg</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-7-api.html">30.cms-7-api</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-8-roadhog.html">30.cms-8-roadhog</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-9-yaml.html">30.cms-9-yaml</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-10-umi.html">30.cms-10-umi</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-11-saga.html">30.cms-11-saga</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-12-dva.html">30.cms-12-dva</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-13-dva-ant.html">30.cms-13-dva-ant</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-14-front.html">30.cms-14-front</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-15-deploy.html">30.cms-15-deploy</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html">31.dva</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/31.saga.html">31.saga</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/33.redis.html">33.redis</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/34.unittest.html">34.unittest</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/35.jwt.html">35.jwt</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/36.websocket-1.html">36.websocket-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/36.websocket-2.html">36.websocket-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat-api-1.html">38.chat-api-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat-api-2.html">38.chat-api-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat-3.html">38.chat-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat-api-3.html">38.chat-api-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat.html">38.chat</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat2.html">38.chat2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat2.html">38.chat2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/39.crawl-0.html">39.crawl-0</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/39.crawl-1.html">39.crawl-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/39.crawl-2.html">39.crawl-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/40.deploy.html">40.deploy</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/41.safe.html">41.safe</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/42.test.html">42.test</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/43.nginx.html">43.nginx</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/44.enzyme.html">44.enzyme</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/45.docker.html">45.docker</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/46.elastic.html">46.elastic</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/47.oauth.html">47.oauth</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/48.wxpay.html">48.wxpay</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/index.html">index</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/51.typescript.html">51.typescript</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/52.UML.html">52.UML</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/53.design.html">53.design</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/index.html">index</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/54.linux.html">54.linux</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/57.ts.html">57.ts</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/56.react-ssr.html">56.react-ssr</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/58.ts_react.html">58.ts_react</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/59.ketang.html">59.ketang</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/59.ketang2.html">59.ketang2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react.html">60.react</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html">60.react-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.1.devops-linux.html">61.1.devops-linux</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.2.devops-vi.html">61.2.devops-vi</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.3.devops-user.html">61.3.devops-user</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.4.devops-auth.html">61.4.devops-auth</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.5.devops-shell.html">61.5.devops-shell</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.6.devops-install.html">61.6.devops-install</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.7.devops-system.html">61.7.devops-system</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.8.devops-service.html">61.8.devops-service</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.9.devops-network.html">61.9.devops-network</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.10.devops-nginx.html">61.10.devops-nginx</a></li><li class="active"><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html">61.11.devops-docker</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.12.devops-jekins.html">61.12.devops-jekins</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.13.devops-groovy.html">61.13.devops-groovy</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.14.devops-php.html">61.14.devops-php</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.15.devops-java.html">61.15.devops-java</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.16.devops-node.html">61.16.devops-node</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/62.1.react-basic.html">62.1.react-basic</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html">62.2.react-state</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/62.3.react-high.html">62.3.react-high</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/62.4.react-hooks.html">62.4.react-hooks</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/63.1.redux.html">63.1.redux</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/63.2.redux-middleware.html">63.2.redux-middleware</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/63.3.redux-saga.html">63.3.redux-saga</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/63.4.redux-saga-hand.html">63.4.redux-saga-hand</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/64.1.router.html">64.1.router</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/64.2.router-connected.html">64.2.router-connected</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/65.1.typescript.html">65.1.typescript</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/65.2.typescript.html">65.2.typescript</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/65.3.typescript.html">65.3.typescript</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/65.4.antd.html">65.4.antd</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-1.vue-base.html">66-1.vue-base</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-2.vue-component.html">66-2.vue-component</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-3.vue-cli3.0.html">66-3.vue-cli3.0</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-4.$message%E7%BB%84%E4%BB%B6.html">66-4.$message组件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-5.Form%E7%BB%84%E4%BB%B6.html">66-5.Form组件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-6.tree.html">66-6.tree</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-7.vue-router-apply.html">66-7.vue-router-apply</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-8.axios-apply.html">66-8.axios-apply</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-9.vuex-apply.html">66-9.vuex-apply</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-10.jwt-vue.html">66-10.jwt-vue</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-11.vue-ssr.html">66-11.vue-ssr</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-12.nuxt-apply.html">66-12.nuxt-apply</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-13.pwa.html">66-13.pwa</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-14.vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html">66-14.vue单元测试</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-15.%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C.html">66-15.权限校验</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/67-1-network.html">67-1-network</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/68-2-wireshark.html">68-2-wireshark</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/7.npm2.html">7.npm2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/31.cms-13-dva-antdesign.html">31.cms-13-dva-antdesign</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html">69-hooks</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/70-deploy.html">70-deploy</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.17.devops-k8s.html">61.17.devops-k8s</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html">60.react-2</a></li></ul></div>


<div class="warpper">

    <div class="page-toc">
        <ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t01.%20%E5%B8%83%E7%BD%B2%E8%BD%AF%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98">1. 布署软件的问题</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t12.%20%E8%99%9A%E6%8B%9F%E6%9C%BA">2. 虚拟机</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t23.%20Linux%20%E5%AE%B9%E5%99%A8">3. Linux 容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t34.%20Docker%20%E6%98%AF%E4%BB%80%E4%B9%88">4. Docker 是什么</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t45.%20%20docker%E5%92%8CKVM">5.  docker和KVM</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t56.%20%20docker%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">6.  docker应用场景</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t67.%20Docker%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">7. Docker 体系结构</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t78.%20Docker%E5%86%85%E9%83%A8%E7%BB%84%E4%BB%B6">8. Docker内部组件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t89.%20docker%E5%AE%89%E8%A3%85">9. docker安装</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t99.1%20%E5%AE%89%E8%A3%85">9.1 安装</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t109.2%20%E5%90%AF%E5%8A%A8">9.2 启动</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t119.3%20%E6%9F%A5%E7%9C%8Bdocker%E7%89%88%E6%9C%AC">9.3 查看docker版本</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t129.4%20%E5%8D%B8%E8%BD%BD">9.4 卸载</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1310.%20Docker%E6%9E%B6%E6%9E%84">10. Docker架构</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1411.%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F">11.阿里云加速</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1512.%20image%E9%95%9C%E5%83%8F">12. image镜像</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1612.1%20%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F">12.1 查看镜像</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1712.2%20%E6%9F%A5%E6%89%BE%E9%95%9C%E5%83%8F">12.2 查找镜像</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1812.3%20%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F">12.3 拉取镜像</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1912.4%20%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F">12.4 删除镜像</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2013.%20%E5%AE%B9%E5%99%A8">13. 容器</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2113.1%20%E5%91%BD%E4%BB%A4">13.1 命令</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2213.2%20%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8">13.2 启动容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2313.3%20%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8">13.3 查看容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2413.4%20%E8%BF%90%E8%A1%8C%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%9A%84%E5%AE%B9%E5%99%A8">13.4 运行交互式的容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2513.5%20%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8">13.5 后台运行容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2613.6%20kill">13.6 kill</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2713.7%20%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8">13.7 删除容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2813.8%20%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8">13.8 启动容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2913.9%20%E5%81%9C%E6%AD%A2%E5%AE%B9%E5%99%A8">13.9 停止容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3013.10%20%E8%BF%9B%E5%85%A5%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8">13.10 进入一个容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3113.11%20%E8%BF%9B%E5%85%A5%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8">13.11 进入一个正在运行中的容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3213.12%20%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6">13.12 拷贝文件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3313.13%20%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4">13.13 自动删除</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3414.%20commit%E5%88%B6%E4%BD%9C%E4%B8%AA%E6%80%A7%E5%8C%96%E9%95%9C%E5%83%8F">14. commit制作个性化镜像</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3515.%20%E5%88%B6%E4%BD%9CDockerfile">15. 制作Dockerfile</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3615.1%20%E7%BC%96%E5%86%99Dockerfile">15.1 编写Dockerfile</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3715.2%20.dockerignore">15.2 .dockerignore</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3815.3%20Dockerfile">15.3 Dockerfile</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3915.3.1%20%E5%AE%89%E8%A3%85node">15.3.1 安装node</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4015.3.2%20%E5%AE%89%E8%A3%85express%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E5%99%A8">15.3.2 安装express项目生成器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4115.3.3%20%20Dockerfile">15.3.3  Dockerfile</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4215.4%20%E5%88%9B%E5%BB%BAimage">15.4 创建image</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4315.5%20%E4%BD%BF%E7%94%A8%E6%96%B0%E7%9A%84%E9%95%9C%E5%83%8F%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8">15.5 使用新的镜像运行容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4415.6%20CMD">15.6 CMD</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4515.7%20%E5%8F%91%E5%B8%83image">15.7 发布image</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4616.%20%E6%95%B0%E6%8D%AE%E7%9B%98">16. 数据盘</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4716.1%20volume">16.1 volume</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4816.1.1%20%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%8D%B7">16.1.1 创建数据卷</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4916.1.2%20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%8D%B7">16.1.2 删除数据卷</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5016.1.3%20%20%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E7%9B%98">16.1.3  管理数据盘</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5116.2%20Bind%20mounts">16.2 Bind mounts</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5216.2.1%20%E9%BB%98%E8%AE%A4%E6%95%B0%E6%8D%AE%E7%9B%98">16.2.1 默认数据盘</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5316.2.2%20%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E7%9B%98">16.2.2 指定数据盘</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5416.2.3%20%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E7%9B%98%E5%AE%B9%E5%99%A8">16.2.3 指定数据盘容器</a></li></ul></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5517.%20%E7%BD%91%E7%BB%9C">17. 网络</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5617.1%20bridge(%E6%A1%A5%E6%8E%A5)">17.1 bridge(桥接)</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5717.2%20none">17.2 none</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5817.3%20host">17.3 host</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5917.4%20%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84">17.4 端口映射</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6017.5%20%E6%8C%87%E5%90%91%E4%B8%BB%E6%9C%BA%E7%9A%84%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3">17.5 指向主机的随机端口</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6117.6%20%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C">17.6 创建自定义网络</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6217.7%20%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%8C%87%E5%AE%9A%E7%BD%91%E7%BB%9C">17.7 连接到指定网络</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6317.8%20%E7%A7%BB%E9%99%A4%E7%BD%91%E7%BB%9C">17.8 移除网络</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6418.compose">18.compose</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6518.1%20%E5%AE%89%E8%A3%85compose">18.1 安装compose</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6618.2%20%E7%BC%96%E5%86%99docker-compose.yml">18.2 编写docker-compose.yml</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6718.3%20%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1">18.3 启动服务</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6818.4%20%E7%BD%91%E7%BB%9C%E4%BA%92ping">18.4 网络互ping</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6918.5%20%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%8D%B7">18.5 配置数据卷</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7019.%20node%E9%A1%B9%E7%9B%AE">19. node项目</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7119.1%20%E6%9C%8D%E5%8A%A1%E5%88%86%E7%B1%BB">19.1 服务分类</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7219.2%20app%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">19.2 app目录结构</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7319.2.1%20docker-compose.yml">19.2.1 docker-compose.yml</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7419.2.2%20server.js">19.2.2 server.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7519.2.3%20package.json">19.2.3 package.json</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7619.2.4%20images/node/Dockerfile">19.2.4 images/node/Dockerfile</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7719.2.5%20images/nginx/config/default.conf">19.2.5 images/nginx/config/default.conf</a></li></ul></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7820.%20%E6%90%AD%E5%BB%BALNMP%E7%BD%91%E7%AB%99">20. 搭建LNMP网站</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7920.1%20%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99">20.1 关闭防火墙</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8020.2%20%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C">20.2 创建自定义网络</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8120.3%20%E5%88%9B%E5%BB%BAmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%B9%E5%99%A8">20.3 创建mysql数据库容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8220.4%20%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93">20.4 创建数据库</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8320.5%20%E5%88%9B%E5%BB%BAnginx+PHP%E5%AE%B9%E5%99%A8">20.5 创建nginx+PHP容器</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8420.6%20wordpress">20.6 wordpress</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8521.%20%E5%88%B6%E4%BD%9C%E4%B8%AA%E6%80%A7%E5%8C%96%E9%95%9C%E5%83%8F">21. 制作个性化镜像</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8621.1%20%E6%90%AD%E5%BB%BAnginx%E9%95%9C%E5%83%8F">21.1 搭建nginx镜像</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8721.1.1%20%E4%B8%8B%E8%BD%BDnginx">21.1.1 下载nginx</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8821.1.2%20%E9%87%8D%E5%90%AFdocker">21.1.2 重启docker</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8921.1.3%20%E7%BC%96%E5%86%99default.conf">21.1.3 编写default.conf</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9021.1.4%20%E7%BC%96%E5%86%99Dockerfile">21.1.4 编写Dockerfile</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9121.1.5%20%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F">21.1.5 打包镜像</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9221.1.6%20%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F">21.1.6 使用镜像</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9321.2%20%E6%90%AD%E5%BB%BAphp%E9%95%9C%E5%83%8F">21.2 搭建php镜像</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9421.2.1%20%E4%B8%8B%E8%BD%BDphp">21.2.1 下载php</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9521.2.2%20Dockerfile">21.2.2 Dockerfile</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9621.1.3%20%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F">21.1.3 打包镜像</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9721.1.4%20%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F">21.1.4 使用镜像</a></li></ul></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9822.%20%E5%B8%83%E7%BD%B2Java%E7%BD%91%E7%AB%99">22. 布署Java网站</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9922.1%20%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85">22.1 下载安装包</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t10022.2%20%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6">22.2 镜像文件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t10122.3%20%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F">22.3 打包镜像</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t10222.4%20%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8">22.4 启动容器</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t10320.%20%E5%8F%82%E8%80%83">20. 参考</a></li></ul>
    </div>
    
    <div class="content markdown-body">
        <h2 id="t01. 布署软件的问题">1. 布署软件的问题 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t01.%20%E5%B8%83%E7%BD%B2%E8%BD%AF%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98"> # </a></h2>
<ul>
<li>如果想让软件运行起来要保证操作系统的设置，各种库和组件的安装都是正确的</li>
<li>热带鱼&amp;冷水鱼 冷水鱼适应的水温在5-30度，而热带鱼只能适应22-30度水温，低于22度半小时就冻死了</li>
</ul>
<h2 id="t12. 虚拟机">2. 虚拟机 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t12.%20%E8%99%9A%E6%8B%9F%E6%9C%BA"> # </a></h2>
<ul>
<li>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统<ul>
<li>资源占用多</li>
<li>冗余步骤多</li>
<li>启动速度慢</li>
</ul>
</li>
</ul>
<h2 id="t23. Linux 容器">3. Linux 容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t23.%20Linux%20%E5%AE%B9%E5%99%A8"> # </a></h2>
<ul>
<li>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</li>
<li>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。<ul>
<li>启动快</li>
<li>资源占用少</li>
<li>体积小</li>
</ul>
</li>
</ul>
<h2 id="t34. Docker 是什么">4. Docker 是什么 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t34.%20Docker%20%E6%98%AF%E4%BB%80%E4%B9%88"> # </a></h2>
<ul>
<li>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</li>
<li>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样</li>
</ul>
<h2 id="t45.  docker和KVM">5.  docker和KVM <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t45.%20%20docker%E5%92%8CKVM"> # </a></h2>
<ul>
<li>启动时间 <ul>
<li>Docker秒级启动</li>
<li>KVM分钟级启动</li>
</ul>
</li>
<li>轻量级 容器镜像通常以M为单位，虚拟机以G为单位，容器资源占用小，要比虚拟要部署更快速<ul>
<li>容器共享宿主机内核，系统级虚拟化，占用资源少，容器性能基本接近物理机</li>
<li>虚拟机需要虚拟化一些设备，具有完整的OS,虚拟机开销大，因而降低性能，没有容器性能好</li>
</ul>
</li>
<li>安全性<ul>
<li>由于共享宿主机内核，只是进程隔离，因此隔离性和稳定性不如虚拟机，容器具有一定权限访问宿主机内核，存在一下安全隐患</li>
</ul>
</li>
<li>使用要求<ul>
<li>KVM基于硬件的完全虚拟化，需要硬件CPU虚拟化技术支持</li>
<li>容器共享宿主机内核，可运行在主机的Linux的发行版，不用考虑CPU是否支持虚拟化技术</li>
</ul>
</li>
</ul>
<h2 id="t56.  docker应用场景">6.  docker应用场景 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t56.%20%20docker%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"> # </a></h2>
<ul>
<li>节省项目环境部署时间<ul>
<li>单项目打包</li>
<li>整套项目打包</li>
<li>新开源技术</li>
</ul>
</li>
<li>环境一致性</li>
<li>持续集成</li>
<li>微服务</li>
<li>弹性伸缩</li>
</ul>
<h2 id="t67. Docker 体系结构">7. Docker 体系结构 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t67.%20Docker%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84"> # </a></h2>
<ul>
<li>containerd 是一个守护进程，使用runc管理容器，向Docker Engine提供接口</li>
<li>shim 只负责管理一个容器</li>
<li>runC是一个轻量级工具，只用来运行容器</li>
</ul>
<p><img src="./61.11.devops-docker_files/dockerarch.png" alt="dockerarch"></p>
<h2 id="t78. Docker内部组件">8. Docker内部组件 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t78.%20Docker%E5%86%85%E9%83%A8%E7%BB%84%E4%BB%B6"> # </a></h2>
<ul>
<li><code>namespaces</code> 命名空间，Linux内核提供的一种对进程资源隔离的机制，例如进程、网络、挂载等资源</li>
<li><code>cgroups</code> 控制组,linux内核提供的一种限制进程资源的机制，例如cpu 内存等资源</li>
<li><code>unonFS</code> 联合文件系统，支持将不同位置的目录挂载到同一虚拟文件系统，形成一种分层的模型</li>
</ul>
<h2 id="t89. docker安装">9. docker安装 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t89.%20docker%E5%AE%89%E8%A3%85"> # </a></h2>
<ul>
<li>docker分为企业版(EE)和社区版(CE)</li>
<li><a href="https://docs.docker.com/install/linux/docker-ce/centos/">docker-ce</a></li>
<li><a href="https://hub.docker.com/">hub.docker</a></li>
</ul>
<h3 id="t99.1 安装">9.1 安装 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t99.1%20%E5%AE%89%E8%A3%85"> # </a></h3>
<pre><code class="lang-js">yum install -y yum-utils   device-mapper-persistent-data   lvm2
yum-config-manager     --add-repo     https:<span class="hljs-comment">//download.docker.com/linux/centos/docker-ce.repo</span>
yum install docker-ce docker-ce-cli containerd.io
</code></pre>
<h3 id="t109.2 启动">9.2 启动 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t109.2%20%E5%90%AF%E5%8A%A8"> # </a></h3>
<pre><code class="lang-js">systemctl start docker
</code></pre>
<h3 id="t119.3 查看docker版本">9.3 查看docker版本 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t119.3%20%E6%9F%A5%E7%9C%8Bdocker%E7%89%88%E6%9C%AC"> # </a></h3>
<pre><code class="lang-js">$ docker version
$ docker info
</code></pre>
<h3 id="t129.4 卸载">9.4 卸载 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t129.4%20%E5%8D%B8%E8%BD%BD"> # </a></h3>
<pre><code class="lang-js">docker info
yum remove docker
rm -rf /<span class="hljs-keyword">var</span>/lib/docker
</code></pre>
<h2 id="t1310. Docker架构">10. Docker架构 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1310.%20Docker%E6%9E%B6%E6%9E%84"> # </a></h2>
<p><img src="./61.11.devops-docker_files/docker-arch.jpg" alt="docker"></p>
<h2 id="t1411.阿里云加速">11.阿里云加速 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1411.%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F"> # </a></h2>
<ul>
<li><a href="https://dev.aliyun.com/search.html">镜像仓库</a></li>
<li><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">镜像加速器</a></li>
</ul>
<pre><code class="lang-js">sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  "registry-mirrors": ["https://fwvjnv59.mirror.aliyuncs.com"]
}
EOF
# 重载所有修改过的配置文件
sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>
<h2 id="t1512. image镜像">12. image镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1512.%20image%E9%95%9C%E5%83%8F"> # </a></h2>
<ul>
<li>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器</li>
<li>image 文件可以看作是容器的模板</li>
<li>Docker 根据 image 文件生成容器的实例</li>
<li>同一个 image 文件，可以生成多个同时运行的容器实例</li>
<li>镜像不是一个单一的文件，而是有多层</li>
<li>容器其实就是在镜像的最上面加了一层读写层，在运行容器里做的任何文件改动，都会写到这个读写层里。如果容器删除了，最上面的读写层也就删除了，改动也就丢失了</li>
<li>我们可以通过<code>docker history &lt;ID/NAME&gt;</code> 查看镜像中各层内容及大小，每层对应着<code>Dockerfile</code>中的一条指令</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">语法</th>
<th style="text-align:left">案例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ls</td>
<td style="text-align:left">查看全部镜像</td>
<td style="text-align:left">docker image ls</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">search</td>
<td style="text-align:left">查找镜像</td>
<td style="text-align:left">docker search [imageName]</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">history</td>
<td style="text-align:left">查看镜像历史</td>
<td style="text-align:left">docker history [imageName]</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">inspect</td>
<td style="text-align:left">显示一个或多个镜像详细信息</td>
<td style="text-align:left">docker inspect [imageName]</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">pull</td>
<td style="text-align:left">拉取镜像</td>
<td style="text-align:left">docker pull [imageName]</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">push</td>
<td style="text-align:left">推送一个镜像到镜像仓库</td>
<td style="text-align:left">docker push [imageName]</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">rmi</td>
<td style="text-align:left">删除镜像</td>
<td style="text-align:left">docker rmi [imageName] docker image rmi 2</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">prune</td>
<td style="text-align:left">移除未使用的镜像，没有标记或补任何容器引用</td>
<td style="text-align:left">docker image prune</td>
<td style="text-align:left">docker image prune</td>
</tr>
<tr>
<td style="text-align:left">tag</td>
<td style="text-align:left">标记本地镜像，将其归入某一仓库</td>
<td style="text-align:left">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</td>
<td style="text-align:left">docker tag centos:7 zhangrenyang/centos:v1</td>
</tr>
<tr>
<td style="text-align:left">export</td>
<td style="text-align:left">将容器文件系统作为一个tar归档文件导出到STDOUT</td>
<td style="text-align:left">docker export [OPTIONS] CONTAINER</td>
<td style="text-align:left">docker export -o hello-world.tar b2712f1067a3</td>
</tr>
<tr>
<td style="text-align:left">import</td>
<td style="text-align:left">导入容器快照文件系统tar归档文件并创建镜像</td>
<td style="text-align:left">docker import [OPTIONS] file/URL/- [REPOSITORY[:TAG]]</td>
<td style="text-align:left">docker import hello-world.tar</td>
</tr>
<tr>
<td style="text-align:left">save</td>
<td style="text-align:left">将指定镜像保存成<code>tar</code>文件</td>
<td style="text-align:left">docker save [OPTIONS] IMAGE [IMAGE...]</td>
<td style="text-align:left">docker save -o hello-world.tar hello-world:latest</td>
</tr>
<tr>
<td style="text-align:left">load</td>
<td style="text-align:left">加载tar文件并创建镜像</td>
<td style="text-align:left"></td>
<td style="text-align:left">docker load -i hello-world.tar</td>
</tr>
<tr>
<td style="text-align:left">build</td>
<td style="text-align:left">根据Dockerfile构建镜像</td>
<td style="text-align:left">docker build [OPTIONS] PATH / URL / -</td>
<td style="text-align:left">docker build -t zf/ubuntu:v1 .</td>
</tr>
</tbody>
</table>
<ul>
<li>用户既可以使用 <code>docker load</code> 来导入镜像存储文件到本地镜像库，也可以使用 <code>docker import</code> 来导入一个容器快照到本地镜像库</li>
<li>这两者的区别在于容器(import)快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像(load)存储文件将保存完整记录，体积也要大</li>
<li>此外，从容器(import)快照文件导入时可以重新指定标签等元数据信息</li>
</ul>
<h3 id="t1612.1 查看镜像">12.1 查看镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1612.1%20%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F"> # </a></h3>
<pre><code class="lang-js">docker image ls
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">REPOSITORY</td>
<td style="text-align:left">仓库地址</td>
</tr>
<tr>
<td style="text-align:left">TAG</td>
<td style="text-align:left">标签</td>
</tr>
<tr>
<td style="text-align:left">IMAGE_ID</td>
<td style="text-align:left">镜像ID</td>
</tr>
<tr>
<td style="text-align:left">CREATED</td>
<td style="text-align:left">创建时间</td>
</tr>
<tr>
<td style="text-align:left">SIZE</td>
<td style="text-align:left">镜像大小</td>
</tr>
</tbody>
</table>
<h3 id="t1712.2 查找镜像">12.2 查找镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1712.2%20%E6%9F%A5%E6%89%BE%E9%95%9C%E5%83%8F"> # </a></h3>
<pre><code class="lang-js">docker search ubuntu
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NAME</td>
<td style="text-align:left">名称</td>
</tr>
<tr>
<td style="text-align:left">DESCRIPTION</td>
<td style="text-align:left">描述</td>
</tr>
<tr>
<td style="text-align:left">STARTS</td>
<td style="text-align:left">星星的数量</td>
</tr>
<tr>
<td style="text-align:left">OFFICIAL</td>
<td style="text-align:left">是否官方源</td>
</tr>
</tbody>
</table>
<h3 id="t1812.3 拉取镜像">12.3 拉取镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1812.3%20%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F"> # </a></h3>
<pre><code class="lang-js">docker  pull docker.io/hello-world
</code></pre>
<ul>
<li>docker image pull是抓取 image 文件的命令</li>
<li>docker.io/hello-world是 image 文件在仓库里面的位置，其中<code>docker.io</code>是 image的作者，hello-world是 image 文件的名字</li>
<li>Docker 官方提供的 image 文件，都放在<code>docker.io</code>组里面，所以它的是默认组，可以省略 <code>docker image pull hello-world</code></li>
</ul>
<h3 id="t1912.4 删除镜像">12.4 删除镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t1912.4%20%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F"> # </a></h3>
<pre><code class="lang-js">docker rmi  hello-world
</code></pre>
<h2 id="t2013. 容器">13. 容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2013.%20%E5%AE%B9%E5%99%A8"> # </a></h2>
<ul>
<li><code>docker  run</code> 命令会从 <code>image</code> 文件，生成一个正在运行的容器实例。</li>
<li><code>docker container run</code>命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取</li>
<li>输出提示以后，hello world就会停止运行，容器自动终止。</li>
<li>有些容器不会自动终止</li>
<li>image 文件生成的容器实例，本身也是一个文件，称为容器文件</li>
<li>容器生成，就会同时存在两个文件： image 文件和容器文件</li>
<li>关闭容器并不会删除容器文件，只是容器停止运行</li>
</ul>
<h3 id="t2113.1 命令">13.1 命令 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2113.1%20%E5%91%BD%E4%BB%A4"> # </a></h3>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">案例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">run</td>
<td style="text-align:left">从镜像运行一个容器</td>
<td style="text-align:left">docker run ubuntu /bin/echo 'hello-world'</td>
</tr>
<tr>
<td style="text-align:left">ls</td>
<td style="text-align:left">列出容器</td>
<td style="text-align:left">docker container ls</td>
</tr>
<tr>
<td style="text-align:left">inspect</td>
<td style="text-align:left">显示一个或多个容器详细信息</td>
<td style="text-align:left">docker inspect</td>
</tr>
<tr>
<td style="text-align:left">attach</td>
<td style="text-align:left">要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕</td>
<td style="text-align:left">docker attach [OPTIONS] CONTAINER</td>
<td>docker attach 6d1a25f95132</td>
</tr>
<tr>
<td style="text-align:left">stats</td>
<td style="text-align:left">显示容器资源使用统计</td>
<td style="text-align:left">docker container stats</td>
</tr>
<tr>
<td style="text-align:left">top</td>
<td style="text-align:left">显示一个容器运行的进程</td>
<td style="text-align:left">docker container top</td>
</tr>
<tr>
<td style="text-align:left">update</td>
<td style="text-align:left">更新一个或多个容器配置</td>
<td style="text-align:left"></td>
<td>docker update -m 500m --memory-swap -1 6d1a25f95132</td>
</tr>
<tr>
<td style="text-align:left">port</td>
<td style="text-align:left">列出指定的容器的端口映射</td>
<td style="text-align:left">docker run -d -p 8080:80 nginx  docker container port containerID</td>
</tr>
<tr>
<td style="text-align:left">ps</td>
<td style="text-align:left">查看当前运行的容器</td>
<td style="text-align:left">docker ps -a -l</td>
</tr>
<tr>
<td style="text-align:left">kill [containerId]</td>
<td style="text-align:left">终止容器(发送SIGKILL )</td>
<td style="text-align:left">docker kill [containerId]</td>
</tr>
<tr>
<td style="text-align:left">rm [containerId]</td>
<td style="text-align:left">删除容器</td>
<td style="text-align:left">docker rm [containerId]</td>
</tr>
<tr>
<td style="text-align:left">start [containerId]</td>
<td style="text-align:left">启动已经生成、已经停止运行的容器文件</td>
<td style="text-align:left">docker start [containerId]</td>
</tr>
<tr>
<td style="text-align:left">stop [containerId]</td>
<td style="text-align:left">终止容器运行 (发送 SIGTERM )</td>
<td style="text-align:left">docker stop [containerId]  docker container stop $(docker container ps -aq)</td>
</tr>
<tr>
<td style="text-align:left">logs [containerId]</td>
<td style="text-align:left">查看 docker 容器的输出</td>
<td style="text-align:left">docker logs [containerId]</td>
</tr>
<tr>
<td style="text-align:left">exec [containerId]</td>
<td style="text-align:left">进入一个正在运行的 docker 容器执行命令</td>
<td style="text-align:left">docker container exec -it f6a53629488b /bin/bash</td>
</tr>
<tr>
<td style="text-align:left">cp [containerId]</td>
<td style="text-align:left">从正在运行的 Docker 容器里面，将文件拷贝到本机</td>
<td style="text-align:left">docker container cp f6a53629488b:/root/root.txt .</td>
</tr>
<tr>
<td style="text-align:left">commit [containerId]</td>
<td style="text-align:left">根据一个现有容器创建一个新的镜像</td>
<td style="text-align:left">docker commit -a "zhufeng" -m "mynginx" a404c6c174a2  mynginx:v1</td>
</tr>
</tbody>
</table>
<ul>
<li>docker容器的主线程（dockfile中CMD执行的命令）结束，容器会退出<ul>
<li>以使用交互式启动 <code>docker run -i [CONTAINER_NAME or CONTAINER_ID]</code></li>
<li>tty选项 <code>docker run -dit [CONTAINER_NAME or CONTAINER_ID]</code></li>
<li>守护态（Daemonized）形式运行 <code>docker run -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"</code></li>
</ul>
</li>
</ul>
<h3 id="t2213.2 启动容器">13.2 启动容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2213.2%20%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker run ubuntu /bin/echo <span class="hljs-string">"Hello world"</span>
</code></pre>
<ul>
<li>docker: Docker 的二进制执行文件。</li>
<li>run:与前面的 docker 组合来运行一个容器。</li>
<li>ubuntu指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li>
<li>/bin/echo "Hello world": 在启动的容器里执行的命令</li>
</ul>
<blockquote>
<p>Docker以ubuntu镜像创建一个新容器，然后在容器里执行 bin/echo "Hello world"，然后输出结果</p>
<ul>
<li>Docker attach必须是登陆到一个已经运行的容器里。需要注意的是如果从这个容器中exit退出的话，就会导致容器停止</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-i --interactive</td>
<td style="text-align:left">交互式</td>
</tr>
<tr>
<td style="text-align:left">-t --tty</td>
<td style="text-align:left">分配一个伪终端</td>
</tr>
<tr>
<td style="text-align:left">-d --detach</td>
<td style="text-align:left">运行容器到后台</td>
</tr>
<tr>
<td style="text-align:left">-a --attach list</td>
<td style="text-align:left">附加到运行的容器</td>
</tr>
<tr>
<td style="text-align:left">-e --env list</td>
<td style="text-align:left">设置环境变量</td>
<td>docker run -d -p 1010:80 -e username="zhufeng" nginx \ docker container exec -it  3695dc5b9c2d /bin/bash</td>
</tr>
<tr>
<td style="text-align:left">-p --publish list</td>
<td style="text-align:left">发布容器端口到主机</td>
</tr>
<tr>
<td style="text-align:left">-P</td>
<td style="text-align:left">--publish-all</td>
</tr>
</tbody>
</table>
<h3 id="t2313.3 查看容器">13.3 查看容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2313.3%20%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker ps
docker -a
docker -l
</code></pre>
<ul>
<li>-a 显示所有的容器，包括已停止的</li>
<li>-l 显示最新的那个容器</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CONTAINER ID</td>
<td style="text-align:left">容器ID</td>
</tr>
<tr>
<td style="text-align:left">IMAGE</td>
<td style="text-align:left">使用的镜像</td>
</tr>
<tr>
<td style="text-align:left">COMMAND</td>
<td style="text-align:left">使用的命令</td>
</tr>
<tr>
<td style="text-align:left">CREATED</td>
<td style="text-align:left">创建时间</td>
</tr>
<tr>
<td style="text-align:left">STATUS</td>
<td style="text-align:left">状态</td>
</tr>
<tr>
<td style="text-align:left">PORTS</td>
<td style="text-align:left">端口号</td>
</tr>
<tr>
<td style="text-align:left">NAMES</td>
<td style="text-align:left">自动分配的名称</td>
</tr>
</tbody>
</table>
<h3 id="t2413.4 运行交互式的容器">13.4 运行交互式的容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2413.4%20%E8%BF%90%E8%A1%8C%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%9A%84%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker run -i -t ubuntu /bin/bash
</code></pre>
<ul>
<li>-t=--interactive  在新容器内指定一个伪终端或终端。</li>
<li>-i=--tty 允许你对容器内的标准输入 (STDIN) 进行交互。</li>
</ul>
<blockquote>
<p>我们可以通过运行exit命令或者使用CTRL+D来退出容器。</p>
</blockquote>
<h3 id="t2513.5 后台运行容器">13.5 后台运行容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2513.5%20%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker run --detach centos ping www.baidu.com
docker ps 
docker logs --follow ad04d9acde94
docker stop ad04d9acde94
</code></pre>
<h3 id="t2613.6 kill">13.6 kill <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2613.6%20kill"> # </a></h3>
<pre><code class="lang-js">docker kill <span class="hljs-number">5</span>a5c3a760f61
</code></pre>
<blockquote>
<p>kill是不管容器同不同意，直接执行<code>kill -9</code>，强行终止；stop的话，首先给容器发送一个<code>TERM</code>信号，让容器做一些退出前必须的保护性、安全性操作，然后让容器自动停止运行，如果在一段时间内，容器还是没有停止，再进行kill -9，强行终止</p>
</blockquote>
<h3 id="t2713.7 删除容器">13.7 删除容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2713.7%20%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8"> # </a></h3>
<ul>
<li>docker rm <container id="">  删除容器</container></li>
<li>docker rmi <img id="">    删除镜像 </li>
<li>docker rm $(docker ps -a -q)</li>
</ul>
<pre><code class="lang-js">docker rm <span class="hljs-number">5</span>a5c3a760f61
</code></pre>
<h3 id="t2813.8 启动容器">13.8 启动容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2813.8%20%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker start [containerId]
</code></pre>
<h3 id="t2913.9 停止容器">13.9 停止容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t2913.9%20%E5%81%9C%E6%AD%A2%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker stop [containerId]
</code></pre>
<h3 id="t3013.10 进入一个容器">13.10 进入一个容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3013.10%20%E8%BF%9B%E5%85%A5%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker attach [containerID]
</code></pre>
<h3 id="t3113.11 进入一个正在运行中的容器">13.11 进入一个正在运行中的容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3113.11%20%E8%BF%9B%E5%85%A5%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker container -exec -it [containerID] /bin/bash
</code></pre>
<h3 id="t3213.12 拷贝文件">13.12 拷贝文件 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3213.12%20%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6"> # </a></h3>
<pre><code class="lang-js">docker container cp [containerID] /readme.md .
</code></pre>
<h3 id="t3313.13 自动删除">13.13 自动删除 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3313.13%20%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4"> # </a></h3>
<pre><code class="lang-js">docker run --rm ubuntu /bin/bash
</code></pre>
<h2 id="t3414. commit制作个性化镜像">14. commit制作个性化镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3414.%20commit%E5%88%B6%E4%BD%9C%E4%B8%AA%E6%80%A7%E5%8C%96%E9%95%9C%E5%83%8F"> # </a></h2>
<ul>
<li>docker commit :从容器创建一个新的镜像。</li>
<li>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<ul>
<li>-a :提交的镜像作者</li>
<li>-c :使用Dockerfile指令来创建镜像</li>
<li>-m :提交时的说明文字</li>
<li>-p :在commit时，将容器暂停</li>
</ul>
</li>
<li>停止容器后不会自动删除这个容器，除非在启动容器的时候指定了 --rm 标志</li>
<li>使用 docker ps -a 命令查看 Docker 主机上包含停止的容器在内的所有容器</li>
<li>停止状态的容器的可写层仍然占用磁盘空间。要清理可以使用 <code>docker container prune</code> 命令</li>
</ul>
<pre><code class="lang-js">docker container commit -m<span class="hljs-string">"我的nginx"</span> -a<span class="hljs-string">"zhangrenyang"</span> <span class="hljs-number">3695</span>dc5b9c2d zhangrenyang/mynginx:v1
docker image ls
docker container run zhangrenyang/mynginx /bin/bash
docker container rm b2839066c362
docker container prune 
docker image rmi c79ef5b3f5fc
</code></pre>
<h2 id="t3515. 制作Dockerfile">15. 制作Dockerfile <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3515.%20%E5%88%B6%E4%BD%9CDockerfile"> # </a></h2>
<ul>
<li>Docker 的镜像是用一层一层的文件组成的</li>
<li><code>docker inspect</code>命令可以查看镜像或者容器</li>
<li>Layers就是镜像的层文件，只读不能修改。基于镜像创建的容器会共享这些文件层</li>
</ul>
<pre><code class="lang-js">docker inspect centos
</code></pre>
<h3 id="t3615.1 编写Dockerfile">15.1 编写Dockerfile <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3615.1%20%E7%BC%96%E5%86%99Dockerfile"> # </a></h3>
<ul>
<li>-t --tag list 镜像名称</li>
<li>-f --file string 指定Dockerfile文件的位置</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">指令</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">FROM</td>
<td style="text-align:left">构建的新镜像是基于哪个镜像</td>
<td style="text-align:left">FROM centos:6</td>
</tr>
<tr>
<td style="text-align:left">MAINTAINER</td>
<td style="text-align:left">镜像维护者姓名或邮箱地址</td>
<td style="text-align:left">MAINTAINER zhufengjiagou</td>
</tr>
<tr>
<td style="text-align:left">RUN</td>
<td style="text-align:left">构建镜像时运行的shell命令</td>
<td style="text-align:left">RUN yum install httpd</td>
</tr>
<tr>
<td style="text-align:left">CMD</td>
<td style="text-align:left">CMD 设置容器启动后默认执行的命令及其参数，但 CMD 能够被 docker run 后面跟的命令行参数替换</td>
<td style="text-align:left">CMD /usr/sbin/sshd -D</td>
</tr>
<tr>
<td style="text-align:left">EXPOSE</td>
<td style="text-align:left">声明容器运行的服务器端口</td>
<td style="text-align:left">EXPOSE 80 443</td>
</tr>
<tr>
<td style="text-align:left">ENV</td>
<td style="text-align:left">设置容器内的环境变量</td>
<td style="text-align:left">ENV MYSQL_ROOT_PASSWORD 123456</td>
</tr>
<tr>
<td style="text-align:left">ADD</td>
<td style="text-align:left">拷贝文件或目录到镜像中，如果是URL或者压缩包会自动下载和解压</td>
<td style="text-align:left">ADD <src> <dest>,ADD <a href="https://xxx.com/html.tar.gz">https://xxx.com/html.tar.gz</a> /var/<a href="http://www.html/">www.html</a>, ADD html.tar.gz /var/www/html</dest></src></td>
</tr>
<tr>
<td style="text-align:left">COPY</td>
<td style="text-align:left">拷贝文件或目录到镜像</td>
<td style="text-align:left">COPY ./start.sh /start.sh</td>
</tr>
<tr>
<td style="text-align:left">ENTRYPOINT</td>
<td style="text-align:left">配置容器启动时运行的命令</td>
<td style="text-align:left">ENTRYPOINT /bin/bash -c '/start.sh'</td>
</tr>
<tr>
<td style="text-align:left">VOLUME</td>
<td style="text-align:left">指定容器挂载点到宿主自动生成的目录或其它容器</td>
<td style="text-align:left">VOLUME ["/var/lib/mysql"]</td>
</tr>
<tr>
<td style="text-align:left">USER</td>
<td style="text-align:left">为 RUN CMD和ENTRYPOINT执行命令指定运行用户</td>
<td style="text-align:left">USER zhufengjiagou</td>
</tr>
<tr>
<td style="text-align:left">WORKDIR</td>
<td style="text-align:left">为RUN CMD ENTRYPOINT COPY ADD 设置工作目录</td>
<td style="text-align:left">WORKDIR /data</td>
</tr>
<tr>
<td style="text-align:left">HEALTHCHECK</td>
<td style="text-align:left">健康检查</td>
<td style="text-align:left">HEALTHCHECK --interval=5m --timeout=3s --retries=3 CMS curl -f htp://localhost</td>
</tr>
<tr>
<td style="text-align:left">ARG</td>
<td style="text-align:left">在构建镜像时指定一些参数</td>
<td style="text-align:left">ARG user</td>
</tr>
</tbody>
</table>
<ul>
<li>cmd给出的是一个容器的默认的可执行体。也就是容器启动以后，默认的执行的命令。重点就是这个"默认"。意味着，如果<code>docker run</code>没有指定任何的执行命令或者<code>dockerfile</code>里面也没有<code>entrypoint</code>，那么，就会使用cmd指定的默认的执行命令执行。同时也从侧面说明了<code>entrypoint</code>的含义，它才是真正的容器启动以后要执行命令</li>
</ul>
<h3 id="t3715.2 .dockerignore">15.2 .dockerignore <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3715.2%20.dockerignore"> # </a></h3>
<p>表示要排除，不要打包到image中的文件路径</p>
<pre><code class="lang-js">.git
node_modules
</code></pre>
<h3 id="t3815.3 Dockerfile">15.3 Dockerfile <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3815.3%20Dockerfile"> # </a></h3>
<h4 id="t3915.3.1 安装node">15.3.1 安装node <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t3915.3.1%20%E5%AE%89%E8%A3%85node"> # </a></h4>
<ul>
<li><a href="https://github.com/creationix/nvm/blob/master/README.md">nvm</a><pre><code class="lang-js">wget -qO- https:<span class="hljs-comment">//raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span>
source /root/.bashrc
nvm install stable
node -v
npm i cnpm -g
npm i nrm -g
</code></pre>
</li>
</ul>
<h4 id="t4015.3.2 安装express项目生成器">15.3.2 安装express项目生成器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4015.3.2%20%E5%AE%89%E8%A3%85express%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E5%99%A8"> # </a></h4>
<pre><code class="lang-js">npm install express-generator -g
express app
</code></pre>
<h4 id="t4115.3.3  Dockerfile">15.3.3  Dockerfile <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4115.3.3%20%20Dockerfile"> # </a></h4>
<pre><code class="lang-js">FROM node
COPY ./app /app
WORKDIR /app
RUN npm install
EXPOSE <span class="hljs-number">3000</span>
</code></pre>
<ul>
<li>FROM  表示该镜像继承的镜像 :表示标签</li>
<li>COPY 是将当前目录下的app目录下面的文件都拷贝到image里的/app目录中</li>
<li>WORKDIR  指定工作路径，类似于执行 <code>cd</code> 命令</li>
<li>RUN npm install 在/app目录下安装依赖，安装后的依赖也会打包到image目录中</li>
<li>EXPOSE 暴露3000端口，允许外部连接这个端口</li>
</ul>
<h3 id="t4215.4 创建image">15.4 创建image <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4215.4%20%E5%88%9B%E5%BB%BAimage"> # </a></h3>
<pre><code class="lang-js">docker build -t express-demo .
</code></pre>
<ul>
<li>-t用来指定image镜像的名称，后面还可以加冒号指定标签，如果不指定默认就是latest</li>
<li><code>.</code> 表示Dockerfile文件的所有路径,<code>.</code>就表示当前路径</li>
</ul>
<h3 id="t4315.5 使用新的镜像运行容器">15.5 使用新的镜像运行容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4315.5%20%E4%BD%BF%E7%94%A8%E6%96%B0%E7%9A%84%E9%95%9C%E5%83%8F%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker container run -p <span class="hljs-number">3333</span>:<span class="hljs-number">3000</span> -it express-demo /bin/bash
</code></pre>
<pre><code class="lang-js">npm start
</code></pre>
<ul>
<li><code>-p</code> 参数是将容器的3000端口映射为本机的3333端口</li>
<li><code>-it</code> 参数是将容器的shell容器映射为当前的shell,在本机容器中执行的命令都会发送到容器当中执行</li>
<li><code>express-demo</code> image的名称</li>
<li>/bin/bash 容器启动后执行的第一个命令,这里是启动了bash容器以便执行脚本</li>
<li><code>--rm</code> 在容器终止运行后自动删除容器文件</li>
</ul>
<h3 id="t4415.6 CMD">15.6 CMD <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4415.6%20CMD"> # </a></h3>
<p>Dockerfile</p>
<pre><code class="lang-diff"><span class="hljs-addition">+ CMD npm start</span>
</code></pre>
<p>重新制作镜像</p>
<pre><code class="lang-js">docker build -t express-demo .
</code></pre>
<ul>
<li>RUN命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD命令则是在容器启动后执行</li>
<li>一个 Dockerfile 可以包含多个RUN命令，但是只能有一个CMD命令</li>
<li>指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令</li>
</ul>
<h3 id="t4515.7 发布image">15.7 发布image <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4515.7%20%E5%8F%91%E5%B8%83image"> # </a></h3>
<ul>
<li><a href="https://hub.docker.com/">注册账户</a></li>
<li>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</li>
</ul>
<pre><code class="lang-js">docker login
docker image tag [imageName] [username]/[repository]:[tag]
docker image build -t [username]/[repository]:[tag] .

docker tag express-demo zhangrenyang/express-demo:v1
docker push zhangrenyang/express-demo:v1
</code></pre>
<h2 id="t4616. 数据盘">16. 数据盘 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4616.%20%E6%95%B0%E6%8D%AE%E7%9B%98"> # </a></h2>
<ul>
<li>删除容器的时候，容器层里创建的文件也会被删除掉，如果有些数据你想永久保存，比如Web服务器的日志，数据库管理系统中的数据，可以为容器创建一个数据盘</li>
</ul>
<p><img src="./61.11.devops-docker_files/bindmount.png" alt="bindmount"></p>
<h3 id="t4716.1 volume">16.1 volume <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4716.1%20volume"> # </a></h3>
<ul>
<li>volumes Docker管理宿主机文件系统的一部分(/var/lib/docker/volumes)</li>
<li>如果没有指定卷，则会自动创建</li>
<li>建议使用--mount ,更通用</li>
</ul>
<h3 id="t4816.1.1 创建数据卷">16.1.1 创建数据卷 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4816.1.1%20%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%8D%B7"> # </a></h3>
<pre><code class="lang-js">docker volume --help
docker volume create nginx-vol
docker volume ls
docker volume inspect nginx-vol
</code></pre>
<pre><code class="lang-js">#把nginx-vol数据卷挂载到/usr/share/nginx/html,挂载后容器内的文件会同步到数据卷中
docker run -d  --name=nginx1 --mount src=nginx-vol,dst=/usr/share/nginx/html nginx
docker run -d  --name=nginx2  -v nginx-vol:/usr/share/nginx/html -p 3000:80 nginx
</code></pre>
<h3 id="t4916.1.2 删除数据卷">16.1.2 删除数据卷 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t4916.1.2%20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%8D%B7"> # </a></h3>
<pre><code class="lang-js">docker container stop nginx1 停止容器
docker container rm nginx1 删除容器
docker volume rm nginx-vol  删除数据库

</code></pre>
<h4 id="t5016.1.3  管理数据盘">16.1.3  管理数据盘 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5016.1.3%20%20%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E7%9B%98"> # </a></h4>
<pre><code class="lang-js">docker volume ls #列出所有的数据盘
docker volume ls -f dangling=true #列出已经孤立的数据盘
docker volume rm xxxx #删除数据盘
docker volume ls      #列出数据盘
</code></pre>
<h3 id="t5116.2 Bind mounts">16.2 Bind mounts <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5116.2%20Bind%20mounts"> # </a></h3>
<ul>
<li>此方式与Linux系统的mount方式很相似，即是会覆盖容器内已存在的目录或文件，但并不会改变容器内原有的文件，当umount后容器内原有的文件就会还原</li>
<li>创建容器的时候我们可以通过<code>-v</code>或<code>--volumn</code>给它指定一下数据盘</li>
<li><code>bind mounts</code> 可以存储在宿主机系统的任意位置</li>
<li>如果源文件/目录不存在，不会自动创建，会抛出一个错误</li>
<li>如果挂载目标在容器中非空目录，则该目录现有内容将被隐藏</li>
</ul>
<h4 id="t5216.2.1 默认数据盘">16.2.1 默认数据盘 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5216.2.1%20%E9%BB%98%E8%AE%A4%E6%95%B0%E6%8D%AE%E7%9B%98"> # </a></h4>
<ul>
<li>-v 参数两种挂载数据方式都可以用</li>
</ul>
<pre><code class="lang-js">docker run -v /mnt:/mnt -it --name logs centos bash
cd /mnt
echo 1 &gt; 1.txt
exit
</code></pre>
<pre><code class="lang-js">docker inspect logs
<span class="hljs-string">"Mounts"</span>: [
    {
        <span class="hljs-string">"Source"</span>:<span class="hljs-string">"/mnt/sda1/var/lib/docker/volumes/dea6a8b3aefafa907d883895bbf931a502a51959f83d63b7ece8d7814cf5d489/_data"</span>,
        <span class="hljs-string">"Destination"</span>: <span class="hljs-string">"/mnt"</span>,
    }
]
</code></pre>
<ul>
<li><code>Source</code>的值就是我们给容器指定的数据盘在主机上的位置 </li>
<li><code>Destination</code>的值是这个数据盘在容器上的位置 </li>
</ul>
<h4 id="t5316.2.2 指定数据盘">16.2.2 指定数据盘 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5316.2.2%20%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E7%9B%98"> # </a></h4>
<pre><code class="lang-js">mkdir ~/data
docker run -v ~/data:/mnt -it --name logs2 centos bash
cd /mnt
echo 3 &gt; 3.txt
exit
cat ~/data/3.txt
</code></pre>
<ul>
<li>~/data:/mnt   把当前用户目录中的<code>data</code>目录映射到<code>/mnt</code>上</li>
</ul>
<h4 id="t5416.2.3 指定数据盘容器">16.2.3 指定数据盘容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5416.2.3%20%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E7%9B%98%E5%AE%B9%E5%99%A8"> # </a></h4>
<ul>
<li>docker create [OPTIONS] IMAGE [COMMAND] [ARG...] 创建一个新的容器但不启动</li>
</ul>
<pre><code class="lang-js">docker create -v /mnt:/mnt --name logger centos
docker run --volumes-from logger --name logger3 -i -t centos bash
cd /mnt 
touch logger3
docker run --volumes-from logger --name logger4 -i -t centos bash
cd /mnt
touch logger4
</code></pre>
<h2 id="t5517. 网络">17. 网络 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5517.%20%E7%BD%91%E7%BB%9C"> # </a></h2>
<ul>
<li>安装Docker时，它会自动创建三个网络，bridge（创建容器默认连接到此网络）、 none 、host<ul>
<li>None：该模式关闭了容器的网络功能,对外界完全隔离</li>
<li>host：容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</li>
<li>bridge 桥接网络，此模式会为每一个容器分配IP</li>
</ul>
</li>
<li>可以使用该<code>--network</code>标志来指定容器应连接到哪些网络</li>
</ul>
<h3 id="t5617.1 bridge(桥接)">17.1 bridge(桥接) <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5617.1%20bridge(%E6%A1%A5%E6%8E%A5)"> # </a></h3>
<ul>
<li>bridge网络代表所有Docker安装中存在的网络</li>
<li>除非你使用该<code>docker run --network=&lt;NETWORK&gt;</code>选项指定，否则Docker守护程序默认将容器连接到此网络</li>
<li>bridge模式使用 <code>--net=bridge</code> 指定，默认设置</li>
</ul>
<pre><code class="lang-js">docker network ls #列出当前的网络
docker inspect bridge #查看当前的桥连网络
docker run -d --name nginx1 nginx
docker run -d --name nginx2 --link nginx1 nginx
docker exec -it nginx2 bash
apt update
apt install -y inetutils-ping  #ping
apt install -y dnsutils        #nslookup
apt install -y net-tools       #ifconfig
apt install -y iproute2        #ip
apt install -y curl            #curl
cat /etc/hosts
ping nginx1
</code></pre>
<h3 id="t5717.2 none">17.2 none <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5717.2%20none"> # </a></h3>
<ul>
<li>none模式使用<code>--net=none</code>指定</li>
</ul>
<pre><code class="lang-js"># --net 指定无网络
docker run -d --name nginx_none --net none nginx
docker inspect none
docker exec -it nginx_none bash
ip addr
</code></pre>
<h3 id="t5817.3 host">17.3 host <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5817.3%20host"> # </a></h3>
<ul>
<li>host模式使用 <code>--net=host</code> 指定</li>
</ul>
<pre><code class="lang-js">docker run -d --name nginx_host --net host nginx
docker inspect host
docker exec -it nginx_host bash
ip addr
</code></pre>
<h3 id="t5917.4 端口映射">17.4 端口映射 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t5917.4%20%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84"> # </a></h3>
<pre><code class="lang-js"># 查看镜像里暴露出的端口号
docker image inspect nginx
"ExposedPorts": {"80/tcp": {}}
# 让宿主机的8080端口映射到docker容器的80端口
docker run -d --name port_nginx -p 8080:80  nginx
# 查看主机绑定的端口
docker container port port_nginx
</code></pre>
<h3 id="t6017.5 指向主机的随机端口">17.5 指向主机的随机端口 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6017.5%20%E6%8C%87%E5%90%91%E4%B8%BB%E6%9C%BA%E7%9A%84%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3"> # </a></h3>
<pre><code class="lang-js">docker run -d --name random_nginx --publish <span class="hljs-number">80</span> nginx
docker port random_nginx

docker run -d --name randomall_nginx --publish-all nginx
docker run -d --name randomall_nginx --P nginx
</code></pre>
<h3 id="t6117.6 创建自定义网络">17.6 创建自定义网络 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6117.6%20%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C"> # </a></h3>
<ul>
<li>可以创建多个网络，每个网络IP范围均不相同</li>
<li>docker的自定义网络里面有一个DNS服务，可以通过容器名称访问主机</li>
</ul>
<pre><code class="lang-js"># 创建自定义网络
docker network create --driver bridge myweb
# 查看自定义网络中的主机
docker network inspect myweb
# 创建容器的时候指定网络
docker run -d --name mynginx1  --net myweb nginx
docker run -d --name mynginx2  --net myweb nginx
docker exec -it mynginx2 bash
ping mynginx1
</code></pre>
<h3 id="t6217.7 连接到指定网络">17.7 连接到指定网络 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6217.7%20%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%8C%87%E5%AE%9A%E7%BD%91%E7%BB%9C"> # </a></h3>
<pre><code class="lang-js">docker run -d --name mynginx3   nginx
docker network connect  myweb mynginx3
docker network disconnect myweb mynginx3
</code></pre>
<h3 id="t6317.8 移除网络">17.8 移除网络 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6317.8%20%E7%A7%BB%E9%99%A4%E7%BD%91%E7%BB%9C"> # </a></h3>
<pre><code class="lang-js">docker network rm myweb
</code></pre>
<h2 id="t6418.compose">18.compose <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6418.compose"> # </a></h2>
<ul>
<li>Compose 通过一个配置文件来管理多个Docker容器</li>
<li>在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动、停止和重启应用和应用中的服务以及所有依赖服务的容器</li>
<li>步骤：<ul>
<li>最后，运行<code>docker-compose up</code>，Compose 将启动并运行整个应用程序
配置文件组成</li>
<li>services 可以定义需要的服务，每个服务都有自己的名字、使用的镜像、挂载的数据卷所属的网络和依赖的其它服务</li>
<li>networks 是应用的网络，在它下面可以定义使用的网络名称，类性</li>
<li>volumes是数据卷，可以在此定义数据卷，然后挂载到不同的服务上面使用</li>
</ul>
</li>
</ul>
<h3 id="t6518.1 安装compose">18.1 安装compose <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6518.1%20%E5%AE%89%E8%A3%85compose"> # </a></h3>
<pre><code class="lang-js">yum -y install epel-release
yum -y install python-pip
yum clean all
pip install docker-compose
</code></pre>
<h3 id="t6618.2 编写docker-compose.yml">18.2 编写docker-compose.yml <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6618.2%20%E7%BC%96%E5%86%99docker-compose.yml"> # </a></h3>
<ul>
<li>在 <code>docker-compose.yml</code> 中定义组成应用程序的服务，以便它们可以在隔离的环境中一起运行</li>
<li>空格缩进表示层次</li>
<li>冒号空格后面有空格</li>
</ul>
<pre><code class="lang-yml"><span class="hljs-attr">version:</span> <span class="hljs-string">'2'</span>
<span class="hljs-attr">services:</span>
<span class="hljs-attr">  nginx1:</span>
<span class="hljs-attr">    image:</span> <span class="hljs-string">nginx</span>
<span class="hljs-attr">    ports:</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">"8080:80"</span>
<span class="hljs-attr">  nginx2:</span>
<span class="hljs-attr">    image:</span> <span class="hljs-string">nginx</span>
<span class="hljs-attr">    ports:</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">"8081:80"</span>
</code></pre>
<h3 id="t6718.3 启动服务">18.3 启动服务 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6718.3%20%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1"> # </a></h3>
<ul>
<li>docker会创建默认的网络</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">服务</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker-compose up</td>
<td style="text-align:left">启动所有的服务</td>
</tr>
<tr>
<td style="text-align:left">docker-compose up -d</td>
<td style="text-align:left">后台启动所有的服务</td>
</tr>
<tr>
<td style="text-align:left">docker-compose ps</td>
<td style="text-align:left">打印所有的容器</td>
</tr>
<tr>
<td style="text-align:left">docker-compose stop</td>
<td style="text-align:left">停止所有服务</td>
</tr>
<tr>
<td style="text-align:left">docker-compose logs -f</td>
<td style="text-align:left">持续跟踪日志</td>
</tr>
<tr>
<td style="text-align:left">docker-compose exec nginx1 bash</td>
<td style="text-align:left">进入nginx1服务系统</td>
</tr>
<tr>
<td style="text-align:left">docker-compose rm nginx1</td>
<td style="text-align:left">删除服务容器</td>
</tr>
<tr>
<td style="text-align:left">docker network ls</td>
<td style="text-align:left">查看网络网络不会删除</td>
</tr>
<tr>
<td style="text-align:left">docker-compose down</td>
<td style="text-align:left">删除所有的网络和容器</td>
</tr>
</tbody>
</table>
<blockquote>
<p>删除所有的容器  docker container rm <code>docker container ps -a -q</code></p>
</blockquote>
<h3 id="t6818.4 网络互ping">18.4 网络互ping <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6818.4%20%E7%BD%91%E7%BB%9C%E4%BA%92ping"> # </a></h3>
<pre><code class="lang-js">docker-compose up -d
docker-compose exec nginx1 bash
apt update &amp;&amp; apt install -y inetutils-ping
#可以通过服务的名字连接到对方
ping nginx2 
</code></pre>
<h3 id="t6918.5 配置数据卷">18.5 配置数据卷 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t6918.5%20%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%8D%B7"> # </a></h3>
<ul>
<li>networks 指定自定义网络</li>
<li>volumes 指定数据卷</li>
<li>数据卷在宿主机的位置 <code>/var/lib/docker/volumes/nginx-compose_data/_data</code></li>
</ul>
<pre><code class="lang-js">version: <span class="hljs-string">'3'</span>
services:
  nginx1:
    image: nginx
    ports:
      - <span class="hljs-string">"8081:80"</span>
    networks:
      - <span class="hljs-string">"newweb"</span>
    volumes:
      - <span class="hljs-string">"data:/data"</span>
      - <span class="hljs-string">"./nginx1:/usr/share/nginx/html"</span>
  nginx2:
    image: nginx
    ports:
      - <span class="hljs-string">"8082:80"</span>
    networks:
      - <span class="hljs-string">"default"</span>
    volumes:
      - <span class="hljs-string">"data:/data"</span>
      - <span class="hljs-string">"./nginx2:/usr/share/nginx/html"</span>
  nginx3:
    image: nginx
    ports:
      - <span class="hljs-string">"8083:80"</span>
    networks:
      - <span class="hljs-string">"default"</span>
      - <span class="hljs-string">"newweb"</span>
    volumes:
      - <span class="hljs-string">"data:/data"</span>
      - <span class="hljs-string">"./nginx3:/usr/share/nginx/html"</span>
networks:
  newweb:
    driver: bridge
volumes:
  data:
    driver: local
</code></pre>
<pre><code class="lang-js">docker exec nginx-compose_nginx1_1  bash
cd /data 
touch <span class="hljs-number">1.</span>txt
exit
cd /<span class="hljs-keyword">var</span>/lib/docker/volumes/nginx-compose_data/_data
ls
</code></pre>
<h2 id="t7019. node项目">19. node项目 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7019.%20node%E9%A1%B9%E7%9B%AE"> # </a></h2>
<ul>
<li>nodeapp 是一个用 Docker 搭建的本地 Node.js 应用开发与运行环境。</li>
</ul>
<h3 id="t7119.1 服务分类">19.1 服务分类 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7119.1%20%E6%9C%8D%E5%8A%A1%E5%88%86%E7%B1%BB"> # </a></h3>
<ul>
<li>db：使用 <code>mariadb</code> 作为应用的数据库</li>
<li>node：启动<code>node</code>服务</li>
<li>web：使用 <code>nginx</code> 作为应用的 web 服务器</li>
</ul>
<h3 id="t7219.2 app目录结构">19.2 app目录结构 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7219.2%20app%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84"> # </a></h3>
<table>
<thead>
<tr>
<th style="text-align:left">文件</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">docker-compose.yml</td>
<td style="text-align:left">定义本地开发环境需要的服务</td>
</tr>
<tr>
<td style="text-align:left">images/nginx/config/default.conf</td>
<td style="text-align:left">nginx 配置文件</td>
</tr>
<tr>
<td style="text-align:left">images/node/Dockerfile</td>
<td style="text-align:left">node的Dockfile配置文件</td>
</tr>
<tr>
<td style="text-align:left">images/node/web/package.json</td>
<td style="text-align:left">项目文件</td>
</tr>
<tr>
<td style="text-align:left">images/node/web/public/index.html</td>
<td style="text-align:left">静态首页</td>
</tr>
<tr>
<td style="text-align:left">images/node/web/server.js</td>
<td style="text-align:left">node服务</td>
</tr>
</tbody>
</table>
<pre><code class="lang-js">├── docker-compose.yml
└── images
    ├── nginx
    │   └── config
    │       └── <span class="hljs-keyword">default</span>.conf
    └── node
        ├── Dockerfile
        └── web
            ├── package.json
            ├── public
            │   └── index.html
            └── server.js
</code></pre>
<h4 id="t7319.2.1 docker-compose.yml">19.2.1 docker-compose.yml <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7319.2.1%20docker-compose.yml"> # </a></h4>
<pre><code class="lang-yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'2'</span>
<span class="hljs-attr">services:</span>
<span class="hljs-attr"> node:</span>
<span class="hljs-attr">  build:</span>
<span class="hljs-attr">    context:</span> <span class="hljs-string">./images/node</span>
<span class="hljs-attr">    dockerfile:</span> <span class="hljs-string">Dockerfile</span>
<span class="hljs-attr">  depends_on:</span>
<span class="hljs-bullet">   -</span> <span class="hljs-string">db</span>
<span class="hljs-attr"> web:</span>
<span class="hljs-attr">  image:</span> <span class="hljs-string">nginx</span>
<span class="hljs-attr">  ports:</span>
<span class="hljs-bullet">   -</span> <span class="hljs-string">"8080:80"</span>
<span class="hljs-attr">  volumes:</span>
<span class="hljs-bullet">   -</span> <span class="hljs-string">./images/nginx/config:/etc/nginx/conf.d</span>
<span class="hljs-bullet">   -</span> <span class="hljs-string">./images/node/web/public:/public</span>  
<span class="hljs-attr">  depends_on:</span>
<span class="hljs-bullet">   -</span> <span class="hljs-string">node</span>
<span class="hljs-attr"> db:</span>
<span class="hljs-attr">  image:</span> <span class="hljs-string">mariadb</span>
<span class="hljs-attr">  environment:</span>
<span class="hljs-attr">   MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">"root"</span>
<span class="hljs-attr">   MYSQL_DATABASE:</span> <span class="hljs-string">"node"</span>
<span class="hljs-attr">   MYSQL_USER:</span> <span class="hljs-string">"zfpx"</span>
<span class="hljs-attr">   MYSQL_PASSWORD:</span> <span class="hljs-string">"123456"</span>
<span class="hljs-attr">  volumes:</span>
<span class="hljs-attr">    - db:</span><span class="hljs-string">/var/lib/mysql</span>
<span class="hljs-attr">volumes:</span>
<span class="hljs-attr"> db:</span>
<span class="hljs-attr">  driver:</span> <span class="hljs-string">local</span>
</code></pre>
<h4 id="t7419.2.2 server.js">19.2.2 server.js <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7419.2.2%20server.js"> # </a></h4>
<p>images/node/web/server.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">let</span> http=<span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);
<span class="hljs-keyword">var</span> mysql  = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mysql'</span>);
<span class="hljs-keyword">var</span> connection = mysql.createConnection({
  <span class="hljs-attr">host</span>     : <span class="hljs-string">'db'</span>,
  <span class="hljs-attr">user</span>     : <span class="hljs-string">'zfpx'</span>,
  <span class="hljs-attr">password</span> : <span class="hljs-string">'123456'</span>,
  <span class="hljs-attr">database</span> : <span class="hljs-string">'node'</span>
});

connection.connect();

<span class="hljs-keyword">let</span> server=http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req,res</span>) </span>{
    connection.query(<span class="hljs-string">'SELECT 2 + 2 AS solution'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results, fields</span>) </span>{
        <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;
        res.end(<span class="hljs-string">''</span>+results[<span class="hljs-number">0</span>].solution);
    });
});
server.listen(<span class="hljs-number">3000</span>);
</code></pre>
<h4 id="t7519.2.3 package.json">19.2.3 package.json <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7519.2.3%20package.json"> # </a></h4>
<p>images/node/web/package.json</p>
<pre><code class="lang-json">{
<span class="hljs-attr">"scripts"</span>: {
    <span class="hljs-attr">"start"</span>: <span class="hljs-string">"node server.js"</span>
  },
<span class="hljs-attr">"dependencies"</span>: {
    <span class="hljs-attr">"mysql"</span>: <span class="hljs-string">"^2.16.0"</span>
}
</code></pre>
<h4 id="t7619.2.4 images/node/Dockerfile">19.2.4 images/node/Dockerfile <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7619.2.4%20images/node/Dockerfile"> # </a></h4>
<pre><code class="lang-js">FROM node
MAINTAINER zhangrenyang &lt;zhang_renyang@<span class="hljs-number">126.</span>com&gt;
COPY ./web /web
WORKDIR /web
RUN npm install
CMD npm start
</code></pre>
<h4 id="t7719.2.5 images/nginx/config/default.conf">19.2.5 images/nginx/config/default.conf <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7719.2.5%20images/nginx/config/default.conf"> # </a></h4>
<pre><code class="lang-js">upstream backend {
    server node:<span class="hljs-number">3000</span>;
}
server {
    listen <span class="hljs-number">80</span>;
    server_name localhost;
    root /public;
    index index.html index.htm;

    location /api {
        proxy_pass http:<span class="hljs-comment">//backend;</span>
    }
}
</code></pre>
<h2 id="t7820. 搭建LNMP网站">20. 搭建LNMP网站 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7820.%20%E6%90%AD%E5%BB%BALNMP%E7%BD%91%E7%AB%99"> # </a></h2>
<h3 id="t7920.1 关闭防火墙">20.1 关闭防火墙 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t7920.1%20%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99"> # </a></h3>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">停止防火墙</td>
<td style="text-align:left">systemctl stop firewalld.service</td>
</tr>
<tr>
<td style="text-align:left">永久关闭防火墙</td>
<td style="text-align:left">systemctl disable firewalld.service</td>
</tr>
</tbody>
</table>
<pre><code class="lang-js"># 关闭防火墙之后docker需要重启
/bin/systemctl restart docker.service
</code></pre>
<h3 id="t8020.2 创建自定义网络">20.2 创建自定义网络 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8020.2%20%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C"> # </a></h3>
<pre><code class="lang-js">
docker network create lnmp
</code></pre>
<h3 id="t8120.3 创建mysql数据库容器">20.3 创建mysql数据库容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8120.3%20%E5%88%9B%E5%BB%BAmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js"> docker run -itd --name lnmp_mysql --net lnmp -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> --mount src=mysql-vol,dst=<span class="hljs-regexp">/var/</span>lib/mysql -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> mysql:<span class="hljs-number">5.6</span> --character-set-server=utf8
</code></pre>
<h3 id="t8220.4 创建数据库">20.4 创建数据库 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8220.4%20%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93"> # </a></h3>
<pre><code class="lang-js">docker exec lnmp_mysql bash -c <span class="hljs-string">'exec mysql -uroot  -p"$MYSQL_ROOT_PASSWORD" -e"create database wordpress"'</span>
mysql -h127<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -uroot -p123456
</code></pre>
<h3 id="t8320.5 创建nginx+PHP容器">20.5 创建nginx+PHP容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8320.5%20%E5%88%9B%E5%BB%BAnginx+PHP%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">mkdir -p /app/wwwroot
docker run -itd --name lnmp_web --net lnmp -p <span class="hljs-number">8888</span>:<span class="hljs-number">80</span> --mount type=bind,src=<span class="hljs-regexp">/app/</span>wwwroot,dst=<span class="hljs-regexp">/var/</span>www/html richarvey/nginx-php-fpm
</code></pre>
<h3 id="t8420.6 wordpress">20.6 wordpress <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8420.6%20wordpress"> # </a></h3>
<pre><code class="lang-js">cd /usr/local/src
wget https:<span class="hljs-comment">//wordpress.org/latest.tar.gz</span>
tar -xzvf latest.tar.gz -C /app/wwwroot
http:<span class="hljs-comment">//192.168.20.136:8888/wordpress/wp-admin/setup-config.php</span>

手工添加 /app/wwwroot/wordpress/wp-config.php
</code></pre>
<h2 id="t8521. 制作个性化镜像">21. 制作个性化镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8521.%20%E5%88%B6%E4%BD%9C%E4%B8%AA%E6%80%A7%E5%8C%96%E9%95%9C%E5%83%8F"> # </a></h2>
<h3 id="t8621.1 搭建nginx镜像">21.1 搭建nginx镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8621.1%20%E6%90%AD%E5%BB%BAnginx%E9%95%9C%E5%83%8F"> # </a></h3>
<h4 id="t8721.1.1 下载nginx">21.1.1 下载nginx <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8721.1.1%20%E4%B8%8B%E8%BD%BDnginx"> # </a></h4>
<pre><code class="lang-js">mkdir /usr/local/src
cd /usr/local/src
wget http:<span class="hljs-comment">//nginx.org/download/nginx-1.12.1.tar.gz</span>
</code></pre>
<h4 id="t8821.1.2 重启docker">21.1.2 重启docker <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8821.1.2%20%E9%87%8D%E5%90%AFdocker"> # </a></h4>
<p>#如果容器内无法联网可以重启docker</p>
<pre><code class="lang-js">systemctl restart docker.service
</code></pre>
<h4 id="t8921.1.3 编写default.conf">21.1.3 编写default.conf <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t8921.1.3%20%E7%BC%96%E5%86%99default.conf"> # </a></h4>
<pre><code class="lang-js">server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/local/nginx/html;
        index  index.html index.htm;
    }
    location /status{
       stub_status  on;
    }
    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    location ~ \.php$ {
        root           /usr/local/nginx/html;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }
}
</code></pre>
<h4 id="t9021.1.4 编写Dockerfile">21.1.4 编写Dockerfile <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9021.1.4%20%E7%BC%96%E5%86%99Dockerfile"> # </a></h4>
<p>Dockerfile</p>
<pre><code class="lang-js">FROM centos
MAINTAINER zhufengjiagou
RUN yum install -y gcc gcc-c++ make openssl-devel pcre-devel
ADD nginx<span class="hljs-number">-1.12</span><span class="hljs-number">.1</span>.tar.gz /tmp
RUN cd /tmp/nginx<span class="hljs-number">-1.12</span><span class="hljs-number">.1</span> &amp;&amp; \
    ./configure --prefix=<span class="hljs-regexp">/usr/</span>local/nginx &amp;&amp; \
    make -j <span class="hljs-number">2</span> &amp;&amp; \
    make install
RUN rm -rf /tmp/nginx<span class="hljs-number">-1.12</span><span class="hljs-number">.1</span> &amp;&amp; yum clean all
COPY <span class="hljs-keyword">default</span>.conf /usr/local/nginx/conf
WORKDIR /usr/local/nginx
EXPOSE <span class="hljs-number">80</span>
CMD [<span class="hljs-string">"./sbin/nginx"</span>,<span class="hljs-string">"-g"</span>,<span class="hljs-string">"daemon off;"</span>] 
</code></pre>
<h4 id="t9121.1.5 打包镜像">21.1.5 打包镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9121.1.5%20%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F"> # </a></h4>
<pre><code class="lang-js">docker image build -t zfnginx:v1 -f Dockerfile .
</code></pre>
<h4 id="t9221.1.6 使用镜像">21.1.6 使用镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9221.1.6%20%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F"> # </a></h4>
<pre><code class="lang-js">docker container run -it zfnginx:v1 bash
</code></pre>
<h3 id="t9321.2 搭建php镜像">21.2 搭建php镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9321.2%20%E6%90%AD%E5%BB%BAphp%E9%95%9C%E5%83%8F"> # </a></h3>
<h4 id="t9421.2.1 下载php">21.2.1 下载php <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9421.2.1%20%E4%B8%8B%E8%BD%BDphp"> # </a></h4>
<pre><code class="lang-js">cd /usr/local/src
wget http:<span class="hljs-comment">//img.zhufengpeixun.cn/libmcrypt-2.5.8.tar.gz</span>
wget http:<span class="hljs-comment">//img.zhufengpeixun.cn/php-5.6.31.tar.gz</span>
</code></pre>
<h4 id="t9521.2.2 Dockerfile">21.2.2 Dockerfile <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9521.2.2%20Dockerfile"> # </a></h4>
<pre><code class="lang-js">FROM centos
MAINTAINER zhufengjiagou
RUN yum -y install gcc gcc-c++ make automake autoconf libtool openssl-devel pcre-devel libxml2 libxml2-devel bzip2 bzip2-devel libjpeg-turbo libjpeg-turbo-devel libpng libpng-devel freetype freetype-devel zlib zlib-devel libcurl libcurl-devel
ADD libmcrypt<span class="hljs-number">-2.5</span><span class="hljs-number">.8</span>.tar.gz /tmp
RUN cd /tmp/libmcrypt<span class="hljs-number">-2.5</span><span class="hljs-number">.8</span> &amp;&amp; \
    ./configure &amp;&amp; \
    make -j <span class="hljs-number">2</span> &amp;&amp; \
    make install
ADD php<span class="hljs-number">-5.6</span><span class="hljs-number">.31</span>.tar.gz /tmp
RUN cd /tmp/php<span class="hljs-number">-5.6</span><span class="hljs-number">.31</span> &amp;&amp; \
    ./configure --prefix=<span class="hljs-regexp">/usr/</span>local/php --<span class="hljs-keyword">with</span>-pdo-mysql=mysqlnd --<span class="hljs-keyword">with</span>-mysqli=mysqlnd --<span class="hljs-keyword">with</span>-mysql=mysqlnd --<span class="hljs-keyword">with</span>-openssl --enable-mbstring --<span class="hljs-keyword">with</span>-freetype-dir --<span class="hljs-keyword">with</span>-jpeg-dir --<span class="hljs-keyword">with</span>-png-dir --<span class="hljs-keyword">with</span>-mcrypt --<span class="hljs-keyword">with</span>-zlib --<span class="hljs-keyword">with</span>-libxml-dir=<span class="hljs-regexp">/usr --enable-xml  --enable-sockets --enable-fpm --with-config-file-path=/u</span>sr/local/php/etc --<span class="hljs-keyword">with</span>-bz2 --<span class="hljs-keyword">with</span>-gd &amp;&amp; \
    make -j <span class="hljs-number">2</span> &amp;&amp; \
    make install
RUN cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
RUN sed -i <span class="hljs-string">'s/127.0.0.1/0.0.0.0/g'</span> /usr/local/php/etc/php-fpm.conf
RUN sed -i  <span class="hljs-string">'89a daemonize = no'</span> /usr/local/php/etc/php-fpm.conf
RUN rm -rf /tmp/php<span class="hljs-number">-5.6</span><span class="hljs-number">.30</span> &amp;&amp; yum clean all 
WORKDIR /usr/local/php 
EXPOSE <span class="hljs-number">9000</span>
CMD [<span class="hljs-string">"/usr/local/php/sbin/php-fpm"</span>,<span class="hljs-string">"-c"</span>,<span class="hljs-string">"/usr/local/php/etc/php-fpm.conf"</span>]
</code></pre>
<h4 id="t9621.1.3 打包镜像">21.1.3 打包镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9621.1.3%20%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F"> # </a></h4>
<pre><code class="lang-js">docker image build -t zfphp:v1 -f Dockerfile .
</code></pre>
<h4 id="t9721.1.4 使用镜像">21.1.4 使用镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9721.1.4%20%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F"> # </a></h4>
<pre><code class="lang-js">docker container run -it zfphp:v1 bash
</code></pre>
<h2 id="t9822. 布署Java网站">22. 布署Java网站 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9822.%20%E5%B8%83%E7%BD%B2Java%E7%BD%91%E7%AB%99"> # </a></h2>
<h3 id="t9922.1 下载安装包">22.1 下载安装包 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t9922.1%20%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85"> # </a></h3>
<ul>
<li><a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase10-4425482.html">java</a></li>
<li><a href="http://tomcat.apache.org/download-70.cgi">tomcat</a></li>
</ul>
<pre><code class="lang-js">cd /usr/local/src/java
wget  http:<span class="hljs-comment">//img.zhufengpeixun.cn/jdk1.8.0_211.tar.gz</span>
wget  http:<span class="hljs-comment">//img.zhufengpeixun.cn/apache-tomcat-7.0.94.tar.gz</span>
</code></pre>
<h3 id="t10022.2 镜像文件">22.2 镜像文件 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t10022.2%20%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6"> # </a></h3>
<p>Dockerfile</p>
<pre><code class="lang-js">FROM centos
MAINTAINER zhufengjiagou
ADD  jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_211.tar.gz /usr/local
ENV JAVA_HOME /usr/local/jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_211
ADD apache-tomcat<span class="hljs-number">-7.0</span><span class="hljs-number">.94</span>.tar.gz /usr/local
RUN rm -f /usr/local<span class="hljs-comment">/*.tar.gz
WORKDIR /usr/local/apache-tomcat-7.0.94
EXPOSE 8080
ENTRYPOINT ["./bin/catalina.sh","run"]
</span></code></pre>
<h3 id="t10122.3 打包镜像">22.3 打包镜像 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t10122.3%20%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F"> # </a></h3>
<pre><code class="lang-js">docker image build -t zftomcat:v1 -f Dockerfile .
</code></pre>
<h3 id="t10222.4 启动容器">22.4 启动容器 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t10222.4%20%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8"> # </a></h3>
<pre><code class="lang-js">docker run -itd \
--name=tomcat \
-p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> \
--mount type=bind,src=<span class="hljs-regexp">/app/</span>webapps,dst=<span class="hljs-regexp">/usr/</span>local/apache-tomcat<span class="hljs-number">-7.0</span><span class="hljs-number">.94</span>/webapps \
zftomcat:v1
</code></pre>
<h2 id="t10320. 参考">20. 参考 <a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html#t10320.%20%E5%8F%82%E8%80%83"> # </a></h2>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">yaml</a></li>
<li><a href="https://www.npmjs.com/package/mysql">mysql</a></li>
</ul>

        <div class="copyright">Powered by <a href="https://github.com/jaywcjlove/idoc" target="_blank">idoc</a>. Dependence <a href="https://nodejs.org/">Node.js</a> run.</div>
    </div>
    
</div>

<script src="./61.11.devops-docker_files/jquery.js"></script>
<script>
$('.warpper .page-toc ul ul li a').on('click',function(){
  $('.warpper .page-toc ul ul li a').removeClass('my-active')
  $(this).addClass('my-active')
})

$('.logo').on('mouseenter',function(){
  $('.nav').height('400px');
})
$('.nav').on('mouseleave',function(){
  $('.nav').height('80px');
})
$('.logo').on('click',function(){
  $('.nav').css('display','none');
 $('.warpper').css('padding','0px');
})
// if (!$('.understand-me').length) {
  //   var bar = $(window).height() - $('.navbar ').height() - $('.page-toc').position().top;
  //   var count = bar / 26 / 2;
  //   var barHeight = $('.page-toc').outerHeight();
  //   $('.page-toc li').eq(0).children('a').addClass('red');
  //   var arr = [];
  //   $("h1,h2,h3,h4,h5,h6").each(function () {
  //     arr.push($(this).position().top);
  //   });
  //   var timer
  //   function dark() {
  //     clearTimeout(timer)
  //      timer = setTimeout(function () {
  //      var top = Math.abs($('.page-toc > ul').position().top);
  //      var cur = $('.content').scrollTop();
  //      for (var i = arr.length; i >= 0; i--) {
  //        if (arr[i] <= cur) {
  //          break;
  //        }
  //      }
  //      if (i === -1) {
  //        i = 0;
  //      }
  //      $('.page-toc li a').removeClass('red');
  //      $('.page-toc li').eq(i).children('a').addClass('red');
  //      let height = $('.page-toc li').eq(i).position().top-$('.page-toc').height(); // 如果当前的offset出去了 回到中间可好？
  //      $('.page-toc').scrollTop(height+$('.page-toc').height()/2);
  //    },200)
  //   }

  //   $('.content').on('scroll', dark);
  // }
</script>
<style>

    /* ::-webkit-scrollbar{width:14px;}
    ::-webkit-scrollbar-track{background-color:transparent;}
    ::-webkit-scrollbar-thumb{background-color:transparent;}
    ::-webkit-scrollbar-thumb:hover {background-color:transparent}
    ::-webkit-scrollbar-thumb:active {background-color:transparent} */

    .page-toc > ul .red {
        background: #f3f3f3;
        z-index: 1;
        border-left: 3px solid #009a61;
        -webkit-transition: all .2s ease;
        transition: all .2s ease;
        color: #000
    }





</style>


</body></html>