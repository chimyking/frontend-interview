<!DOCTYPE html>
<!-- saved from url=(0061)http://www.zhufengpeixun.cn/architecture/html/60.react-2.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>珠峰架构师成长计划</title>
    <link rel="stylesheet" type="text/css" href="./60.react-2_files/main.css">
<style type="text/css" abt="234"></style><script>//console.log('a')
</script><script>//remove 17173 video ad
doAdblock();
function doAdblock(){
    (function() {
        function A() {}
        A.prototype = {
            rules: {
                '17173_in':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_in_20150522.swf"
                },
                '17173_out':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_out_20150522.swf"
                },
                '17173_live':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_stream_20150522.swf"
                },
                '17173_live_out':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                    'replace':"http://swf.adtchrome.com/17173.out.Live.swf"
                }
            },
            _done: null,
            get done() {
                if(!this._done) {
                    this._done = new Array();
                }
                return this._done;
            },
            addAnimations: function() {
                var style = document.createElement('style');
                style.type = 'text/css';
                style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                document.getElementsByTagName('head')[0].appendChild(style);
            },
            animationsHandler: function(e) {
                if(e.animationName === 'playerInserted') {
                    this.replace(e.target);
                }
            },
            replace: function(elem) {
                if(this.done.indexOf(elem) != -1) return;
                this.done.push(elem);
                var player = elem.data || elem.src;
                if(!player) return;
                var i, find, replace = false;
                for(i in this.rules) {
                    find = this.rules[i]['find'];
                    if(find.test(player)) {
                        replace = this.rules[i]['replace'];
                        if('function' === typeof this.rules[i]['preHandle']) {
                            this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                        }else{
                            this.reallyReplace.bind(this, elem, find, replace)();
                        }
                        break;
                    }
                }
            },
            reallyReplace: function(elem, find, replace) {
                elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem.src = elem.src.replace(find, replace)) && (elem.style.display = 'block'));
                var b = elem.querySelector("param[name='movie']");
                this.reloadPlugin(elem);
            },
            reloadPlugin: function(elem) {
                var nextSibling = elem.nextSibling;
                var parentNode = elem.parentNode;
                parentNode.removeChild(elem);
                var newElem = elem.cloneNode(true);
                this.done.push(newElem);
                if(nextSibling) {
                    parentNode.insertBefore(newElem, nextSibling);
                } else {
                    parentNode.appendChild(newElem);
                }
            },
            init: function() {
                var handler = this.animationsHandler.bind(this);
                document.body.addEventListener('webkitAnimationStart', handler, false);
                document.body.addEventListener('msAnimationStart', handler, false);
                document.body.addEventListener('oAnimationStart', handler, false);
                document.body.addEventListener('animationstart', handler, false);
                this.addAnimations();
            }
        };
        new A().init();
    })();
}
//remove baidu search ad
if(document.URL.indexOf('www.baidu.com') >= 0){
    if(document && document.getElementsByTagName && document.getElementById && document.body){
        var aa = function(){
            var all = document.body.querySelectorAll("#content_left div,#content_left table");
            for(var i = 0; i < all.length; i++){
                if(/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))){all[i].style.display= "none";all[i].style.visibility='hidden';}
            }
            all = document.body.querySelectorAll('.result.c-container[id="1"]');
            //if(all.length == 1) return;
            for(var i = 0; i < all.length; i++){
                if(all[i].innerHTML && all[i].innerHTML.indexOf('广告')>-1){
                    all[i].style.display= "none";all[i].style.visibility='hidden';
                }
            }
        }
        aa();
        document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified',aa)
    };
}
//remove sohu video ad
if (document.URL.indexOf("tv.sohu.com") >= 0){
    if (document.cookie.indexOf("fee_status=true")==-1){document.cookie='fee_status=true'};
}
//remove 56.com video ad
if (document.URL.indexOf("56.com") >= 0){
    if (document.cookie.indexOf("fee_status=true")==-1){document.cookie='fee_status=true'};
}
//fore iqiyi enable html5 player function
if (document.URL.indexOf("iqiyi.com") >= 0){
    if (document.cookie.indexOf("player_forcedType=h5_VOD")==-1){
        document.cookie='player_forcedType=h5_VOD'
        if(localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime)<60000){
            console.log('no reload')
        }else{
            location.reload()
            localStorage.reloadTime = Date.now();
        }
    }
}
</script><style type="text/css">object,embed{                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;                -o-animation-duration:.001s;-o-animation-name:playerInserted;                animation-duration:.001s;animation-name:playerInserted;}                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}</style></head>
<body>
<div class="nav">
    <div class="logo">
        
            珠峰架构师成长计划
        
    </div>
<ul><li><a href="http://www.zhufengpeixun.cn/architecture/index.html">0.Async</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/0.editor.html">0.editor</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/0.module.html">0.module</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/1.ES2015.html">1.ES2015</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/2.Promise.html">2.Promise</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/3.Node.html">3.Node</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/4.NodeInstall.html">4.NodeInstall</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/5.REPL.html">5.REPL</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/6.NodeCore.html">6.NodeCore</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/7.module&amp;NPM.html">7.module&amp;NPM</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/8.Encoding.html">8.Encoding</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/9.Buffer.html">9.Buffer</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/10.fs.html">10.fs</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/11.Stream-1.html">11.Stream-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/11.Stream-2.html">11.Stream-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/11.Stream-3.html">11.Stream-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/11.Stream-4.html">11.Stream-4</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/12-Network-2.html">12-Network-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/12.NetWork-3.html">12.NetWork-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/12.Network-1.html">12.Network-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/13.tcp.html">13.tcp</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/14.http-1.html">14.http-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/14.http-2.html">14.http-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/15.compress.html">15.compress</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/16.crypto.html">16.crypto</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/17.process.html">17.process</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/18.yargs.html">18.yargs</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/19.cache.html">19.cache</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/20.action.html">20.action</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/21.https.html">21.https</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/22.cookie.html">22.cookie</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/23.session.html">23.session</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/24.express-1.html">24.express-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/24.express-2.html">24.express-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/24.express-3.html">24.express-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/24.express-4.html">24.express-4</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/25.koa-1.html">25.koa-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-1-basic.html">26.webpack-1-basic</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-2-optimize.html">26.webpack-2-optimize</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-3.tapable.html">26.webpack-3.tapable</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-4-AST.html">26.webpack-4-AST</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-5-source.html">26.webpack-5-source</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-6-loader.html">26.webpack-6-loader</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-7-plugin.html">26.webpack-7-plugin</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/26.webpack-8-hand.html">26.webpack-8-hand</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-1.html">27.react-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-2.html">27.react-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-3.html">27.react-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-4-immutable.html">27.react-4-immutable</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-5-react-dom-diff.html">27.react-5-react-dom-diff</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/27.react-6.html">27.react-6</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.react-mobx.html">28.react-mobx</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-0.html">28.redux-0</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-1.html">28.redux-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-2-%E4%B8%AD%E9%97%B4%E4%BB%B6.html">28.redux-2-中间件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-jwt-back.html">28.redux-jwt-back</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/28.redux-jwt-front.html">28.redux-jwt-front</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-1.html">29.mongodb-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-2.html">29.mongodb-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-3.html">29.mongodb-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-4.html">29.mongodb-4</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-5.html">29.mongodb-5</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/29.mongodb-6.html">29.mongodb-6</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-1-mysql.html">30.cms-1-mysql</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-2-mysql.html">30.cms-2-mysql</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-3-mysql.html">30.cms-3-mysql</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-4-nunjucks.html">30.cms-4-nunjucks</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-5-mock.html">30.cms-5-mock</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-6-egg.html">30.cms-6-egg</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-7-api.html">30.cms-7-api</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-8-roadhog.html">30.cms-8-roadhog</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-9-yaml.html">30.cms-9-yaml</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-10-umi.html">30.cms-10-umi</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-11-saga.html">30.cms-11-saga</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-12-dva.html">30.cms-12-dva</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-13-dva-ant.html">30.cms-13-dva-ant</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-14-front.html">30.cms-14-front</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/30.cms-15-deploy.html">30.cms-15-deploy</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/31.dva.html">31.dva</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/31.saga.html">31.saga</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/33.redis.html">33.redis</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/34.unittest.html">34.unittest</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/35.jwt.html">35.jwt</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/36.websocket-1.html">36.websocket-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/36.websocket-2.html">36.websocket-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat-api-1.html">38.chat-api-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat-api-2.html">38.chat-api-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat-3.html">38.chat-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat-api-3.html">38.chat-api-3</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat.html">38.chat</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat2.html">38.chat2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/38.chat2.html">38.chat2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/39.crawl-0.html">39.crawl-0</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/39.crawl-1.html">39.crawl-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/39.crawl-2.html">39.crawl-2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/40.deploy.html">40.deploy</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/41.safe.html">41.safe</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/42.test.html">42.test</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/43.nginx.html">43.nginx</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/44.enzyme.html">44.enzyme</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/45.docker.html">45.docker</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/46.elastic.html">46.elastic</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/47.oauth.html">47.oauth</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/48.wxpay.html">48.wxpay</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/index.html">index</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/51.typescript.html">51.typescript</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/52.UML.html">52.UML</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/53.design.html">53.design</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/index.html">index</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/54.linux.html">54.linux</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/57.ts.html">57.ts</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/56.react-ssr.html">56.react-ssr</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/58.ts_react.html">58.ts_react</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/59.ketang.html">59.ketang</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/59.ketang2.html">59.ketang2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react.html">60.react</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-1.html">60.react-1</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.1.devops-linux.html">61.1.devops-linux</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.2.devops-vi.html">61.2.devops-vi</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.3.devops-user.html">61.3.devops-user</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.4.devops-auth.html">61.4.devops-auth</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.5.devops-shell.html">61.5.devops-shell</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.6.devops-install.html">61.6.devops-install</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.7.devops-system.html">61.7.devops-system</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.8.devops-service.html">61.8.devops-service</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.9.devops-network.html">61.9.devops-network</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.10.devops-nginx.html">61.10.devops-nginx</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.11.devops-docker.html">61.11.devops-docker</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.12.devops-jekins.html">61.12.devops-jekins</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.13.devops-groovy.html">61.13.devops-groovy</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.14.devops-php.html">61.14.devops-php</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.15.devops-java.html">61.15.devops-java</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.16.devops-node.html">61.16.devops-node</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/62.1.react-basic.html">62.1.react-basic</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/62.2.react-state.html">62.2.react-state</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/62.3.react-high.html">62.3.react-high</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/62.4.react-hooks.html">62.4.react-hooks</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/63.1.redux.html">63.1.redux</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/63.2.redux-middleware.html">63.2.redux-middleware</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/63.3.redux-saga.html">63.3.redux-saga</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/63.4.redux-saga-hand.html">63.4.redux-saga-hand</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/64.1.router.html">64.1.router</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/64.2.router-connected.html">64.2.router-connected</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/65.1.typescript.html">65.1.typescript</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/65.2.typescript.html">65.2.typescript</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/65.3.typescript.html">65.3.typescript</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/65.4.antd.html">65.4.antd</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-1.vue-base.html">66-1.vue-base</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-2.vue-component.html">66-2.vue-component</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-3.vue-cli3.0.html">66-3.vue-cli3.0</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-4.$message%E7%BB%84%E4%BB%B6.html">66-4.$message组件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-5.Form%E7%BB%84%E4%BB%B6.html">66-5.Form组件</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-6.tree.html">66-6.tree</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-7.vue-router-apply.html">66-7.vue-router-apply</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-8.axios-apply.html">66-8.axios-apply</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-9.vuex-apply.html">66-9.vuex-apply</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-10.jwt-vue.html">66-10.jwt-vue</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-11.vue-ssr.html">66-11.vue-ssr</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-12.nuxt-apply.html">66-12.nuxt-apply</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-13.pwa.html">66-13.pwa</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-14.vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html">66-14.vue单元测试</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/66-15.%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C.html">66-15.权限校验</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/67-1-network.html">67-1-network</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/68-2-wireshark.html">68-2-wireshark</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/7.npm2.html">7.npm2</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/31.cms-13-dva-antdesign.html">31.cms-13-dva-antdesign</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/69-hooks.html">69-hooks</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/70-deploy.html">70-deploy</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/61.17.devops-k8s.html">61.17.devops-k8s</a></li><li class="active"><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html">60.react-2</a></li></ul></div>


<div class="warpper">

    <div class="page-toc">
        <ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t01.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE">1.初始化项目</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t12.%20%E6%B8%B2%E6%9F%93%E6%96%87%E6%9C%AC">2. 渲染文本</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t22.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">2.1 渲染效果</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t32.2%20%E5%AE%9E%E7%8E%B0">2.2 实现</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t42.2.1%20index.js">2.2.1 index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t52.2.2%20react.js">2.2.2 react.js</a></li></ul></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t63.%20%E9%87%8D%E6%9E%84">3. 重构</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t73.2%20%E7%B1%BB%E5%9B%BE">3.2 类图</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t83.3%20%E5%AE%9E%E7%8E%B0">3.3 实现</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t93.3.1%20index.js">3.3.1 index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t103.3.2%20react\index.js">3.3.2 react\index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t113.3.3%20react\unit.js">3.3.3 react\unit.js</a></li></ul></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t124.%20%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%94%9FDOM%E7%BB%84%E4%BB%B6">4. 渲染原生DOM组件</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t134.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">4.1 渲染效果</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t144.2%20%E7%B1%BB%E5%9B%BE">4.2 类图</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t154.3%20JSX%E8%AF%AD%E6%B3%95">4.3 JSX语法</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t164.3.1%20JSX">4.3.1 JSX</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t174.3.2%20JavaScript">4.3.2 JavaScript</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t184.4%20%E5%AE%9E%E7%8E%B0">4.4 实现</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t194.4.1%20%20index.js">4.4.1  index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t204.4.2%20react/index.js">4.4.2 react/index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t214.4.3%20react/element.js">4.4.3 react/element.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t224.4.4%20react/unit.js">4.4.4 react/unit.js</a></li></ul></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t235.%20%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6">5. 渲染自定义组件</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t245.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C">5.1 渲染效果</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t255.2%20%E7%B1%BB%E5%9B%BE">5.2 类图</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t265.3%20%E5%AE%9E%E7%8E%B0">5.3 实现</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t275.3.1%20src/index.js">5.3.1 src/index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t285.3.2%20react/index.js">5.3.2 react/index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t295.3.3%20react/component.js">5.3.3 react/component.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t305.3.4%20react/unit.js">5.3.4 react/unit.js</a></li></ul></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t316.%20%E5%AE%9E%E7%8E%B0setState">6. 实现setState</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t326.1%20src/index.js">6.1 src/index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t336.2%20react/component.js">6.2 react/component.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t346.3%20react/unit.js">6.3 react/unit.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t356.4%20react/element.js">6.4 react/element.js</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t367.%20%E5%AF%B9%E6%AF%94%E5%B1%9E%E6%80%A7">7. 对比属性</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t377.1%20%20src/index.js">7.1  src/index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t387.2%20react/unit.js">7.2 react/unit.js</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t398.%20%E5%AF%B9%E6%AF%94%E5%AD%90%E5%85%83%E7%B4%A0">8. 对比子元素</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t408.1%20src/unit.js">8.1 src/unit.js</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t419.%20%E8%8E%B7%E5%BE%97%E8%A1%A5%E4%B8%81%E6%95%B0%E7%BB%84">9. 获得补丁数组</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t429.1%20src/index.js">9.1 src/index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t439.2%20src/react/unit.js">9.2 src/react/unit.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t449.3%20types.js">9.3 types.js</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4510.%20%E6%89%93%E8%A1%A5%E4%B8%81">10. 打补丁</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4610.1%20src/index.js">10.1 src/index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4710.2%20react/unit.js">10.2 react/unit.js</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4811.%20todos">11. todos</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4911.1%20src/index.js">11.1 src/index.js</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5011.2%20react/unit.js">11.2 react/unit.js</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5110.%20diff%20%E7%AD%96%E7%95%A5">10. diff 策略</a><ul><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5210.1%20tree%20diff">10.1 tree diff</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5310.2%20component%20%20diff">10.2 component  diff</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5410.3%20element%20diff">10.3 element diff</a></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5510.4%20key">10.4 key</a></li></ul></li><li><a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5611.delegate">11.delegate</a></li></ul>
    </div>
    
    <div class="content markdown-body">
        <h2 id="t01.初始化项目">1.初始化项目 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t01.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE"> # </a></h2>
<pre><code class="lang-js">create-react-app zhufeng_react5
cd zhufeng_react5
cnpm i jquery -S
npm start
</code></pre>
<h2 id="t12. 渲染文本">2. 渲染文本 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t12.%20%E6%B8%B2%E6%9F%93%E6%96%87%E6%9C%AC"> # </a></h2>
<h3 id="t22.1 渲染效果">2.1 渲染效果 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t22.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C"> # </a></h3>
<p><img src="./60.react-2_files/1.initrenderhtml.png" alt="initrenderhtml"></p>
<h3 id="t32.2 实现">2.2 实现 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t32.2%20%E5%AE%9E%E7%8E%B0"> # </a></h3>
<h4 id="t42.2.1 index.js">2.2.1 index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t42.2.1%20index.js"> # </a></h4>
<p>src\index.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
React.render(<span class="hljs-string">'hello'</span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h4 id="t52.2.2 react.js">2.2.2 react.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t52.2.2%20react.js"> # </a></h4>
<p>src\react.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;
<span class="hljs-keyword">let</span> React = {
    <span class="hljs-attr">rootIndex</span>:<span class="hljs-number">0</span>,
    render
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">element,container</span>)</span>{
   container.innerHTML = <span class="hljs-string">`&lt;span data-reactid="<span class="hljs-subst">${React.rootIndex}</span>"&gt;<span class="hljs-subst">${element}</span>&lt;/span&gt;`</span>;
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React;
</code></pre>
<h2 id="t63. 重构">3. 重构 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t63.%20%E9%87%8D%E6%9E%84"> # </a></h2>
<h3 id="t73.2 类图">3.2 类图 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t73.2%20%E7%B1%BB%E5%9B%BE"> # </a></h3>
<p><img src="./60.react-2_files/2.rendertext.jpg" alt="2.rendertext"></p>
<h3 id="t83.3 实现">3.3 实现 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t83.3%20%E5%AE%9E%E7%8E%B0"> # </a></h3>
<h4 id="t93.3.1 index.js">3.3.1 index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t93.3.1%20index.js"> # </a></h4>
<p>src\index.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
React.render(<span class="hljs-string">'hello'</span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h4 id="t103.3.2 react\index.js">3.3.2 react\index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t103.3.2%20react\index.js"> # </a></h4>
<p>src\react\index.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span>;
<span class="hljs-keyword">import</span> {createUnit} <span class="hljs-keyword">from</span> <span class="hljs-string">'./unit'</span>;
<span class="hljs-keyword">let</span> React = {
    <span class="hljs-attr">rootIndex</span>:<span class="hljs-number">0</span>,
    render
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">element,container</span>)</span>{
   <span class="hljs-keyword">let</span> unit = createUnit(element);
   <span class="hljs-keyword">let</span> markup = unit.getMarkUp(React.rootIndex);
   $(container).html(markup);
   $(<span class="hljs-built_in">document</span>).trigger(<span class="hljs-string">'mounted'</span>);<span class="hljs-comment">//componentDidMount</span>
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React;
</code></pre>
<h4 id="t113.3.3 react\unit.js">3.3.3 react\unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t113.3.3%20react\unit.js"> # </a></h4>
<p>src\react\unit.js</p>
<pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unit</span> </span>{
    <span class="hljs-keyword">constructor</span>(element){
        <span class="hljs-keyword">this</span>._currentElement = element;
    }
    getMarkUp(){
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'不能调用此方法'</span>);
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>{
    getMarkUp(reactid){
         <span class="hljs-keyword">this</span>._reactid = reactid;<span class="hljs-comment">//保存记录rootId</span>
        <span class="hljs-comment">//返回文本节点对应的HTML字符串</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span data-reactid="<span class="hljs-subst">${reactid}</span>"&gt;<span class="hljs-subst">${<span class="hljs-keyword">this</span>._currentElement}</span>&lt;/span&gt;`</span>;
    }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createUnit</span>(<span class="hljs-params">element</span>)</span>{
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> element ==<span class="hljs-string">'string'</span> || <span class="hljs-keyword">typeof</span> element ==<span class="hljs-string">'number'</span>){
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TextUnit(element);
  }
}

<span class="hljs-keyword">export</span> {
    createUnit
}
</code></pre>
<h2 id="t124. 渲染原生DOM组件">4. 渲染原生DOM组件 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t124.%20%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%94%9FDOM%E7%BB%84%E4%BB%B6"> # </a></h2>
<ul>
<li><a href="http://https//babeljs.io/repl/">babeljs</a></li>
</ul>
<h3 id="t134.1 渲染效果">4.1 渲染效果 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t134.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C"> # </a></h3>
<p><img src="./60.react-2_files/3.renderdom.png" alt="renderdom"></p>
<h3 id="t144.2 类图">4.2 类图 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t144.2%20%E7%B1%BB%E5%9B%BE"> # </a></h3>
<p><img src="./60.react-2_files/3. rendernativeunit.jpg" alt="20rendernativeunit"></p>
<h3 id="t154.3 JSX语法">4.3 JSX语法 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t154.3%20JSX%E8%AF%AD%E6%B3%95"> # </a></h3>
<p><img src="./60.react-2_files/2.compile.png" alt="compile"></p>
<h4 id="t164.3.1 JSX">4.3.1 JSX <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t164.3.1%20JSX"> # </a></h4>
<pre><code class="lang-js">&lt;button id=<span class="hljs-string">"sayHello"</span> onClick={sayHello}&gt;say&lt;b style={{<span class="hljs-attr">color</span>:<span class="hljs-string">'red'</span>}}&gt;Hello&lt;<span class="hljs-regexp">/b&gt;&lt;/</span>button&gt;
</code></pre>
<h4 id="t174.3.2 JavaScript">4.3.2 JavaScript <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t174.3.2%20JavaScript"> # </a></h4>
<pre><code class="lang-js"><span class="hljs-keyword">let</span> element = React.createElement(<span class="hljs-string">"button"</span>, {
    <span class="hljs-attr">id</span>: <span class="hljs-string">"sayHello"</span>,
    <span class="hljs-attr">onClick</span>: sayHello
  }, <span class="hljs-string">"say"</span>, React.createElement(<span class="hljs-string">"b"</span>, {<span class="hljs-attr">style</span>:{<span class="hljs-attr">color</span>:<span class="hljs-string">'red'</span>}}, <span class="hljs-string">"Hello"</span>));
</code></pre>
<h3 id="t184.4 实现">4.4 实现 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t184.4%20%E5%AE%9E%E7%8E%B0"> # </a></h3>
<h4 id="t194.4.1  index.js">4.4.1  index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t194.4.1%20%20index.js"> # </a></h4>
<p>src/index.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>{
  alert(<span class="hljs-string">'hello'</span>);
}
<span class="hljs-keyword">let</span> element = React.createElement(
    <span class="hljs-string">'button'</span>,{<span class="hljs-attr">id</span>:<span class="hljs-string">'sayHello'</span>,<span class="hljs-attr">onClick</span>:sayHello},
    <span class="hljs-string">'say'</span>,
    React.createElement(<span class="hljs-string">'b'</span>,{<span class="hljs-attr">style</span>:{<span class="hljs-attr">color</span>:<span class="hljs-string">'green'</span>}},<span class="hljs-string">'hello'</span>),
);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h4 id="t204.4.2 react/index.js">4.4.2 react/index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t204.4.2%20react/index.js"> # </a></h4>
<p>src/react/index.js</p>
<pre><code class="lang-diff">import $ from 'jquery';
import {createUnit} from './unit';
<span class="hljs-addition">+import {createElement} from './element';</span>
let React = {
    rootIndex:0,
    render,
<span class="hljs-addition">+    createElement</span>
}
function render(element,container){
   let unit = createUnit(element);
   let markup = unit.getMarkUp(React.rootIndex);
   $(container).html(markup);
   $(document).trigger('mounted');//componentDidMount
}

export default React;
</code></pre>
<h4 id="t214.4.3 react/element.js">4.4.3 react/element.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t214.4.3%20react/element.js"> # </a></h4>
<p>src/react/element.js</p>
<pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Element</span></span>{
    <span class="hljs-keyword">constructor</span>(type,props){
        <span class="hljs-keyword">this</span>.type = type;
        <span class="hljs-keyword">this</span>.props = props;
    }
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createElement</span>(<span class="hljs-params">type,props,...children</span>)</span>{
    props=props||{};
    props.children  = children;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Element(type,props);
}

<span class="hljs-keyword">export</span> {
    createElement
}
</code></pre>
<h4 id="t224.4.4 react/unit.js">4.4.4 react/unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t224.4.4%20react/unit.js"> # </a></h4>
<p>src/react/unit.js</p>
<pre><code class="lang-diff"><span class="hljs-addition">+import {Element} from './element';</span>
<span class="hljs-addition">+import $ from 'jquery';</span>
class Unit {
    constructor(element){
        this._currentElement = element;
    }
    getMarkUp(){
        throw new Error('不能调用此方法');
    }
}
class TextUnit extends Unit{
    getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        return `&lt;span data-reactid="${reactid}"&gt;${this._currentElement}&lt;/span&gt;`;
    }
}
<span class="hljs-addition">+class NativeUnit extends Unit {</span>
<span class="hljs-addition">+     getMarkUp(reactid){</span>
<span class="hljs-addition">+         this._reactid = reactid;//保存记录reactid</span>
<span class="hljs-addition">+        //返回文本节点对应的HTML字符串</span>
<span class="hljs-addition">+        let {type,props} = this._currentElement;</span>
<span class="hljs-addition">+        let tagOpen = `&lt;${type} data-reactid="${reactid}" `;</span>
<span class="hljs-addition">+        let tagClose = `&lt;/$type&gt;`;</span>
<span class="hljs-addition">+        let content = '';</span>
<span class="hljs-addition">+        for(let propName in props){</span>
<span class="hljs-addition">+            if(/^on[A-Z]/.test(propName)){</span>
<span class="hljs-addition">+                let eventName = propName.slice(2).toLowerCase();</span>
<span class="hljs-addition">+                $(document).delegate(`[data-reactid="${reactid}"]`,`${eventName}.${reactid}`,props[propName]);</span>
<span class="hljs-addition">+            }else if(propName === 'style'){</span>
<span class="hljs-addition">+                let styleObj = props[propName];</span>
<span class="hljs-addition">+                let styles = Object.keys(styleObj).map(attr=&gt;`${attr}:${styleObj[attr]}`).join(';');</span>
<span class="hljs-addition">+                tagOpen += (` style="${styles}" `);</span>
<span class="hljs-addition">+            }else if (propName === 'children'){</span>
<span class="hljs-addition">+                let children = props.children||[];</span>
<span class="hljs-addition">+                children.map((child,index)=&gt;{</span>
<span class="hljs-addition">+                    let childUnit = createUnit(child);</span>
<span class="hljs-addition">+                    let childMarkUp = childUnit.getMarkUp(`${reactid}.${index}`);</span>
<span class="hljs-addition">+                    content += childMarkUp;</span>
<span class="hljs-addition">+                });</span>
<span class="hljs-addition">+            }else{</span>
<span class="hljs-addition">+                tagOpen += ` ${propName}=${props[propName]} `;</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+        return tagOpen + '&gt;' + content + tagClose;</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+}</span>
function createUnit(element){
  if(typeof element =='string' || typeof element =='number'){
      return new TextUnit(element);
  }
<span class="hljs-addition">+  if(element instanceof Element &amp;&amp; typeof element.type === 'string'){</span>
<span class="hljs-addition">+      return new NativeUnit(element);</span>
<span class="hljs-addition">+  }</span>
}

export {
    createUnit
}
</code></pre>
<h2 id="t235. 渲染自定义组件">5. 渲染自定义组件 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t235.%20%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6"> # </a></h2>
<h3 id="t245.1 渲染效果">5.1 渲染效果 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t245.1%20%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C"> # </a></h3>
<p><img src="./60.react-2_files/5.customercomponent.png" alt="customercomponent"></p>
<h3 id="t255.2 类图">5.2 类图 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t255.2%20%E7%B1%BB%E5%9B%BE"> # </a></h3>
<p><img src="./60.react-2_files/4. rendercustomerunit.jpg" alt="20rendercustomerunit"></p>
<h3 id="t265.3 实现">5.3 实现 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t265.3%20%E5%AE%9E%E7%8E%B0"> # </a></h3>
<h4 id="t275.3.1 src/index.js">5.3.1 src/index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t275.3.1%20src/index.js"> # </a></h4>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }
  componentWillMount(){
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Counter componentWillMount'</span>)
  }
  componentDidMount() {
     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Counter componentDidMount'</span>)
  }
  handleClick = <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
  }
  render(){
    <span class="hljs-keyword">let</span> p = React.createElement(<span class="hljs-string">'p'</span>,{<span class="hljs-attr">style</span>:{<span class="hljs-attr">color</span>:<span class="hljs-string">'red'</span>}},<span class="hljs-keyword">this</span>.state.number);
    <span class="hljs-keyword">let</span> button = React.createElement(<span class="hljs-string">'button'</span>,{<span class="hljs-attr">onClick</span>:<span class="hljs-keyword">this</span>.handleClick},<span class="hljs-string">'+'</span>);
    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'div'</span>,{<span class="hljs-attr">id</span>:<span class="hljs-string">'counter'</span>},p,button);
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h4 id="t285.3.2 react/index.js">5.3.2 react/index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t285.3.2%20react/index.js"> # </a></h4>
<p>src/react/index.js</p>
<pre><code class="lang-diff">import $ from 'jquery';
import {createUnit} from './unit';
import {createElement} from './element';
<span class="hljs-addition">+import {Component} from './component';</span>
let React = {
    rootIndex:0,
    render,
    createElement,
<span class="hljs-addition">+    Component</span>
}
function render(element,container){
   let unit = createUnit(element);
   let markup = unit.getMarkUp(React.rootIndex);
   $(container).html(markup);
   $(document).trigger('mounted');//componentDidMount
}

export default React;
</code></pre>
<h4 id="t295.3.3 react/component.js">5.3.3 react/component.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t295.3.3%20react/component.js"> # </a></h4>
<p>src/react/component.js</p>
<pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
        <span class="hljs-keyword">this</span>.props = props;
    }
}
<span class="hljs-keyword">export</span> {Component}
</code></pre>
<h4 id="t305.3.4 react/unit.js">5.3.4 react/unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t305.3.4%20react/unit.js"> # </a></h4>
<p>src/react/unit.js</p>
<pre><code class="lang-diff">import {Element} from './element';
import $ from 'jquery';
class Unit {
    constructor(element){
        this._currentElement = element;
    }
    getMarkUp(){
        throw new Error('不能调用此方法');
    }
}
class TextUnit extends Unit{
    getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        return `&lt;span data-reactid="${reactid}"&gt;${this._currentElement}&lt;/span&gt;`;
    }
}
class NativeUnit extends Unit {
     getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        let {type,props} = this._currentElement;
        let tagOpen = `&lt;${type} data-reactid="${reactid}" `;
        let tagClose = `&lt;/$type&gt;`;
        let content = '';
        for(let propName in props){
            if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).delegate(`[data-reactid="${reactid}"]`,`${eventName}.${reactid}`,props[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = props[propName];
                let styles = Object.keys(styleObj).map(attr=&gt;`${attr}:${styleObj[attr]}`).join(';');
                tagOpen += (` style="${styles}" `);
            }else if (propName <span class="hljs-comment">=== 'children'){</span>
                let children = props.children||[];
                children.map((child,index)=&gt;{
                    let childUnit = createUnit(child);
                    let childMarkUp = childUnit.getMarkUp(`${reactid}.${index}`);
                    content += childMarkUp;
                });
            }else{
                tagOpen += ` ${propName}=${props[propName]} `;
            }
        }
        return tagOpen + '&gt;' + content + tagClose;
    }
}

<span class="hljs-addition">+class CompositeUnit extends Unit{</span>
<span class="hljs-addition">+    getMarkUp(reactid){</span>
<span class="hljs-addition">+        this._reactid = reactid;</span>
<span class="hljs-addition">+        //type是一个自定义组件的类的定义</span>
<span class="hljs-addition">+        let {type:Component,props} = this._currentElement;</span>
<span class="hljs-addition">+        //创建Component类的实例</span>
<span class="hljs-addition">+        let componentInstance = new Component(props);</span>
<span class="hljs-addition">+        //组件将要渲染</span>
<span class="hljs-addition">+        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();</span>
<span class="hljs-addition">+        //执行render方法获得虚拟DOM元素实例</span>
<span class="hljs-addition">+        let renderedElement = componentInstance.render();</span>
<span class="hljs-addition">+        //根据虚拟DOM元素得到unit,可能是TextUnit NativeUnit CompositeUnit</span>
<span class="hljs-addition">+        let renderedUnitInstance = this._renderedUnitInstance= createUnit(renderedElement);</span>
<span class="hljs-addition">+        //获得此unit的HTML标记字符串</span>
<span class="hljs-addition">+        let renderedMarkUp = renderedUnitInstance.getMarkUp(reactid);</span>
<span class="hljs-addition">+        //注册挂载完成的监听，越底层的组件越先监听，越先执行</span>
<span class="hljs-addition">+        $(document).on('mounted',()=&gt;componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount());</span>
<span class="hljs-addition">+        return renderedMarkUp;</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+}</span>

function createUnit(element){
  if(typeof element =='string' || typeof element =='number'){
      return new TextUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'string'){</span>
      return new NativeUnit(element);
  }
<span class="hljs-addition">+  if(element instanceof Element &amp;&amp; typeof element.type === 'function'){</span>
<span class="hljs-addition">+      return new CompositeUnit(element);</span>
<span class="hljs-addition">+  }</span>
}

export {
    createUnit
}
</code></pre>
<h2 id="t316. 实现setState">6. 实现setState <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t316.%20%E5%AE%9E%E7%8E%B0setState"> # </a></h2>
<h3 id="t326.1 src/index.js">6.1 src/index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t326.1%20src/index.js"> # </a></h3>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }
  componentWillMount(){
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Counter componentWillMount'</span>)
  }
  componentDidMount() {
     setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
       <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
     }, <span class="hljs-number">1000</span>);
  }
  render(){
   <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.state.number;
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h3 id="t336.2 react/component.js">6.2 react/component.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t336.2%20react/component.js"> # </a></h3>
<p>src/react/component.js</p>
<pre><code class="lang-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
        <span class="hljs-keyword">this</span>.props = props;
    }
    setState(partialState){
        <span class="hljs-keyword">this</span>._currentUnit.update(<span class="hljs-literal">null</span>,partialState);
    }
}
<span class="hljs-keyword">export</span> {Component}
</code></pre>
<h3 id="t346.3 react/unit.js">6.3 react/unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t346.3%20react/unit.js"> # </a></h3>
<p>src/react/unit.js</p>
<pre><code class="lang-diff">import {Element} from './element';
import $ from 'jquery';
class Unit {
    constructor(element){
        this._currentElement = element;
    }
    getMarkUp(){
        throw new Error('不能调用此方法');
    }
}
class TextUnit extends Unit{
    getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        return `&lt;span data-reactid="${reactid}"&gt;${this._currentElement}&lt;/span&gt;`;
    }
<span class="hljs-addition">+    update(nextElement){</span>
<span class="hljs-addition">+        if(this._currentElement != nextElement){</span>
<span class="hljs-addition">+            this._currentElement = nextElement;</span>
<span class="hljs-addition">+            $(`[data-reactid="${this._reactid}"]`).html(this._currentElement);</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+    }</span>
}
class NativeUnit extends Unit {
     getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        let {type,props} = this._currentElement;
        let tagOpen = `&lt;${type} data-reactid="${reactid}" `;
        let tagClose = `&lt;/$type&gt;`;
        let content = '';
        for(let propName in props){
            if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).delegate(`[data-reactid="${reactid}"]`,`${eventName}.${reactid}`,props[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = props[propName];
                let styles = Object.keys(styleObj).map(attr=&gt;`${attr}:${styleObj[attr]}`).join(';');
                tagOpen += (` style="${styles}" `);
            }else if (propName <span class="hljs-comment">=== 'children'){</span>
                let children = props.children||[];
                children.map((child,index)=&gt;{
                    let childUnit = createUnit(child);
                    let childMarkUp = childUnit.getMarkUp(`${reactid}.${index}`);
                    content += childMarkUp;
                });
            }else{
                tagOpen += ` ${propName}=${props[propName]} `;
            }
        }
        return tagOpen + '&gt;' + content + tagClose;
    }
}

class CompositeUnit extends Unit{
    //接收到新的更新，自定义组件传第二个参数，原生组件和text传处一个参数
<span class="hljs-addition">+    update(nextElement,partialState){</span>
<span class="hljs-addition">+        //如果传过来了新的元素，则使用新的元素</span>
<span class="hljs-addition">+        this._currentElement = nextElement||this._currentElement;</span>
<span class="hljs-addition">+        //获取新的状态对象和属性对象</span>
<span class="hljs-addition">+        let nextState = this._componentInstance.state= Object.assign(this._componentInstance.state,partialState);</span>
<span class="hljs-addition">+        let nextProps = this._currentElement.props;</span>
<span class="hljs-addition">+        //如果shouldComponentUpdate返回了false则不需要继续更新</span>
<span class="hljs-addition">+        if(this._componentInstance.shouldComponentUpdate&amp;&amp;this._componentInstance.shouldComponentUpdate(nextProps,nextState)===false){return;}</span>
<span class="hljs-addition">+        //获得上次渲染出来的unit实例 </span>
<span class="hljs-addition">+        let prevRenderedUnitInstance = this._renderedUnitInstance;</span>
<span class="hljs-addition">+        //从unit实例中获取</span>
<span class="hljs-addition">+        let prevRenderedElement = prevRenderedUnitInstance._currentElement;</span>
<span class="hljs-addition">+        //获取新的虚拟DOM</span>
<span class="hljs-addition">+        let nextRenderElement = this._componentInstance.render();</span>
<span class="hljs-addition">+        //进行domdiff对比</span>
<span class="hljs-addition">+        if(shouldDeepCompare(prevRenderedElement,nextRenderElement)){</span>
<span class="hljs-addition">+            //如果需要更新，则继续调用子节点的upate方法进行更新,传入新的element更新子节点</span>
<span class="hljs-addition">+            prevRenderedUnitInstance.update(nextRenderElement);</span>
<span class="hljs-addition">+            this._componentInstance.componentDidUpdate&amp;&amp;this._componentInstance.componentDidUpdate();</span>
<span class="hljs-addition">+        }else{</span>
<span class="hljs-addition">+            //如果发现不需要对比，干脆重新渲染</span>
<span class="hljs-addition">+            this._renderedUnitInstance =  createUnit(nextRenderElement);</span>
<span class="hljs-addition">+            let nextMarkUp = this._renderedUnitInstance.getMarkUp(this._reactid);</span>
<span class="hljs-addition">+            //替换整个节点</span>
<span class="hljs-addition">+            $(`[data-reactid="${this._reactid}"]`).replaceWith(nextMarkUp);</span>
<span class="hljs-addition">+        }</span>

    }
    getMarkUp(reactid){
        this._reactid = reactid;
        //type是一个自定义组件的类的定义
        let {type:Component,props} = this._currentElement;
        //创建Component类的实例
<span class="hljs-addition">+        let componentInstance = this._componentInstance = new Component(props);</span>
        //组件实例关联上自己的unit实例
<span class="hljs-addition">+        componentInstance._currentUnit  = this;</span>
        //组件将要渲染
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        //执行render方法获得虚拟DOM元素实例
        let renderedElement = componentInstance.render();
        //根据虚拟DOM元素得到unit,可能是TextUnit NativeUnit CompositeUnit
        let renderedUnitInstance = this._renderedUnitInstance= createUnit(renderedElement);
        //获得此unit的HTML标记字符串
        let renderedMarkUp = renderedUnitInstance.getMarkUp(reactid);
        //注册挂载完成的监听，越底层的组件越先监听，越先执行
        $(document).on('mounted',()=&gt;componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount());
        return renderedMarkUp;
    }
}

<span class="hljs-addition">+function shouldDeepCompare(prevElement,nextElement){</span>
<span class="hljs-addition">+   if(prevElement!==null &amp;&amp; nextElement!=null){</span>
<span class="hljs-addition">+       let prevType = typeof prevElement;</span>
<span class="hljs-addition">+       let nextType = typeof nextElement;</span>
<span class="hljs-addition">+       //如果新老节点都是文本可以进行比较</span>
<span class="hljs-addition">+       if((prevType === 'string' ||prevType === 'number')&amp;&amp;(nextType === 'string' ||nextType === 'number')){</span>
<span class="hljs-addition">+           return true;</span>
<span class="hljs-addition">+       }</span>
<span class="hljs-addition">+       if(prevElement instanceof Element &amp;&amp; nextElement instanceof Element){</span>
<span class="hljs-addition">+           return prevElement.type === nextElement.type;</span>
<span class="hljs-addition">+       }</span>
<span class="hljs-addition">+   }  </span>
<span class="hljs-addition">+   return false;</span>
<span class="hljs-addition">+}</span>
function createUnit(element){
  if(typeof element =='string' || typeof element =='number'){
      return new TextUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'string'){</span>
      return new NativeUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'function'){</span>
      return new CompositeUnit(element);
  }
}

export {
    createUnit
}
</code></pre>
<h3 id="t356.4 react/element.js">6.4 react/element.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t356.4%20react/element.js"> # </a></h3>
<p>src/react/element.js</p>
<pre><code class="lang-diff">class Element{
    constructor(type,props){
        this.type = type;
<span class="hljs-addition">+       this.key = props.key;</span>
        this.props = props;
    }
}
</code></pre>
<h2 id="t367. 对比属性">7. 对比属性 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t367.%20%E5%AF%B9%E6%AF%94%E5%B1%9E%E6%80%A7"> # </a></h2>
<ul>
<li>实现点击加1功能</li>
</ul>
<h3 id="t377.1  src/index.js">7.1  src/index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t377.1%20%20src/index.js"> # </a></h3>
<p>src/index.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">number</span>:<span class="hljs-number">0</span>};
  }
  componentWillMount(){
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Counter componentWillMount'</span>)
  }
  componentDidMount() {
     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Counter componentDidMount'</span>)
  }
  handleClick= <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">number</span>:<span class="hljs-keyword">this</span>.state.number+<span class="hljs-number">1</span>});
  }
  render(){
   <span class="hljs-keyword">let</span> p = React.createElement(<span class="hljs-string">'p'</span>,{},<span class="hljs-keyword">this</span>.state.number);
   <span class="hljs-keyword">let</span> button = React.createElement(<span class="hljs-string">'button'</span>,{<span class="hljs-attr">onClick</span>:<span class="hljs-keyword">this</span>.handleClick},<span class="hljs-string">'+'</span>);
   <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'div'</span>,{<span class="hljs-attr">id</span>:<span class="hljs-string">'counter'</span>,<span class="hljs-attr">style</span>:{<span class="hljs-attr">color</span>:<span class="hljs-keyword">this</span>.state.number%<span class="hljs-number">2</span>===<span class="hljs-number">0</span>?<span class="hljs-string">'red'</span>:<span class="hljs-string">'green'</span>,<span class="hljs-attr">backgroundColor</span>:<span class="hljs-keyword">this</span>.state.number%<span class="hljs-number">2</span>===<span class="hljs-number">0</span>?<span class="hljs-string">'green'</span>:<span class="hljs-string">'red'</span>}},p,button);
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h3 id="t387.2 react/unit.js">7.2 react/unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t387.2%20react/unit.js"> # </a></h3>
<p>src/react/unit.js</p>
<pre><code class="lang-diff">import {Element} from './element';
import $ from 'jquery';
class Unit {
    constructor(element){
        this._currentElement = element;
    }
    getMarkUp(){
        throw new Error('不能调用此方法');
    }
}
class TextUnit extends Unit{
    getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        return `&lt;span data-reactid="${reactid}"&gt;${this._currentElement}&lt;/span&gt;`;
    }
    update(nextElement){
        if(this._currentElement != nextElement){
            this._currentElement = nextElement;
            $(`[data-reactid="${this._reactid}"]`).html(this._currentElement);
        }
    }

}
class NativeUnit extends Unit {
     getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        let {type,props} = this._currentElement;
        let tagOpen = `&lt;${type} data-reactid="${reactid}" `;
        let tagClose = `&lt;/$type&gt;`;
        let content = '';
        for(let propName in props){
            if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).delegate(`[data-reactid="${reactid}"]`,`${eventName}.${reactid}`,props[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
<span class="hljs-addition">+                let styleObj = props[propName];</span>
<span class="hljs-addition">+                let styles = Object.keys(styleObj).map(attr=&gt;{</span>
<span class="hljs-addition">+                    let attrName = attr.replace(/([A-Z])/g,function(matched,group){</span>
<span class="hljs-addition">+                        return `-${group.toLowerCase()}`;</span>
<span class="hljs-addition">+                    })</span>
<span class="hljs-addition">+                    return `${attrName}:${styleObj[attr]}`;</span>
<span class="hljs-addition">+                }).join(';');</span>
<span class="hljs-addition">+                tagOpen += (` style="${styles}" `);</span>
            }else if (propName <span class="hljs-comment">=== 'children'){</span>
                let children = props.children||[];
                children.map((child,index)=&gt;{
                    let childUnit = createUnit(child);
                    let childMarkUp = childUnit.getMarkUp(`${reactid}.${index}`);
                    content += childMarkUp;
                });
            }else{
                tagOpen += ` ${propName}=${props[propName]} `;
            }
        }
        return tagOpen + '&gt;' + content + tagClose;
    }
<span class="hljs-addition">+    update(nextElement){</span>
<span class="hljs-addition">+        let oldProps = this._currentElement.props;</span>
<span class="hljs-addition">+        let newProps = nextElement.props;</span>
<span class="hljs-addition">+        this.updateDOMproperties(oldProps,newProps);</span>
<span class="hljs-addition">+        //this.updateDOMChildren(nextElement.props.children);</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    updateDOMproperties(oldProps,newProps){</span>
<span class="hljs-addition">+        let propName;</span>
<span class="hljs-addition">+        //把新属性对象上没有属性给删除掉</span>
<span class="hljs-addition">+        for(propName in oldProps){</span>
<span class="hljs-addition">+            if(!newProps.hasOwnProperty(propName)){</span>
<span class="hljs-addition">+                $(`[data-reactid="${this._reactid}"]`).removeAttr(propName);</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+            if(/^on[A-Z]/.test(propName)){</span>
<span class="hljs-addition">+                $(document).undelegate(`.${this.reactid}`);</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+        for(propName in newProps){</span>
<span class="hljs-addition">+            if(propName == 'children'){</span>
<span class="hljs-addition">+                </span>
<span class="hljs-addition">+            }else if(/^on[A-Z]/.test(propName)){</span>
<span class="hljs-addition">+                let eventName = propName.slice(2).toLowerCase();</span>
<span class="hljs-addition">+                $(document).delegate(`[data-reactid="${this._reactid}"]`,`${eventName}.${this._reactid}`,newProps[propName]);</span>
<span class="hljs-addition">+            }else if(propName === 'style'){</span>
<span class="hljs-addition">+                let styleObj = newProps[propName];</span>
<span class="hljs-addition">+                Object.entries(styleObj).forEach(([attr,value])=&gt;{</span>
<span class="hljs-addition">+                  $(`[data-reactid="${this._reactid}"]`).css(attr,value);</span>
<span class="hljs-addition">+                })</span>
<span class="hljs-addition">+            }else{</span>
<span class="hljs-addition">+                $(`[data-reactid="${this._reactid}"]`).prop(propName,newProps[propName]);</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+}</span>

class CompositeUnit extends Unit{
    //接收到新的更新，自定义组件传第二个参数，原生组件和text传处一个参数
    update(nextElement,partialState){
        //如果传过来了新的元素，则使用新的元素
        this._currentElement = nextElement||this._currentElement;
        //获取新的状态对象和属性对象
        let nextState = this._componentInstance.state= Object.assign(this._componentInstance.state,partialState);
        let nextProps = this._currentElement.props;
        //如果shouldComponentUpdate返回了false则不需要继续更新
        if(this._componentInstance.shouldComponentUpdate&amp;&amp;this._componentInstance.shouldComponentUpdate(nextProps,nextState)<span class="hljs-comment">===false){return;}</span>
        //获得上次渲染出来的unit实例 
        let prevRenderedUnitInstance = this._renderedUnitInstance;
        //从unit实例中获取
        let prevRenderedElement = prevRenderedUnitInstance._currentElement;
        //获取新的虚拟DOM
        let nextRenderElement = this._componentInstance.render();
        //进行domdiff对比
        if(shouldDeepCompare(prevRenderedElement,nextRenderElement)){
            //如果需要更新，则继续调用子节点的upate方法进行更新,传入新的element更新子节点
            prevRenderedUnitInstance.update(nextRenderElement);
            this._componentInstance.componentDidUpdate&amp;&amp;this._componentInstance.componentDidUpdate();
        }else{
            //如果发现不需要对比，干脆重新渲染
            this._renderedUnitInstance =  createUnit(nextRenderElement);
            let nextMarkUp = this._renderedUnitInstance.getMarkUp(this._reactid);
            //替换整个节点
            $(`[data-reactid="${this._reactid}"]`).replaceWith(nextMarkUp);
        }

    }
    getMarkUp(reactid){
        this._reactid = reactid;
        //type是一个自定义组件的类的定义
        let {type:Component,props} = this._currentElement;
        //创建Component类的实例
        let componentInstance = this._componentInstance = new Component(props);
        //组件实例关联上自己的unit实例
        componentInstance._currentUnit  = this;
        //组件将要渲染
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        //执行render方法获得虚拟DOM元素实例
        let renderedElement = componentInstance.render();
        //根据虚拟DOM元素得到unit,可能是TextUnit NativeUnit CompositeUnit
        let renderedUnitInstance = this._renderedUnitInstance= createUnit(renderedElement);
        //获得此unit的HTML标记字符串
        let renderedMarkUp = renderedUnitInstance.getMarkUp(reactid);
        //注册挂载完成的监听，越底层的组件越先监听，越先执行
        $(document).on('mounted',()=&gt;componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount());
        return renderedMarkUp;
    }
}

function shouldDeepCompare(prevElement,nextElement){
   if(prevElement!==null &amp;&amp; nextElement!=null){
       let prevType = typeof prevElement;
       let nextType = typeof nextElement;
       //如果新老节点都是文本可以进行比较
       if((prevType <span class="hljs-comment">=== 'string' ||prevType === 'number')&amp;&amp;(nextType === 'string' ||nextType === 'number')){</span>
           return true;
       }
       if(prevElement instanceof Element &amp;&amp; nextElement instanceof Element){
           return prevElement.type <span class="hljs-comment">=== nextElement.type;</span>
       }
   }  
   return false;
}
function createUnit(element){
  if(typeof element =='string' || typeof element =='number'){
      return new TextUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'string'){</span>
      return new NativeUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'function'){</span>
      return new CompositeUnit(element);
  }
}

export {
    createUnit
}
</code></pre>
<h2 id="t398. 对比子元素">8. 对比子元素 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t398.%20%E5%AF%B9%E6%AF%94%E5%AD%90%E5%85%83%E7%B4%A0"> # </a></h2>
<h3 id="t408.1 src/unit.js">8.1 src/unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t408.1%20src/unit.js"> # </a></h3>
<p>src\unit.js</p>
<pre><code class="lang-diff">import {Element} from './element';
import $ from 'jquery';
<span class="hljs-addition">+ let diffQueue = [];</span>
class Unit {
    constructor(element){
        this._currentElement = element;
    }
    getMarkUp(){
        throw new Error('不能调用此方法');
    }
}
class TextUnit extends Unit{
    getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        return `&lt;span data-reactid="${reactid}"&gt;${this._currentElement}&lt;/span&gt;`;
    }
    update(nextElement){
        if(this._currentElement != nextElement){
            this._currentElement = nextElement;
            $(`[data-reactid="${this._reactid}"]`).html(this._currentElement);
        }
    }

}
class NativeUnit extends Unit {
     getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        let {type,props} = this._currentElement;
        let tagOpen = `&lt;${type} data-reactid="${reactid}" `;
        let tagClose = `&lt;/$type&gt;`;
        let content = '';
<span class="hljs-addition">+        let renderedChildUnits=[];</span>
        for(let propName in props){
            if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).delegate(`[data-reactid="${reactid}"]`,`${eventName}.${reactid}`,props[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = props[propName];
                let styles = Object.keys(styleObj).map(attr=&gt;{
                    let attrName = attr.replace(/([A-Z])/g,function(matched,group){
                        return `-${group.toLowerCase()}`;
                    })
                    return `${attrName}:${styleObj[attr]}`;
                }).join(';');
                tagOpen += (` style="${styles}" `);
            }else if (propName <span class="hljs-comment">=== 'children'){</span>
                let children = props.children||[];
                children.map((child,index)=&gt;{
                    let childUnit = createUnit(child);
<span class="hljs-addition">+                    renderedChildUnits.push(childUnit);</span>
                    let childMarkUp = childUnit.getMarkUp(`${reactid}.${index}`);
                    content += childMarkUp;
                });
            }else{
                tagOpen += ` ${propName}=${props[propName]} `;
            }
        }
<span class="hljs-addition">+        this._renderedChildUnits = renderedChildUnits;</span>
        return tagOpen + '&gt;' + content + tagClose;
    }
    update(nextElement){
        let oldProps = this._currentElement.props;
        let newProps = nextElement.props;
        this.updateDOMproperties(oldProps,newProps);
<span class="hljs-addition">+        this.updateDOMChildren(nextElement.props.children);</span>
    }
<span class="hljs-addition">+    //对比子元素</span>
<span class="hljs-addition">+    updateDOMChildren(newChildrenElements){</span>
<span class="hljs-addition">+        this.diff(diffQueue,newChildrenElements);</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    diff(diffQueue,newChildrenElements){</span>
<span class="hljs-addition">+        let oldChildUnitsMap = this.getChildrenMap(this._renderedChildUnits);</span>
<span class="hljs-addition">+        let newChildren = this.getNewChildren(oldChildUnitsMap,newChildrenElements);</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    getNewChildren(oldChildUnitsMap,newChildrenElements){</span>
<span class="hljs-addition">+        let newChildren = [];</span>
<span class="hljs-addition">+        newChildrenElements.forEach((newElement,index)=&gt;{</span>
<span class="hljs-addition">+            let newKey = newElement.key||index.toString();</span>
<span class="hljs-addition">+            let oldUnit = oldChildUnitsMap[newKey];//获得老的unit</span>
<span class="hljs-addition">+            let oldElement = oldUnit&amp;&amp;oldUnit._currentElement;//获得老的element</span>
<span class="hljs-addition">+            if(shouldDeepCompare(oldElement,newElement)){//如果可以更进一步深比较</span>
<span class="hljs-addition">+                oldUnit.update(newElement);</span>
<span class="hljs-addition">+                newChildren.push(oldUnit);</span>
<span class="hljs-addition">+            }else{</span>
<span class="hljs-addition">+                let newChildUnit = createUnit(newElement);//如果不需要深比较则直接创建新的unit</span>
<span class="hljs-addition">+                newChildren.push(newChildUnit);</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        });</span>
<span class="hljs-addition">+        return newChildren;</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    getChildrenMap(childUnits=[]){</span>
<span class="hljs-addition">+        let map = {};</span>
<span class="hljs-addition">+        for(let i=0;i&lt;childUnits.length;i++){</span>
<span class="hljs-addition">+            let key = childUnits[i].key||i.toString();</span>
<span class="hljs-addition">+            map[key]=childUnits[i];</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+        return map;</span>
<span class="hljs-addition">+    }</span>
    updateDOMproperties(oldProps,newProps){
        let propName;
        //把新属性对象上没有属性给删除掉
        for(propName in oldProps){
            if(!newProps.hasOwnProperty(propName)){
                $(`[data-reactid="${this._reactid}"]`).removeAttr(propName);
            }
            if(/^on[A-Z]/.test(propName)){
                $(document).undelegate(`.${this._reactid}`);
            }
        }
        for(propName in newProps){
            if(propName == 'children'){

            }else if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).undelegate(`.${this._reactid}`);
                $(document).delegate(`[data-reactid="${this._reactid}"]`,`${eventName}.${this._reactid}`,newProps[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = newProps[propName];
                Object.entries(styleObj).forEach(([attr,value])=&gt;{
                  $(`[data-reactid="${this._reactid}"]`).css(attr,value);
                })
            }else{
                $(`[data-reactid="${this._reactid}"]`).prop(propName,newProps[propName]);
            }
        }
    }
}

class CompositeUnit extends Unit{
    //接收到新的更新，自定义组件传第二个参数，原生组件和text传处一个参数
    update(nextElement,partialState){
        //如果传过来了新的元素，则使用新的元素
        this._currentElement = nextElement||this._currentElement;
        //获取新的状态对象和属性对象
        let nextState = this._componentInstance.state= Object.assign(this._componentInstance.state,partialState);
        let nextProps = this._currentElement.props;
        //如果shouldComponentUpdate返回了false则不需要继续更新
        if(this._componentInstance.shouldComponentUpdate&amp;&amp;this._componentInstance.shouldComponentUpdate(nextProps,nextState)<span class="hljs-comment">===false){return;}</span>
        //获得上次渲染出来的unit实例 
        let prevRenderedUnitInstance = this._renderedUnitInstance;
        //从unit实例中获取
        let prevRenderedElement = prevRenderedUnitInstance._currentElement;
        //获取新的虚拟DOM
        let nextRenderElement = this._componentInstance.render();
        //进行domdiff对比
        if(shouldDeepCompare(prevRenderedElement,nextRenderElement)){
            //如果需要更新，则继续调用子节点的upate方法进行更新,传入新的element更新子节点
            prevRenderedUnitInstance.update(nextRenderElement);
            this._componentInstance.componentDidUpdate&amp;&amp;this._componentInstance.componentDidUpdate();
        }else{
            //如果发现不需要对比，干脆重新渲染
            this._renderedUnitInstance =  createUnit(nextRenderElement);
            let nextMarkUp = this._renderedUnitInstance.getMarkUp(this._reactid);
            //替换整个节点
            $(`[data-reactid="${this._reactid}"]`).replaceWith(nextMarkUp);
        }

    }
    getMarkUp(reactid){
        this._reactid = reactid;
        //type是一个自定义组件的类的定义
        let {type:Component,props} = this._currentElement;
        //创建Component类的实例
        let componentInstance = this._componentInstance = new Component(props);
        //组件实例关联上自己的unit实例
        componentInstance._currentUnit  = this;
        //组件将要渲染
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        //执行render方法获得虚拟DOM元素实例
        let renderedElement = componentInstance.render();
        //根据虚拟DOM元素得到unit,可能是TextUnit NativeUnit CompositeUnit
        let renderedUnitInstance = this._renderedUnitInstance= createUnit(renderedElement);
        //获得此unit的HTML标记字符串
        let renderedMarkUp = renderedUnitInstance.getMarkUp(reactid);
        //注册挂载完成的监听，越底层的组件越先监听，越先执行
        $(document).on('mounted',()=&gt;componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount());
        return renderedMarkUp;
    }
}

function shouldDeepCompare(prevElement,nextElement){
   if(prevElement!==null &amp;&amp; nextElement!=null){
       let prevType = typeof prevElement;
       let nextType = typeof nextElement;
       //如果新老节点都是文本可以进行比较
       if((prevType <span class="hljs-comment">=== 'string' ||prevType === 'number')&amp;&amp;(nextType === 'string' ||nextType === 'number')){</span>
           return true;
       }
       if(prevElement instanceof Element &amp;&amp; nextElement instanceof Element){
           return prevElement.type <span class="hljs-comment">=== nextElement.type;</span>
       }
   }  
   return false;
}
function createUnit(element){
  if(typeof element =='string' || typeof element =='number'){
      return new TextUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'string'){</span>
      return new NativeUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'function'){</span>
      return new CompositeUnit(element);
  }
}

export {
    createUnit
}
</code></pre>
<h2 id="t419. 获得补丁数组">9. 获得补丁数组 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t419.%20%E8%8E%B7%E5%BE%97%E8%A1%A5%E4%B8%81%E6%95%B0%E7%BB%84"> # </a></h2>
<p><img src="./60.react-2_files/diffold.png" alt="diffold"></p>
<p><img src="./60.react-2_files/diffnew.png" alt="diffnew"></p>
<p><img src="./60.react-2_files/domdiff2.gif" alt="domdiff2"></p>
<h3 id="t429.1 src/index.js">9.1 src/index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t429.1%20src/index.js"> # </a></h3>
<p>src/index.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">odd</span>:<span class="hljs-literal">true</span>};
  }
  componentDidMount(){
   setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">odd</span>:!<span class="hljs-keyword">this</span>.state.odd});
   },<span class="hljs-number">1000</span>);
  }
  render(){
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.state.odd){
      <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'ul'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'wrapper'</span>},
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'A'</span>},<span class="hljs-string">'A'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'B'</span>},<span class="hljs-string">'B'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'C'</span>},<span class="hljs-string">'C'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'D'</span>},<span class="hljs-string">'D'</span>),
      );
    }
    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'ul'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'wrapper'</span>},
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'A'</span>},<span class="hljs-string">'A1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'C'</span>},<span class="hljs-string">'C1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'B'</span>},<span class="hljs-string">'B1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'E'</span>},<span class="hljs-string">'E1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'F'</span>},<span class="hljs-string">'F1'</span>)
      );
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h3 id="t439.2 src/react/unit.js">9.2 src/react/unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t439.2%20src/react/unit.js"> # </a></h3>
<p>src/react/unit.js</p>
<pre><code class="lang-diff">import {Element} from './element';
import $ from 'jquery';
<span class="hljs-addition">+import types from './types';</span>
<span class="hljs-addition">+let diffQueue = [];</span>
<span class="hljs-addition">+let updateDepth=0;</span>
class Unit {
    constructor(element){
        this._currentElement = element;
    }
    getMarkUp(){
        throw new Error('不能调用此方法');
    }
}
class TextUnit extends Unit{
    getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        return `&lt;span data-reactid="${reactid}"&gt;${this._currentElement}&lt;/span&gt;`;
    }
    update(nextElement){
        if(this._currentElement != nextElement){
            this._currentElement = nextElement;
            $(`[data-reactid="${this._reactid}"]`).html(this._currentElement);
        }
    }

}
class NativeUnit extends Unit {
     getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        let {type,props} = this._currentElement;
        let tagOpen = `&lt;${type} data-reactid="${reactid}" `;
        let tagClose = `&lt;/$type&gt;`;
        let content = '';
        let renderedChildUnits=[];
        for(let propName in props){
            if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).delegate(`[data-reactid="${reactid}"]`,`${eventName}.${reactid}`,props[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = props[propName];
                let styles = Object.keys(styleObj).map(attr=&gt;{
                    let attrName = attr.replace(/([A-Z])/g,function(matched,group){
                        return `-${group.toLowerCase()}`;
                    })
                    return `${attrName}:${styleObj[attr]}`;
                }).join(';');
                tagOpen += (` style="${styles}" `);
            }else if (propName <span class="hljs-comment">=== 'children'){</span>
                let children = props.children||[];
                children.map((child,index)=&gt;{
                    let childUnit = createUnit(child);
                    childUnit._mountIndex = index;
                    renderedChildUnits.push(childUnit);
                    let childMarkUp = childUnit.getMarkUp(`${reactid}.${index}`);
                    content += childMarkUp;
                });
            }else{
                tagOpen += ` ${propName}=${props[propName]} `;
            }
        }
        this._renderedChildUnits = renderedChildUnits;
        return tagOpen + '&gt;' + content + tagClose;
    }
    update(nextElement){
        let oldProps = this._currentElement.props;
        let newProps = nextElement.props;
        this.updateDOMproperties(oldProps,newProps);
        this.updateDOMChildren(nextElement.props.children);
    }
    //对比子元素
<span class="hljs-addition">+    updateDOMChildren(newChildrenElements){</span>
<span class="hljs-addition">+        updateDepth++;</span>
<span class="hljs-addition">+        this.diff(diffQueue,newChildrenElements);</span>
<span class="hljs-addition">+        updateDepth--;</span>
<span class="hljs-addition">+        if(updateDepth===0){</span>
<span class="hljs-addition">+            console.log('diffQueue',diffQueue);</span>
<span class="hljs-addition">+            diffQueue=[];</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    diff(diffQueue,newChildrenElements){</span>
<span class="hljs-addition">+        let oldChildUnitsMap = this.getChildrenMap(this._renderedChildUnits);</span>
<span class="hljs-addition">+        let {newChildrenMap,newChildren} = this.getNewChildren(oldChildUnitsMap,newChildrenElements);</span>
<span class="hljs-addition">+        // lastIndex里存放着被复用的子元素的最大索引</span>
<span class="hljs-addition">+        let lastIndex = 0;</span>
<span class="hljs-addition">+        for(let i=0;i&lt;newChildren.length;i++){</span>
<span class="hljs-addition">+            let newChild = newChildren[i];//取得新元素</span>
<span class="hljs-addition">+            let newKey = (newChild._currentElement.props&amp;&amp;newChild._currentElement.key)||i.toString();//取得新key</span>
<span class="hljs-addition">+            let oldChild = oldChildUnitsMap[newKey];</span>
<span class="hljs-addition">+            if(oldChild === newChild){</span>
<span class="hljs-addition">+                if(oldChild._mountIndex &lt; lastIndex){</span>
<span class="hljs-addition">+                    diffQueue.push({</span>
<span class="hljs-addition">+                        parentId:this._reactid,</span>
<span class="hljs-addition">+                        parentNode:$(`[data-reactid="${this._reactid}"]`),</span>
<span class="hljs-addition">+                        type:types.MOVE,</span>
<span class="hljs-addition">+                        fromIndex:oldChild._mountIndex,</span>
<span class="hljs-addition">+                        toIndex:i</span>
<span class="hljs-addition">+                    });</span>
<span class="hljs-addition">+                }</span>
<span class="hljs-addition">+                lastIndex = Math.max(oldChild._mountIndex,lastIndex);</span>
<span class="hljs-addition">+                //否则根本不用移动，直接修改挂载索引为新索引i即可</span>
<span class="hljs-addition">+            }else{</span>
<span class="hljs-addition">+                if(oldChild){</span>
<span class="hljs-addition">+                    diffQueue.push({</span>
<span class="hljs-addition">+                        parentId:this._reactid,</span>
<span class="hljs-addition">+                        parentNode:$(`[data-reactid="${this._reactid}"]`),</span>
<span class="hljs-addition">+                        type:types.REMOVE,</span>
<span class="hljs-addition">+                        fromIndex:oldChild._mountIndex</span>
<span class="hljs-addition">+                    });</span>
<span class="hljs-addition">+                    $(document).undelegate(`.${oldChild._reactid}`);</span>
<span class="hljs-addition">+                }</span>
<span class="hljs-addition">+                 diffQueue.push({</span>
<span class="hljs-addition">+                        parentId:this._reactid,</span>
<span class="hljs-addition">+                        parentNode:$(`[data-reactid="${this._reactid}"]`),</span>
<span class="hljs-addition">+                        type:types.INSERT,</span>
<span class="hljs-addition">+                        toIndex:i,</span>
<span class="hljs-addition">+                        markUp:newChild.getMarkUp(`${this._reactid}.${i}`)</span>
<span class="hljs-addition">+                });</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+            newChild._mountIndex = i;</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+        for(let oldKey in oldChildUnitsMap){</span>
<span class="hljs-addition">+            if(!newChildrenMap.hasOwnProperty(oldKey)){</span>
<span class="hljs-addition">+                let oldChild = oldChildUnitsMap[oldKey];</span>
<span class="hljs-addition">+                diffQueue.push({</span>
<span class="hljs-addition">+                        parentId:this._reactid,</span>
<span class="hljs-addition">+                        parentNode:$(`[data-reactid="${this._reactid}"]`),</span>
<span class="hljs-addition">+                        type:types.REMOVE,</span>
<span class="hljs-addition">+                        fromIndex:oldChild._mountIndex</span>
<span class="hljs-addition">+                });</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    getNewChildren(oldChildUnitsMap,newChildrenElements){</span>
<span class="hljs-addition">+        let newChildren = [];</span>
<span class="hljs-addition">+        let newChildrenMap={};</span>
<span class="hljs-addition">+        newChildrenElements.forEach((newElement,index)=&gt;{</span>
<span class="hljs-addition">+            let newKey = newElement.key||index.toString();</span>
<span class="hljs-addition">+            let oldUnit = oldChildUnitsMap[newKey];//获得老的unit</span>
<span class="hljs-addition">+            let oldElement = oldUnit&amp;&amp;oldUnit._currentElement;//获得老的element</span>
<span class="hljs-addition">+            if(shouldDeepCompare(oldElement,newElement)){//如果可以更进一步深比较</span>
<span class="hljs-addition">+                oldUnit.update(newElement);</span>
<span class="hljs-addition">+                newChildren.push(oldUnit);</span>
<span class="hljs-addition">+                newChildrenMap[newKey]=oldUnit;</span>
<span class="hljs-addition">+            }else{</span>
<span class="hljs-addition">+                let newChildUnit = createUnit(newElement);//如果不需要深比较则直接创建新的unit</span>
<span class="hljs-addition">+                newChildren.push(newChildUnit);</span>
<span class="hljs-addition">+                 newChildrenMap[newKey]=newChildUnit;</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        });</span>
<span class="hljs-addition">+        return {newChildrenMap,newChildren};</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    getChildrenMap(childUnits=[]){</span>
<span class="hljs-addition">+        let map = {};</span>
<span class="hljs-addition">+        for(let i=0;i&lt;childUnits.length;i++){</span>
<span class="hljs-addition">+            let key = (childUnits[i]._currentElement.props&amp;&amp;childUnits[i]._currentElement.props.key)||i.toString();</span>
<span class="hljs-addition">+            map[key]=childUnits[i];</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+        return map;</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    updateDOMproperties(oldProps,newProps){</span>
<span class="hljs-addition">+        let propName;</span>
<span class="hljs-addition">+        //把新属性对象上没有属性给删除掉</span>
<span class="hljs-addition">+        for(propName in oldProps){</span>
<span class="hljs-addition">+            if(!newProps.hasOwnProperty(propName)){</span>
<span class="hljs-addition">+                $(`[data-reactid="${this._reactid}"]`).removeAttr(propName);</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+            if(/^on[A-Z]/.test(propName)){</span>
<span class="hljs-addition">+                $(document).undelegate(`.${this._reactid}`);</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+        for(propName in newProps){</span>
<span class="hljs-addition">+            if(propName == 'children'){</span>
<span class="hljs-addition">+                </span>
<span class="hljs-addition">+            }else if(/^on[A-Z]/.test(propName)){</span>
<span class="hljs-addition">+                let eventName = propName.slice(2).toLowerCase();</span>
<span class="hljs-addition">+                $(document).undelegate(`.${this._reactid}`);</span>
<span class="hljs-addition">+                $(document).delegate(`[data-reactid="${this._reactid}"]`,`${eventName}.${this._reactid}`,newProps[propName]);</span>
<span class="hljs-addition">+            }else if(propName === 'style'){</span>
<span class="hljs-addition">+                let styleObj = newProps[propName];</span>
<span class="hljs-addition">+                Object.entries(styleObj).forEach(([attr,value])=&gt;{</span>
<span class="hljs-addition">+                  $(`[data-reactid="${this._reactid}"]`).css(attr,value);</span>
<span class="hljs-addition">+                })</span>
<span class="hljs-addition">+            }else{</span>
<span class="hljs-addition">+                $(`[data-reactid="${this._reactid}"]`).prop(propName,newProps[propName]);</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+}</span>

class CompositeUnit extends Unit{
    //接收到新的更新，自定义组件传第二个参数，原生组件和text传处一个参数
    update(nextElement,partialState){
        //如果传过来了新的元素，则使用新的元素
        this._currentElement = nextElement||this._currentElement;
        //获取新的状态对象和属性对象
        let nextState = this._componentInstance.state= Object.assign(this._componentInstance.state,partialState);
        let nextProps = this._currentElement.props;
        //如果shouldComponentUpdate返回了false则不需要继续更新
        if(this._componentInstance.shouldComponentUpdate&amp;&amp;this._componentInstance.shouldComponentUpdate(nextProps,nextState)<span class="hljs-comment">===false){return;}</span>
        //获得上次渲染出来的unit实例 
        let prevRenderedUnitInstance = this._renderedUnitInstance;
        //从unit实例中获取
        let prevRenderedElement = prevRenderedUnitInstance._currentElement;
        //获取新的虚拟DOM
        let nextRenderElement = this._componentInstance.render();
        //进行domdiff对比
        if(shouldDeepCompare(prevRenderedElement,nextRenderElement)){
            //如果需要更新，则继续调用子节点的upate方法进行更新,传入新的element更新子节点
            prevRenderedUnitInstance.update(nextRenderElement);
            this._componentInstance.componentDidUpdate&amp;&amp;this._componentInstance.componentDidUpdate();
        }else{
            //如果发现不需要对比，干脆重新渲染
            this._renderedUnitInstance =  createUnit(nextRenderElement);
            let nextMarkUp = this._renderedUnitInstance.getMarkUp(this._reactid);
            //替换整个节点
            $(`[data-reactid="${this._reactid}"]`).replaceWith(nextMarkUp);
        }

    }
    getMarkUp(reactid){
        this._reactid = reactid;
        //type是一个自定义组件的类的定义
        let {type:Component,props} = this._currentElement;
        //创建Component类的实例
        let componentInstance = this._componentInstance = new Component(props);
        //组件实例关联上自己的unit实例
        componentInstance._currentUnit  = this;
        //组件将要渲染
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        //执行render方法获得虚拟DOM元素实例
        let renderedElement = componentInstance.render();
        //根据虚拟DOM元素得到unit,可能是TextUnit NativeUnit CompositeUnit
        let renderedUnitInstance = this._renderedUnitInstance= createUnit(renderedElement);
        //获得此unit的HTML标记字符串
        let renderedMarkUp = renderedUnitInstance.getMarkUp(reactid);
        //注册挂载完成的监听，越底层的组件越先监听，越先执行
        $(document).on('mounted',()=&gt;componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount());
        return renderedMarkUp;
    }
}

function shouldDeepCompare(prevElement,nextElement){
   if(prevElement!==null &amp;&amp; nextElement!=null){
       let prevType = typeof prevElement;
       let nextType = typeof nextElement;
       //如果新老节点都是文本可以进行比较
       if((prevType <span class="hljs-comment">=== 'string' ||prevType === 'number')&amp;&amp;(nextType === 'string' ||nextType === 'number')){</span>
           return true;
       }
       if(prevElement instanceof Element &amp;&amp; nextElement instanceof Element){
           return prevElement.type <span class="hljs-comment">=== nextElement.type;</span>
       }
   }  
   return false;
}
function createUnit(element){
  if(typeof element =='string' || typeof element =='number'){
      return new TextUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'string'){</span>
      return new NativeUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'function'){</span>
      return new CompositeUnit(element);
  }
}

export {
    createUnit
}
</code></pre>
<h3 id="t449.3 types.js">9.3 types.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t449.3%20types.js"> # </a></h3>
<p>src\types.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>  {
    <span class="hljs-attr">MOVE</span>:<span class="hljs-string">'MOVE'</span>,
    <span class="hljs-attr">INSERT</span>:<span class="hljs-string">"INSERT"</span>,
    <span class="hljs-attr">REMOVE</span>:<span class="hljs-string">"REMOVE"</span>
}
</code></pre>
<h2 id="t4510. 打补丁">10. 打补丁 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4510.%20%E6%89%93%E8%A1%A5%E4%B8%81"> # </a></h2>
<h3 id="t4610.1 src/index.js">10.1 src/index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4610.1%20src/index.js"> # </a></h3>
<p>src/index.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
  <span class="hljs-keyword">constructor</span>(props){
    <span class="hljs-keyword">super</span>(props);
    <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">odd</span>:<span class="hljs-literal">true</span>};
  }
  componentDidMount(){
   setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">odd</span>:!<span class="hljs-keyword">this</span>.state.odd});
   },<span class="hljs-number">5000</span>);
  }
  render(){
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.state.odd){
      <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'ul'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'wrapper'</span>},
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'A'</span>},<span class="hljs-string">'A'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'B'</span>},<span class="hljs-string">'B'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'C'</span>},<span class="hljs-string">'C'</span>),
        React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'D'</span>},<span class="hljs-string">'D'</span>),
      );
    }
    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'ul'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'wrapper'</span>},
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'A'</span>},<span class="hljs-string">'A'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'C'</span>},<span class="hljs-string">'C1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'B'</span>},<span class="hljs-string">'B1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'E'</span>},<span class="hljs-string">'E1'</span>),
      React.createElement(<span class="hljs-string">'li'</span>,{<span class="hljs-attr">key</span>:<span class="hljs-string">'F'</span>},<span class="hljs-string">'F1'</span>)
      );
  }
}
<span class="hljs-keyword">let</span> element = React.createElement(Counter);
React.render(element,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h3 id="t4710.2 react/unit.js">10.2 react/unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4710.2%20react/unit.js"> # </a></h3>
<p>src/react/unit.js</p>
<pre><code class="lang-diff">import {Element} from './element';
import $ from 'jquery';
import types from './types';
let diffQueue = [];
let updateDepth=0;
class Unit {
    constructor(element){
        this._currentElement = element;
    }
    getMarkUp(){
        throw new Error('不能调用此方法');
    }
}
class TextUnit extends Unit{
    getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        return `&lt;span data-reactid="${reactid}"&gt;${this._currentElement}&lt;/span&gt;`;
    }
    update(nextElement){
        if(this._currentElement != nextElement){
            this._currentElement = nextElement;
            $(`[data-reactid="${this._reactid}"]`).html(this._currentElement);
        }
    }

}
class NativeUnit extends Unit {
     getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        let {type,props} = this._currentElement;
        let tagOpen = `&lt;${type} data-reactid="${reactid}" `;
        let tagClose = `&lt;/$type&gt;`;
        let content = '';
        let renderedChildUnits=[];
        for(let propName in props){
            if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).delegate(`[data-reactid="${reactid}"]`,`${eventName}.${reactid}`,props[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = props[propName];
                let styles = Object.keys(styleObj).map(attr=&gt;{
                    let attrName = attr.replace(/([A-Z])/g,function(matched,group){
                        return `-${group.toLowerCase()}`;
                    })
                    return `${attrName}:${styleObj[attr]}`;
                }).join(';');
                tagOpen += (` style="${styles}" `);
            }else if (propName <span class="hljs-comment">=== 'children'){</span>
                let children = props.children||[];
                children.map((child,index)=&gt;{
                    let childUnit = createUnit(child);
                    childUnit._mountIndex = index;
                    renderedChildUnits.push(childUnit);
                    let childMarkUp = childUnit.getMarkUp(`${reactid}.${index}`);
                    content += childMarkUp;
                });
            }else{
                tagOpen += ` ${propName}=${props[propName]} `;
            }
        }
        this._renderedChildUnits = renderedChildUnits;
        return tagOpen + '&gt;' + content + tagClose;
    }
    update(nextElement){
        let oldProps = this._currentElement.props;
        let newProps = nextElement.props;
        this.updateDOMproperties(oldProps,newProps);
        this.updateDOMChildren(nextElement.props.children);
    }
    //对比子元素
    updateDOMChildren(newChildrenElements){
        updateDepth++;
        this.diff(diffQueue,newChildrenElements);
        updateDepth--;
        if(updateDepth<span class="hljs-comment">===0){</span>
            console.log('diffQueue',diffQueue);
<span class="hljs-addition">+            this.patch(diffQueue);</span>
            diffQueue=[];
        }
    }
<span class="hljs-addition">+    patch(diffQueue){</span>
<span class="hljs-addition">+        let deleteChildren = [];</span>
<span class="hljs-addition">+        let deleteMap={};</span>
<span class="hljs-addition">+        for(let i=0;i&lt;diffQueue.length;i++){</span>
<span class="hljs-addition">+            let difference = diffQueue[i];</span>
<span class="hljs-addition">+            if(difference.type===types.MOVE || difference.type===types.REMOVE){</span>
<span class="hljs-addition">+                let fromIndex = difference.fromIndex;</span>
<span class="hljs-addition">+                let oldChild = $(difference.parentNode.children().get(fromIndex));</span>
<span class="hljs-addition">+                deleteMap[fromIndex]=oldChild;</span>
<span class="hljs-addition">+                deleteChildren.push(oldChild);</span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+        $.each(deleteChildren,(idx,child)=&gt;{</span>
<span class="hljs-addition">+            $(child).remove();</span>
<span class="hljs-addition">+        });</span>

<span class="hljs-addition">+        for(let k=0;k&lt;diffQueue.length;k++){</span>
<span class="hljs-addition">+            let difference = diffQueue[k];</span>
<span class="hljs-addition">+            switch(difference.type){</span>
<span class="hljs-addition">+              case types.INSERT:</span>
<span class="hljs-addition">+                this.insertChildAt(difference.parentNode,$(difference.markUp),difference.toIndex);</span>
<span class="hljs-addition">+                break;</span>
<span class="hljs-addition">+              case types.MOVE:</span>
<span class="hljs-addition">+                this.insertChildAt(difference.parentNode,deleteMap[difference.fromIndex],difference.toIndex);</span>
<span class="hljs-addition">+                break;</span>
<span class="hljs-addition">+              default:</span>
<span class="hljs-addition">+               break;   </span>
<span class="hljs-addition">+            }</span>
<span class="hljs-addition">+        }</span>
<span class="hljs-addition">+    }</span>
<span class="hljs-addition">+    insertChildAt(parentNode,childNode,index){</span>
<span class="hljs-addition">+        let oldChild = parentNode.children().get(index);</span>
<span class="hljs-addition">+        oldChild?childNode.insertBefore(oldChild):childNode.appendTo(parentNode);</span>
<span class="hljs-addition">+    }</span>
    diff(diffQueue,newChildrenElements){
        let oldChildUnitsMap = this.getChildrenMap(this._renderedChildUnits);
        let {newChildrenMap,newChildren} = this.getNewChildren(oldChildUnitsMap,newChildrenElements);
        // lastIndex里存放着被复用的子元素的最大索引
        let lastIndex = 0;
        for(let i=0;i&lt;newChildren.length;i++){
            let newChild = newChildren[i];//取得新元素
            let newKey = (newChild._currentElement.props&amp;&amp;newChild._currentElement.key)||i.toString();//取得新key
            let oldChild = oldChildUnitsMap[newKey];
            if(oldChild <span class="hljs-comment">=== newChild){</span>
                if(oldChild._mountIndex &lt; lastIndex){
                    diffQueue.push({
                        parentId:this._reactid,
                        parentNode:$(`[data-reactid="${this._reactid}"]`),
                        type:types.MOVE,
                        fromIndex:oldChild._mountIndex,
                        toIndex:i
                    });
                }
                lastIndex = Math.max(oldChild._mountIndex,lastIndex);
                //否则根本不用移动，直接修改挂载索引为新索引i即可
            }else{
                if(oldChild){
                    diffQueue.push({
                        parentId:this._reactid,
                        parentNode:$(`[data-reactid="${this._reactid}"]`),
                        type:types.REMOVE,
                        fromIndex:oldChild._mountIndex
                    });
                    $(document).undelegate(`.${oldChild._reactid}`);
                }
                 diffQueue.push({
                        parentId:this._reactid,
                        parentNode:$(`[data-reactid="${this._reactid}"]`),
                        type:types.INSERT,
                        toIndex:i,
                        markUp:newChild.getMarkUp(`${this._reactid}.${i}`)
                });
            }
            newChild._mountIndex = i;
        }
        for(let oldKey in oldChildUnitsMap){
            if(!newChildrenMap.hasOwnProperty(oldKey)){
                let oldChild = oldChildUnitsMap[oldKey];
                diffQueue.push({
                        parentId:this._reactid,
                        parentNode:$(`[data-reactid="${this._reactid}"]`),
                        type:types.REMOVE,
                        fromIndex:oldChild._mountIndex
                });
            }
        }
    }
    getNewChildren(oldChildUnitsMap,newChildrenElements){
        let newChildren = [];
        let newChildrenMap={};
        newChildrenElements.forEach((newElement,index)=&gt;{
            let newKey = newElement.key||index.toString();
            let oldUnit = oldChildUnitsMap[newKey];//获得老的unit
            let oldElement = oldUnit&amp;&amp;oldUnit._currentElement;//获得老的element
            if(shouldDeepCompare(oldElement,newElement)){//如果可以更进一步深比较
                oldUnit.update(newElement);
                newChildren.push(oldUnit);
                newChildrenMap[newKey]=oldUnit;
            }else{
                let newChildUnit = createUnit(newElement);//如果不需要深比较则直接创建新的unit
                newChildren.push(newChildUnit);
                 newChildrenMap[newKey]=newChildUnit;
            }
        });
        return {newChildrenMap,newChildren};
    }
    getChildrenMap(childUnits=[]){
        let map = {};
        for(let i=0;i&lt;childUnits.length;i++){
            let key = (childUnits[i]._currentElement.props&amp;&amp;childUnits[i]._currentElement.props.key)||i.toString();
            map[key]=childUnits[i];
        }
        return map;
    }
    updateDOMproperties(oldProps,newProps){
        let propName;
        //把新属性对象上没有属性给删除掉
        for(propName in oldProps){
            if(!newProps.hasOwnProperty(propName)){
                $(`[data-reactid="${this._reactid}"]`).removeAttr(propName);
            }
            if(/^on[A-Z]/.test(propName)){
                $(document).undelegate(`.${this._reactid}`);
            }
        }
        for(propName in newProps){
            if(propName == 'children'){

            }else if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).undelegate(`.${this._reactid}`);
                $(document).delegate(`[data-reactid="${this._reactid}"]`,`${eventName}.${this._reactid}`,newProps[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = newProps[propName];
                Object.entries(styleObj).forEach(([attr,value])=&gt;{
                  $(`[data-reactid="${this._reactid}"]`).css(attr,value);
                })
            }else{
                $(`[data-reactid="${this._reactid}"]`).prop(propName,newProps[propName]);
            }
        }
    }
}

class CompositeUnit extends Unit{
    //接收到新的更新，自定义组件传第二个参数，原生组件和text传处一个参数
    update(nextElement,partialState){
        //如果传过来了新的元素，则使用新的元素
        this._currentElement = nextElement||this._currentElement;
        //获取新的状态对象和属性对象
        let nextState = this._componentInstance.state= Object.assign(this._componentInstance.state,partialState);
        let nextProps = this._currentElement.props;
        //如果shouldComponentUpdate返回了false则不需要继续更新
        if(this._componentInstance.shouldComponentUpdate&amp;&amp;this._componentInstance.shouldComponentUpdate(nextProps,nextState)<span class="hljs-comment">===false){return;}</span>
        //获得上次渲染出来的unit实例 
        let prevRenderedUnitInstance = this._renderedUnitInstance;
        //从unit实例中获取
        let prevRenderedElement = prevRenderedUnitInstance._currentElement;
        //获取新的虚拟DOM
        let nextRenderElement = this._componentInstance.render();
        //进行domdiff对比
        if(shouldDeepCompare(prevRenderedElement,nextRenderElement)){
            //如果需要更新，则继续调用子节点的upate方法进行更新,传入新的element更新子节点
            prevRenderedUnitInstance.update(nextRenderElement);
            this._componentInstance.componentDidUpdate&amp;&amp;this._componentInstance.componentDidUpdate();
        }else{
            //如果发现不需要对比，干脆重新渲染
            this._renderedUnitInstance =  createUnit(nextRenderElement);
            let nextMarkUp = this._renderedUnitInstance.getMarkUp(this._reactid);
            //替换整个节点
            $(`[data-reactid="${this._reactid}"]`).replaceWith(nextMarkUp);
        }

    }
    getMarkUp(reactid){
        this._reactid = reactid;
        //type是一个自定义组件的类的定义
        let {type:Component,props} = this._currentElement;
        //创建Component类的实例
        let componentInstance = this._componentInstance = new Component(props);
        //组件实例关联上自己的unit实例
        componentInstance._currentUnit  = this;
        //组件将要渲染
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        //执行render方法获得虚拟DOM元素实例
        let renderedElement = componentInstance.render();
        //根据虚拟DOM元素得到unit,可能是TextUnit NativeUnit CompositeUnit
        let renderedUnitInstance = this._renderedUnitInstance= createUnit(renderedElement);
        //获得此unit的HTML标记字符串
        let renderedMarkUp = renderedUnitInstance.getMarkUp(reactid);
        //注册挂载完成的监听，越底层的组件越先监听，越先执行
        $(document).on('mounted',()=&gt;componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount());
        return renderedMarkUp;
    }
}

function shouldDeepCompare(prevElement,nextElement){
   if(prevElement!==null &amp;&amp; nextElement!=null){
       let prevType = typeof prevElement;
       let nextType = typeof nextElement;
       //如果新老节点都是文本可以进行比较
       if((prevType <span class="hljs-comment">=== 'string' ||prevType === 'number')&amp;&amp;(nextType === 'string' ||nextType === 'number')){</span>
           return true;
       }
       if(prevElement instanceof Element &amp;&amp; nextElement instanceof Element){
           return prevElement.type <span class="hljs-comment">=== nextElement.type;</span>
       }
   }  
   return false;
}
function createUnit(element){
  if(typeof element =='string' || typeof element =='number'){
      return new TextUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'string'){</span>
      return new NativeUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'function'){</span>
      return new CompositeUnit(element);
  }
}

export {
    createUnit
}
</code></pre>
<h2 id="t4811. todos">11. todos <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4811.%20todos"> # </a></h2>
<p><a href="https://gitee.com/zhufengpeixun/zhufeng_react2/commit/466915a20e4bb8d0d019b3325ad47867a3891fae">commit</a></p>
<h3 id="t4911.1 src/index.js">11.1 src/index.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t4911.1%20src/index.js"> # </a></h3>
<p>src/index.js</p>
<pre><code class="lang-js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'./react'</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Todos</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>{
    <span class="hljs-keyword">constructor</span>(props){
        <span class="hljs-keyword">super</span>(props);
        <span class="hljs-keyword">this</span>.state = {<span class="hljs-attr">list</span>:[],<span class="hljs-attr">text</span>:<span class="hljs-string">''</span>};
    }
    add(){
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.state.text &amp;&amp; <span class="hljs-keyword">this</span>.state.text.length&gt;<span class="hljs-number">0</span>){
        <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">list</span>:[...this.state.list,<span class="hljs-keyword">this</span>.state.text],<span class="hljs-attr">text</span>:<span class="hljs-string">''</span>});
      }
    }
    onChange(event) {
        <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">text</span>: event.target.value});
    }
    onDel(index) {
        <span class="hljs-keyword">this</span>.state.list.splice(index,<span class="hljs-number">1</span>);
        <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">list</span>: <span class="hljs-keyword">this</span>.state.list});
    }
    render(){
        <span class="hljs-keyword">var</span> createItem = <span class="hljs-function">(<span class="hljs-params">itemText,index</span>)=&gt;</span> {
            <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">"div"</span>, {}, itemText,React.createElement(<span class="hljs-string">'button'</span>,{<span class="hljs-attr">onClick</span>: <span class="hljs-keyword">this</span>.onDel.bind(<span class="hljs-keyword">this</span>,index)},<span class="hljs-string">'X'</span>));
        };

        <span class="hljs-keyword">var</span> lists = <span class="hljs-keyword">this</span>.state.list.map(createItem);
        <span class="hljs-keyword">var</span> input = React.createElement(<span class="hljs-string">"input"</span>, {<span class="hljs-attr">onKeyup</span>: <span class="hljs-keyword">this</span>.onChange.bind(<span class="hljs-keyword">this</span>),<span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.state.text});
        <span class="hljs-keyword">var</span> button = React.createElement(<span class="hljs-string">"button"</span>, {<span class="hljs-attr">onClick</span>: <span class="hljs-keyword">this</span>.add.bind(<span class="hljs-keyword">this</span>)}, <span class="hljs-string">'Add'</span>)
        <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'div'</span>,{},input,button,...lists);
    }
}
<span class="hljs-keyword">let</span> todos = React.createElement(Todos);
React.render(todos,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));
</code></pre>
<h3 id="t5011.2 react/unit.js">11.2 react/unit.js <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5011.2%20react/unit.js"> # </a></h3>
<p>src/react/unit.js</p>
<pre><code class="lang-diff">import {Element} from './element';
import $ from 'jquery';
import types from './types';
let diffQueue = [];
let updateDepth=0;
class Unit {
    constructor(element){
        this._currentElement = element;
    }
    getMarkUp(){
        throw new Error('不能调用此方法');
    }
}
class TextUnit extends Unit{
    getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        return `&lt;span data-reactid="${reactid}"&gt;${this._currentElement}&lt;/span&gt;`;
    }
    update(nextElement){
        if(this._currentElement != nextElement){
            this._currentElement = nextElement;
            $(`[data-reactid="${this._reactid}"]`).html(this._currentElement);
        }
    }

}
class NativeUnit extends Unit {
     getMarkUp(reactid){
         this._reactid = reactid;//保存记录reactid
        //返回文本节点对应的HTML字符串
        let {type,props} = this._currentElement;
        let tagOpen = `&lt;${type} data-reactid="${reactid}" `;
        let tagClose = `&lt;/$type&gt;`;
        let content = '';
        let renderedChildUnits=[];
        for(let propName in props){
            if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).delegate(`[data-reactid="${reactid}"]`,`${eventName}.${reactid}`,props[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = props[propName];
                let styles = Object.keys(styleObj).map(attr=&gt;{
                    let attrName = attr.replace(/([A-Z])/g,function(matched,group){
                        return `-${group.toLowerCase()}`;
                    })
                    return `${attrName}:${styleObj[attr]}`;
                }).join(';');
                tagOpen += (` style="${styles}" `);
            }else if (propName <span class="hljs-comment">=== 'children'){</span>
                let children = props.children||[];
                children.map((child,index)=&gt;{
                    let childUnit = createUnit(child);
                    childUnit._mountIndex = index;
                    renderedChildUnits.push(childUnit);
                    let childMarkUp = childUnit.getMarkUp(`${reactid}.${index}`);
                    content += childMarkUp;
                });
            }else{
                tagOpen += ` ${propName}=${props[propName]} `;
            }
        }
        this._renderedChildUnits = renderedChildUnits;
        return tagOpen + '&gt;' + content + tagClose;
    }
    update(nextElement){
        let oldProps = this._currentElement.props;
        let newProps = nextElement.props;
        this.updateDOMproperties(oldProps,newProps);
        this.updateDOMChildren(nextElement.props.children);
    }
    //对比子元素
    updateDOMChildren(newChildrenElements){
        updateDepth++;
        this.diff(diffQueue,newChildrenElements);
        updateDepth--;
        if(updateDepth<span class="hljs-comment">===0){</span>
            console.log('diffQueue',diffQueue);
            this.patch(diffQueue);
            diffQueue=[];
        }
    }
    patch(diffQueue){
        let deleteChildren = [];
        let deleteMap={};
        for(let i=0;i&lt;diffQueue.length;i++){
            let difference = diffQueue[i];
            if(difference.type<span class="hljs-comment">===types.MOVE || difference.type===types.REMOVE){</span>
                let fromIndex = difference.fromIndex;
<span class="hljs-addition">+                let parentId = difference.parentId;</span>
<span class="hljs-addition">+                let oldChild = $(difference.parentNode.children().get(fromIndex));</span>
<span class="hljs-addition">+                deleteMap[parentId]={};</span>
<span class="hljs-addition">+                deleteMap[parentId][fromIndex]=oldChild;</span>
                deleteChildren.push(oldChild);
            }
        }
        $.each(deleteChildren,(idx,child)=&gt;{
            $(child).remove();
        });

        for(let k=0;k&lt;diffQueue.length;k++){
            let difference = diffQueue[k];
            switch(difference.type){
              case types.INSERT:
                this.insertChildAt(difference.parentNode,$(difference.markUp),difference.toIndex);
                break;
              case types.MOVE:
<span class="hljs-addition">+                this.insertChildAt(difference.parentNode,deleteMap[difference.parentId][difference.fromIndex],difference.toIndex);</span>
                break;
              default:
               break;   
            }
        }
    }
    insertChildAt(parentNode,childNode,index){
        let oldChild = parentNode.children().get(index);
        oldChild?childNode.insertBefore(oldChild):childNode.appendTo(parentNode);
    }
    diff(diffQueue,newChildrenElements){
        let oldChildUnitsMap = this.getChildrenMap(this._renderedChildUnits);
        let {newChildrenMap,newChildren} = this.getNewChildren(oldChildUnitsMap,newChildrenElements);
        // lastIndex里存放着被复用的子元素的最大索引
        let lastIndex = 0;
        for(let i=0;i&lt;newChildren.length;i++){
            let newChild = newChildren[i];//取得新元素
            let newKey = (newChild._currentElement.props&amp;&amp;newChild._currentElement.key)||i.toString();//取得新key
            let oldChild = oldChildUnitsMap[newKey];
            if(oldChild <span class="hljs-comment">=== newChild){</span>
                if(oldChild._mountIndex &lt; lastIndex){
                    diffQueue.push({
                        parentId:this._reactid,
                        parentNode:$(`[data-reactid="${this._reactid}"]`),
                        type:types.MOVE,
                        fromIndex:oldChild._mountIndex,
                        toIndex:i
                    });
                }
                lastIndex = Math.max(oldChild._mountIndex,lastIndex);
                //否则根本不用移动，直接修改挂载索引为新索引i即可
            }else{
                if(oldChild){
                    diffQueue.push({
                        parentId:this._reactid,
                        parentNode:$(`[data-reactid="${this._reactid}"]`),
                        type:types.REMOVE,
                        fromIndex:oldChild._mountIndex
                    });
                    $(document).undelegate(`.${oldChild._reactid}`);
                }
                 diffQueue.push({
                        parentId:this._reactid,
                        parentNode:$(`[data-reactid="${this._reactid}"]`),
                        type:types.INSERT,
                        toIndex:i,
                        markUp:newChild.getMarkUp(`${this._reactid}.${i}`)
                });
            }
            newChild._mountIndex = i;
        }
        for(let oldKey in oldChildUnitsMap){
            if(!newChildrenMap.hasOwnProperty(oldKey)){
                let oldChild = oldChildUnitsMap[oldKey];
                diffQueue.push({
                        parentId:this._reactid,
                        parentNode:$(`[data-reactid="${this._reactid}"]`),
                        type:types.REMOVE,
                        fromIndex:oldChild._mountIndex
                });
<span class="hljs-addition">+                this._renderedChildUnits = this._renderedChildUnits.filter(item=&gt;item != oldChild);</span>
<span class="hljs-addition">+                $(document).undelegate(`.${oldChild._reactid}`);</span>
            }
        }
    }
    getNewChildren(oldChildUnitsMap,newChildrenElements){
        let newChildren = [];
        let newChildrenMap={};
        newChildrenElements.forEach((newElement,index)=&gt;{
            let newKey = newElement.key||index.toString();
            let oldUnit = oldChildUnitsMap[newKey];//获得老的unit
            let oldElement = oldUnit&amp;&amp;oldUnit._currentElement;//获得老的element
            if(shouldDeepCompare(oldElement,newElement)){//如果可以更进一步深比较
                oldUnit.update(newElement);
                newChildren.push(oldUnit);
                newChildrenMap[newKey]=oldUnit;
            }else{
                let newChildUnit = createUnit(newElement);//如果不需要深比较则直接创建新的unit
                newChildren.push(newChildUnit);
                newChildrenMap[newKey]=newChildUnit;
                this._renderedChildUnits[index]=newChildUnit;
            }
        });
        return {newChildrenMap,newChildren};
    }
    getChildrenMap(childUnits=[]){
        let map = {};
        for(let i=0;i&lt;childUnits.length;i++){
            let key = (childUnits[i]._currentElement.props&amp;&amp;childUnits[i]._currentElement.props.key)||i.toString();
            map[key]=childUnits[i];
        }
        return map;
    }
    updateDOMproperties(oldProps,newProps){
        let propName;
        //把新属性对象上没有属性给删除掉
        for(propName in oldProps){
            if(!newProps.hasOwnProperty(propName)){
                $(`[data-reactid="${this._reactid}"]`).removeAttr(propName);
            }
            if(/^on[A-Z]/.test(propName)){
                $(document).undelegate(`.${this._reactid}`);
            }
        }
        for(propName in newProps){
            if(propName == 'children'){

            }else if(/^on[A-Z]/.test(propName)){
                let eventName = propName.slice(2).toLowerCase();
                $(document).undelegate(`.${this._reactid}`);
                $(document).delegate(`[data-reactid="${this._reactid}"]`,`${eventName}.${this._reactid}`,newProps[propName]);
            }else if(propName <span class="hljs-comment">=== 'style'){</span>
                let styleObj = newProps[propName];
                Object.entries(styleObj).forEach(([attr,value])=&gt;{
                  $(`[data-reactid="${this._reactid}"]`).css(attr,value);
                })
            }else{
                $(`[data-reactid="${this._reactid}"]`).prop(propName,newProps[propName]);
            }
        }
    }
}

class CompositeUnit extends Unit{
    //接收到新的更新，自定义组件传第二个参数，原生组件和text传处一个参数
    update(nextElement,partialState){
        //如果传过来了新的元素，则使用新的元素
        this._currentElement = nextElement||this._currentElement;
        //获取新的状态对象和属性对象
        let nextState = this._componentInstance.state= Object.assign(this._componentInstance.state,partialState);
        let nextProps = this._currentElement.props;
        //如果shouldComponentUpdate返回了false则不需要继续更新
        if(this._componentInstance.shouldComponentUpdate&amp;&amp;this._componentInstance.shouldComponentUpdate(nextProps,nextState)<span class="hljs-comment">===false){return;}</span>
        //获得上次渲染出来的unit实例 
        let prevRenderedUnitInstance = this._renderedUnitInstance;
        //从unit实例中获取
        let prevRenderedElement = prevRenderedUnitInstance._currentElement;
        //获取新的虚拟DOM
        let nextRenderElement = this._componentInstance.render();
        //进行domdiff对比
        if(shouldDeepCompare(prevRenderedElement,nextRenderElement)){
            //如果需要更新，则继续调用子节点的upate方法进行更新,传入新的element更新子节点
            prevRenderedUnitInstance.update(nextRenderElement);
            this._componentInstance.componentDidUpdate&amp;&amp;this._componentInstance.componentDidUpdate();
        }else{
            //如果发现不需要对比，干脆重新渲染
            this._renderedUnitInstance =  createUnit(nextRenderElement);
            let nextMarkUp = this._renderedUnitInstance.getMarkUp(this._reactid);
            //替换整个节点
            $(`[data-reactid="${this._reactid}"]`).replaceWith(nextMarkUp);
        }

    }
    getMarkUp(reactid){
        this._reactid = reactid;
        //type是一个自定义组件的类的定义
        let {type:Component,props} = this._currentElement;
        //创建Component类的实例
        let componentInstance = this._componentInstance = new Component(props);
        //组件实例关联上自己的unit实例
        componentInstance._currentUnit  = this;
        //组件将要渲染
        componentInstance.componentWillMount&amp;&amp;componentInstance.componentWillMount();
        //执行render方法获得虚拟DOM元素实例
        let renderedElement = componentInstance.render();
        //根据虚拟DOM元素得到unit,可能是TextUnit NativeUnit CompositeUnit
        let renderedUnitInstance = this._renderedUnitInstance= createUnit(renderedElement);
        //获得此unit的HTML标记字符串
        let renderedMarkUp = renderedUnitInstance.getMarkUp(reactid);
        //注册挂载完成的监听，越底层的组件越先监听，越先执行
        $(document).on('mounted',()=&gt;componentInstance.componentDidMount&amp;&amp;componentInstance.componentDidMount());
        return renderedMarkUp;
    }
}

function shouldDeepCompare(prevElement,nextElement){
   if(prevElement!==null &amp;&amp; nextElement!=null){
       let prevType = typeof prevElement;
       let nextType = typeof nextElement;
       //如果新老节点都是文本可以进行比较
       if((prevType <span class="hljs-comment">=== 'string' ||prevType === 'number')&amp;&amp;(nextType === 'string' ||nextType === 'number')){</span>
           return true;
       }
       if(prevElement instanceof Element &amp;&amp; nextElement instanceof Element){
           return prevElement.type <span class="hljs-comment">=== nextElement.type;</span>
       }
   }  
   return false;
}
function createUnit(element){
  if(typeof element =='string' || typeof element =='number'){
      return new TextUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'string'){</span>
      return new NativeUnit(element);
  }
  if(element instanceof Element &amp;&amp; typeof element.type <span class="hljs-comment">=== 'function'){</span>
      return new CompositeUnit(element);
  }
}

export {
    createUnit
}
</code></pre>
<h2 id="t5110. diff 策略">10. diff 策略 <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5110.%20diff%20%E7%AD%96%E7%95%A5"> # </a></h2>
<ul>
<li>Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li>
<li>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li>
<li>对于同一层级的一组子节点，它们可以通过唯一<code>key</code>进行区分。</li>
</ul>
<h3 id="t5210.1 tree diff">10.1 tree diff <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5210.1%20tree%20diff"> # </a></h3>
<ul>
<li>React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较</li>
</ul>
<p><img src="./60.react-2_files/sametree.png" alt="sametree"></p>
<ul>
<li>当出现节点跨层级移动时，并不会出现想象中的移动操作，而是以 A 为根节点的树被整个重新创建</li>
</ul>
<p><img src="./60.react-2_files/movemytree.png" alt="movemytree"></p>
<h3 id="t5310.2 component  diff">10.2 component  diff <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5310.2%20component%20%20diff"> # </a></h3>
<ul>
<li>如果是同一类型的组件，按照原策略继续比较 <code>virtual DOM tree</code></li>
<li>如果不是，则将该组件判断为<code>dirty component</code>,从而替换整个组件下的所有子节点</li>
</ul>
<p><img src="./60.react-2_files/deleteall.png" alt="deleteall"></p>
<h3 id="t5410.3 element diff">10.3 element diff <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5410.3%20element%20diff"> # </a></h3>
<ul>
<li>当节点处于同一层级时，React diff 提供了三种节点操作,分别为：INSERT(插入)、MOVE(移动)和 REMOVE(删除)</li>
<li>INSERT 新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作</li>
<li>MOVE 在老集合有新 component 类型，就需要做移动操作，可以复用以前的 DOM 节点</li>
<li>REMOVE 老 component 不在新集合里的，也需要执行删除操作</li>
</ul>
<h3 id="t5510.4 key">10.4 key <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5510.4%20key"> # </a></h3>
<p><img src="./60.react-2_files/oldnewmove.png" alt="oldnewmove"></p>
<p><img src="./60.react-2_files/oldnewmove2.png" alt="oldnewmove2"></p>
<p><img src="./60.react-2_files/oldnewmove3.png" alt="oldnewmove3"></p>
<h2 id="t5611.delegate">11.delegate <a href="http://www.zhufengpeixun.cn/architecture/html/60.react-2.html#t5611.delegate"> # </a></h2>
<ul>
<li>delegate() 方法为指定的元素(属于被选元素的子元素)添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数，使用 delegate() 方法的事件处理程序适用于当前或未来的元素(比如由脚本创建的新元素)</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">参数名称</th>
<th style="text-align:left">参数含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">childSelector</td>
<td style="text-align:left">必需,规定要附加事件处理程序的一个或多个子元素</td>
</tr>
<tr>
<td style="text-align:left">event</td>
<td style="text-align:left">必需,规定附加到元素的一个或多个事件,由空格分隔多个事件值。必须是有效的事件</td>
</tr>
<tr>
<td style="text-align:left">data</td>
<td style="text-align:left">可选,规定传递到函数的额外数据</td>
</tr>
<tr>
<td style="text-align:left">function</td>
<td style="text-align:left">必需,规定当事件发生时运行的函数</td>
</tr>
</tbody>
</table>
<ul>
<li><a href="https://api.jquery.com/delegate/">delegate</a></li>
<li><p><a href="http://api.jquery.com/undelegate/">undelegate</a></p>
</li>
<li><p>参数<code>events</code>还支持为事件类型附加额外的命名空间</p>
</li>
<li>当为同一元素绑定多个相同类型的事件处理函数时。使用命名空间，可以在触发事件、移除事件时限定触发或移除的范围。</li>
</ul>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> $<span class="hljs-built_in">document</span> = $(<span class="hljs-built_in">document</span>);
<span class="hljs-comment">//为#btn1元素绑定click事件，定义在foo和bar两个命名空间下</span>
$<span class="hljs-built_in">document</span>.delegate(<span class="hljs-string">"#btn1"</span>, <span class="hljs-string">"click.foo.bar"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
    alert(<span class="hljs-string">"click-1"</span>);
});
<span class="hljs-comment">//为#btn1元素绑定click事件，定义在test命名空间下</span>
$<span class="hljs-built_in">document</span>.delegate(<span class="hljs-string">"#btn1"</span>, <span class="hljs-string">"click.test"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
    alert(<span class="hljs-string">"click-2"</span>);
});
<span class="hljs-comment">//为#btn1元素绑定click事件，定义在test和foo两个命名空间下</span>
$<span class="hljs-built_in">document</span>.delegate(<span class="hljs-string">"#btn1"</span>, <span class="hljs-string">"click.test.foo"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
    alert(<span class="hljs-string">"click-3"</span>);
});


<span class="hljs-comment">// 触发所有click事件</span>
$btn1.trigger(<span class="hljs-string">"click"</span>); <span class="hljs-comment">// 触发A和B (event.namespace = "")</span>
<span class="hljs-comment">// 触发定义在foo命名空间下的click事件</span>
$btn1.trigger(<span class="hljs-string">"click.foo"</span>); <span class="hljs-comment">// 触发A (event.namespace = "foo")</span>
<span class="hljs-comment">// 触发定义在bar命名空间下的click事件</span>
$btn1.trigger(<span class="hljs-string">"click.bar"</span>); <span class="hljs-comment">// 触发A (event.namespace = "bar")</span>
<span class="hljs-comment">// 移除所有btn1元素定义在foo命名空间下的click事件处理函数</span>
$btn1.undelegate( <span class="hljs-string">"click.foo"</span> ); <span class="hljs-comment">// 移除A</span>

<span class="hljs-comment">// $document.undelegate(".test"); // 移除click-2、click-3</span>

<span class="hljs-comment">// $document.undelegate(".foo");  // 移除click-1、click-3</span>

<span class="hljs-comment">// $document.undelegate(".foo.bar");  // 移除click-1</span>
</code></pre>

        <div class="copyright">Powered by <a href="https://github.com/jaywcjlove/idoc" target="_blank">idoc</a>. Dependence <a href="https://nodejs.org/">Node.js</a> run.</div>
    </div>
    
</div>

<script src="./60.react-2_files/jquery.js"></script>
<script>
$('.warpper .page-toc ul ul li a').on('click',function(){
  $('.warpper .page-toc ul ul li a').removeClass('my-active')
  $(this).addClass('my-active')
})

$('.logo').on('mouseenter',function(){
  $('.nav').height('400px');
})
$('.nav').on('mouseleave',function(){
  $('.nav').height('80px');
})
$('.logo').on('click',function(){
  $('.nav').css('display','none');
 $('.warpper').css('padding','0px');
})
// if (!$('.understand-me').length) {
  //   var bar = $(window).height() - $('.navbar ').height() - $('.page-toc').position().top;
  //   var count = bar / 26 / 2;
  //   var barHeight = $('.page-toc').outerHeight();
  //   $('.page-toc li').eq(0).children('a').addClass('red');
  //   var arr = [];
  //   $("h1,h2,h3,h4,h5,h6").each(function () {
  //     arr.push($(this).position().top);
  //   });
  //   var timer
  //   function dark() {
  //     clearTimeout(timer)
  //      timer = setTimeout(function () {
  //      var top = Math.abs($('.page-toc > ul').position().top);
  //      var cur = $('.content').scrollTop();
  //      for (var i = arr.length; i >= 0; i--) {
  //        if (arr[i] <= cur) {
  //          break;
  //        }
  //      }
  //      if (i === -1) {
  //        i = 0;
  //      }
  //      $('.page-toc li a').removeClass('red');
  //      $('.page-toc li').eq(i).children('a').addClass('red');
  //      let height = $('.page-toc li').eq(i).position().top-$('.page-toc').height(); // 如果当前的offset出去了 回到中间可好？
  //      $('.page-toc').scrollTop(height+$('.page-toc').height()/2);
  //    },200)
  //   }

  //   $('.content').on('scroll', dark);
  // }
</script>
<style>

    /* ::-webkit-scrollbar{width:14px;}
    ::-webkit-scrollbar-track{background-color:transparent;}
    ::-webkit-scrollbar-thumb{background-color:transparent;}
    ::-webkit-scrollbar-thumb:hover {background-color:transparent}
    ::-webkit-scrollbar-thumb:active {background-color:transparent} */

    .page-toc > ul .red {
        background: #f3f3f3;
        z-index: 1;
        border-left: 3px solid #009a61;
        -webkit-transition: all .2s ease;
        transition: all .2s ease;
        color: #000
    }





</style>


</body></html>